{"name":"cert_ssl_app_common","scriptType":"Python","scriptContent":"import sys\nsys.path.insert(0,AVX::DEPENDENCIES)\nsys.path.insert(0,AVX::HELPER)\n\nfrom appviewx import db_connection\nfrom bson.objectid import ObjectId\nimport base64\n\n\ndef get_string(dict_map, key):\n    if key in dict_map.keys():\n        return str(dict_map[key])\n    return \"\"\n\ndef get_group_names(roles):\n    \n    db = db_connection().appviewx\n    \n    query = { \"role\": { \"$in\" : roles }, \"permission\":{ \"$regex\" : \":RW\"}}\n    roleCertificateGroupCursor = db.roleCertificateGroup.find(query)\n    \n    groupNames = list()\n    for roleCertificateGroup in roleCertificateGroupCursor:\n        groupNames.append({\"certGroup\": get_string(roleCertificateGroup, \"groupName\")})\n        \n    return groupNames\n    \n    \n\ndef get_roles(username):\n    \n    db = db_connection().appviewx\n    \n    user = db.user.find_one({\"loginName\":str(username)})\n    \n    roles = list()\n    \n    for role in user[\"roles\"]:\n        roles.append(role)\n    \n    return roles\n    \n    \n    \ndef add_list_to_dictionary(dictonary ,key, values):\n    for value in values:\n        dictonary.append({key:value})\n    \n    \n    \ndef encode(value):\n    \n    return base64.encodestring(value).rstrip()\n    \n\n\ndef get_certificate_uuid(common_name_and_serial_number):\n    \n    db = db_connection().appviewx\n    \n    certificate_details = common_name_and_serial_number.split(';')\n    \n    certificate = db.certificate.find_one({\"commonName\":certificate_details[0], \"serialNumber\":certificate_details[1]}, {\"uuid\":1})\n    \n    return certificate[\"uuid\"]\n\n\n\n\ndef get_rw_group_names(username):\n    roles = get_roles(username)\n    response = get_group_names(roles)\n    \n    return response\n    \n    \n\ndef get_managed_devices(vendor,username):\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    managelist = list()\n    \n    for device_value in db.device.find({'status' : 'Managed', 'vendor' : vendor, 'roles' : { '$in' : roles } }):\n    \n        managelist.append({\"devices_list\": device_value['name']})\n    \n    return managelist\n    \ndef get_managed_devices_apache(vendor,username):\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    managelist = list()\n    \n    for device_value in db.device.find({'status' : 'Managed', 'vendor' : vendor, 'roles' : { '$in' : roles } }):\n    \n        managelist.append({\"devices_list\": device_value['name']+\":\"+device_value['ip']})\n    \n    return managelist\n\ndef get_managed_devices_tomcat(vendor,username):\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    managelist = list()\n \n    for device_value in db.device.find({'status' : 'Managed', 'vendor' : vendor, 'roles' : { '$in' : roles } }):\n    \n        managelist.append({\"devices_list\": device_value['name']+\":\"+device_value['ip']})\n    \n    return managelist\n    \ndef adc_finder_script_application_f5(username):\n    \n    Available_SSLProfiles_list=list()\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    for values in db.device.find({'status' : 'Managed', 'roles' : { '$in' : roles }}):\n        try:\n            if ((values['category'] in  ['ADC','Server','Others']) and (values['status'] ==  'Managed')):\n                 Available_SSLProfiles_list.append({\"Available_SSLProfiles\":values[\"name\"]})\n        except keyError:\n             continue\n    return Available_SSLProfiles_list\n    \ndef server_finder_script_application_apache(username):\n    \n    Available_SSLProfiles_list=list()\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    for values in db.device.find({'status' : 'Managed', 'vendor' : 'Apache','roles' : { '$in' : roles }}):\n        try:\n            if ((values['category'] ==  'Server')and(values['vendor'] ==  'Apache') and (values['status'] ==  'Managed')):\n                 Available_SSLProfiles_list.append({\"Available_SSLProfiles\":values[\"name\"]})\n        except keyError:\n             continue\n    return Available_SSLProfiles_list\n\ndef server_finder_script_application_tomcat(username):\n    \n    Available_SSLProfiles_list=list()\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    for values in db.device.find({'status' : 'Managed', 'vendor' : 'Tomcat','roles' : { '$in' : roles }}):\n        try:\n            if ((values['category'] ==  'Server')and(values['vendor'] ==  'Tomcat') and (values['status'] ==  'Managed')):\n                 Available_SSLProfiles_list.append({\"Available_SSLProfiles\":values[\"name\"]})\n        except keyError:\n             continue\n    return Available_SSLProfiles_list\n    \ndef server_finder_script_application_websphere(username):\n    \n    Available_SSLProfiles_list=list()\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    for values in db.device.find({'status' : 'Managed', 'vendor' : 'Websphere','roles' : { '$in' : roles }}):\n        for val in db.me_server.find({\"deviceName\":values[\"name\"]}):\n            try:\n                if ((values['category'] ==  'Server')and(values['vendor'] ==  'Websphere') and (values['status'] ==  'Managed')):\n                    Available_SSLProfiles_list.append({\"Available_SSLProfiles\":values[\"name\"]+\":\"+val[\"managementScope\"]})\n            except keyError:\n                continue\n    return Available_SSLProfiles_list\n    \n\ndef server_finder_script_application_weblogic(username):\n    \n    Available_SSLProfiles_list=list()\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    for values in db.device.find({'status' : 'Managed', 'vendor' : 'Weblogic','roles' : { '$in' : roles }}):\n        for val in db.me_server.find({\"deviceName\":values[\"name\"]}):\n            try:\n                if ((values['category'] ==  'Server')and(values['vendor'] ==  'Weblogic') and (values['status'] ==  'Managed')):\n                    Available_SSLProfiles_list.append({\"Available_SSLProfiles\":values[\"name\"]+\":\"+val[\"serverName\"]})\n            except keyError:\n                continue\n    return Available_SSLProfiles_list\n    \n\ndef server_finder_script_application_iplanet(username):\n    \n    Available_SSLProfiles_list=list()\n    \n    db = db_connection().appviewx\n    \n    roles = get_roles(username)\n    \n    for values in db.device.find({'status' : 'Managed', 'vendor' : 'iPlanet','roles' : { '$in' : roles }}):\n        for val in db.me_server.find({\"deviceName\":values[\"name\"]}):\n            try:\n                if ((values['category'] ==  'Server')and(values['vendor'] ==  'iPlanet') and (values['status'] ==  'Managed')):\n                    Available_SSLProfiles_list.append({\"Available_SSLProfiles\":values[\"name\"]+\":\"+val[\"configurationName\"]+\":\"+val[\"name\"]})\n            except keyError:\n                continue\n    return Available_SSLProfiles_list    \n    \n\ndef common_name_finder(certgroup):\n    \n    db = db_connection().appviewx\n    \n    query = {\"group.name\":certgroup, \"avxStatus\" : \"Managed\", \"category\" : {\"$ne\":\"Client\"}}\n    \n    certificate_cursor = db.certificate.find(query)\n    \n    common_name_list=list()\n    for cert_value in certificate_cursor:\n        common_name_list.append({'common_name':cert_value[\"commonName\"]+\":\"+cert_value[\"uuid\"]})    \n    \n    return common_name_list\n    \n\ndef cert_key_filename_a10(Common_name,certificateType):\n        \n        Common_name = Common_name.split(':')\n        finalList=[]\n        if len(Common_name) == 2:\n            finalList.append({\"certificateFileName\":Common_name[0] + certificateType.split('*')[1][:-1]})\n            finalList.append({\"privateKeyFileName\":Common_name[0] + \".key\"})\n        \n        return finalList  \n    \n\ndef cert_key_filename(Common_name):\n        \n        Common_name = Common_name.split(':')\n        finalList=[]\n        if len(Common_name) == 2:\n            finalList.append({\"certificateFileName\":Common_name[0] + \".crt\"})\n            finalList.append({\"privateKeyFileName\":Common_name[0] + \".key\"})\n        \n        return finalList  \ndef cert_application_settings_name(applicationType,category):\n\tdb = db_connection().appviewx\n\tquery = {\"applicationType\":applicationType, \"certificateCategories\" : category}\n\tprojection = {\"name\":1}\n\tapp_setting_cursor = db.certApplicationSettings.find(query,projection)\n\tname_list=list()\n\tfor setting_value in app_setting_cursor:\n\t\tname_list.append({'applicationSettings':setting_value[\"name\"]})\n\treturn name_list\n\t\ndef cert_application_setting_fetch(name):\n\tdb = db_connection().appviewx\n\tquery = {\"name\":name}\n\tsettings_result = list()\n\tapp_setting_Object = db.certApplicationSettings.find_one(query)\n\tsettings_result = list()\n\tfor key,value in app_setting_Object[\"vendorSpecificSettings\"].items():\n\t    settings_result.append({str(key):str(value)})\n\treturn settings_result\n\n\n\n    \n\n    \n    \n    \n    \n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"cert_ssl_app_common","_keywords":["cert_ssl_app_common","","Version 2.x"]}