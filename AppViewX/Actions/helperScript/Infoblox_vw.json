{"name":"Infoblox_vw","scriptType":"Python","scriptContent":"'''\nCreated on 08-Jul-2016\n\n@author: Sujeesh.S\n@version : 1.0\n\n'''\n\nimport sys\nimport json\nimport subprocess\nimport os\nsys.path.insert(0,'/home/appviewx/appviewx//properties//../vw/dependencies')\nsys.path.insert(0,'/home/appviewx/appviewx//properties//../vw/helper')\n#sys.path.append('/home/appviewx/AppViewX/aps/dependencies')\n#sys.path.append('/home/appviewx/AppViewX/aps/helper')\nimport appviewx\nimport Decrypt_Python3 as Decrypt\n# reload(appviewx)\n# reload(Decrypt)\nimport logger_util\nlogger = logger_util.get_logger('Create_VIP')\n\n\nclass Infoblox:\n    '''\n    This class is having all functions related to an Infoblox device\n    '''\n\n    def __init__(self):\n        '''\n        Initialize Infoblox object\n        '''\n\n    @staticmethod\n    def get_device_ip(device_name):\n        '''\n        Return device ip and wapi version of the device.\n        '''\n        connection = appviewx.db_connection()\n        collection = connection.appviewx.device\n        device = collection.find_one({'name': device_name},\n                                     {'ip': 1, 'attributes': 1})\n        return device['ip'], device['attributes']['wapiVersion']\n    \n    @staticmethod\n    def get_reference(username, password, device_ip, wapi, subnet):\n        '''\n        Return _ref of Infoblox device\n        '''\n        curl_command = 'curl --silent -k1 -u {uname}:{pwd} -X GET '\\\n            'https://{ip}/wapi/v{wapi_version}/'\\\n            'network?_return_type=json-pretty\\&network='\\\n            '{subnet}'.format(\n                uname=username,\n                pwd=password,\n                ip=device_ip,\n                wapi_version=wapi,\n                subnet=subnet)\n        logger.info(curl_command)\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output)\n        ref = [value['_ref'] for value in json_output if value['network_view'] == 'default']\n        return ref[0]\n\n    @staticmethod\n    def get_free_ip(device_name, subnet):\n        '''\n        Return a free IP address from the Infoblox device\n        '''\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -k1 -u {uname}:{pwd} -X POST '\\\n                'https://{ip}/wapi/v{wapi_version}/{ref}?'\\\n                '_function=next_available_ip\\&_return_type='\\\n                'json-pretty\\&num=1'.format(\n                    uname=username,\n                    pwd=password,\n                    ip=device_ip,\n                    wapi_version=wapi_version,\n                    ref=Infoblox.get_reference(username, password, device_ip,\n                                               wapi_version, subnet))\n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output)\n        try:\n            return str(json_output['ips'][0])\n        except KeyError as e:\n            return \"Error::No Free IP Available\"\n\n    @staticmethod\n    def get_list_of_subnets(username, password, device_ip, wapi):\n        '''\n        Return list of ipv4 subnets configured on infoblox\n        '''\n        curl_command = 'curl --silent -k1 -u {uname}:{pwd} -X GET '\\\n                        'https://{ip}/wapi/v{wapi_version}/'\\\n                        'network?_return_type=json-pretty'.format(\n                        uname=username,\n                        pwd=password,\n                        ip=device_ip,\n                        wapi_version=wapi)\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output.decode())\n        logger.info(json_output)\n        return json_output\n\n    @staticmethod\n    def reserve_free_ip(device_name, fqdn, free_ip):\n        '''\n        Reserve a Free IP in Infoblox\n        '''\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X POST '\\\n                          'https://{dev_ip}/wapi/v{wapi_version}/record:host?_return_type=json-pretty'\\\n                          ' -d \\'{{\\\"name\\\":\\\"{fqdn_name}\\\",\\\"ipv4addrs\\\":[{{\\\"ipv4addr\\\":\\\"{ip}\\\"}}]'\\\n                          '}}\\''.format(uname=username,\n                                        pwd=password,\n                                        dev_ip=device_ip,\n                                        wapi_version=wapi_version,\n                                        fqdn_name=fqdn,\n                                        ip=free_ip)\n            logger.info(curlCommand)\n        except Exception as e:\n            return \"Error:: Invalid FQDN or data provided\"\n        status, output = subprocess.getstatusoutput(curlCommand)\n        logger.info(output)\n        if output[0] == \"{\" :\n            json_output = json.loads(output)\n            return json_output['text']\n        else :\n            return 'reserved'\n\n    @staticmethod\n    def get_ip_reference(uname, pwd, dIP, wapi_ver, ip):\n        '''\n        Get IP reference\n\n        :param str uname: Username\n        :param str pwd: Password\n        :param str wapi_ver: Device wapi version\n        :param ip: ip address\n        '''\n        curlCommand = 'curl --silent -k1 -u  {uname}:{pwd} -X GET https://{device_ip}/wapi/v{wapi_version}/ipv4address?'\\\n                      'ip_address={ip}'.format(uname=uname,\n                                               pwd=pwd,\n                                               device_ip=dIP,\n                                               wapi_version=wapi_ver,\n                                               ip=ip)\n        logger.info(curlCommand)\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output)\n        ref = [value['_ref'] for value in json_output if value['network_view'] == 'default']\n        return ref[0]\n        # return curlCommand\n\n    @staticmethod\n    def unreserve_freeip(device_name, free_ip, action=\"\"):\n        '''\n        Delete all records for that ip and will free the ip\n\n        param str device_name: IPAM Device Name\n        param ip: ip address\n        param str action: String\n        '''\n        encode_text = Decrypt.getencoded(device_name)\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        ref = Infoblox.get_ip_reference(username, password, device_ip, wapi_version, free_ip)\n\n        curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X DELETE '\\\n                      'https://{dev_ip}/wapi/v{wapi_ver}/{reference}'.format(uname=username,\n                                                                             pwd=password,\n                                                                             dev_ip=device_ip,\n                                                                             wapi_ver=wapi_version,\n                                                                             reference=ref)\n\n        curl_command = 'curl --silent -k1 -H \\\"Authorization:Basic {encode_text}\\\" -H \\\"Content-Type:application/json\\\" -X DELETE '\\\n            'https://{dev_ip}/wapi/v{wapi_ver}/{reference}'.format(uname=username,\n                                                                   pwd=password,\n                                                                   dev_ip=device_ip,\n                                                                   wapi_ver=wapi_version,\n                                                                   encode_text=encode_text,\n                                                                   reference=ref)\n\n        if action == 'associate':\n            status, output = subprocess.getstatusoutput(curlCommand)\n            json_output = json.loads(output)\n            return json_output\n        else:\n            return curl_command\n\n    @staticmethod\n    def get_subnet(device_name):\n        '''\n        Get available subnets from infoblox\n\n        :param str device_name: IPAM Device Name\n        '''\n        subnet_list = []\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      'https://{dev_ip}/wapi/v{wapi_ver}/network'.format(uname=username,\n                                                                         pwd=password,\n                                                                         dev_ip=device_ip,\n                                                                         wapi_ver=wapi_version)\n\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output)\n        subnet_list = [value['network'] for value in json_output if value['network_view'] == 'default']\n        return subnet_list\n    \n    @staticmethod\n    def get_network_view(device_name):\n        '''\n        Get available network views from infoblox\n        \n        :param str device_name: IPAM Device Name\n        '''\n        network_view_list = []\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      'https://{dev_ip}/wapi/v{wapi_ver}/networkview?_return_type=json-pretty'.format(uname = username,\n                                                                         pwd = password,\n                                                                         dev_ip = device_ip,\n                                                                         wapi_ver = wapi_version)\n\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output.decode())\n        network_view_list = [ value['name'] for value in json_output]\n        return network_view_list\n        \n    @staticmethod\n    def get_dns_view(device_name,newtork_view):\n        '''\n        Get available dns views from infoblox\n        \n        :param str device_name: IPAM Device Name\n        '''\n        dns_view_list = []\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        if ' ' in newtork_view :\n            newtork_view = newtork_view.replace(' ', '%20')\n        \n            \n        curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      'https://{dev_ip}/wapi/v{wapi_ver}/view?network_view={net_view}&_return_type=json-pretty'.format(uname = username,\n                                                                         pwd = password,\n                                                                         dev_ip = device_ip,\n                                                                         wapi_ver = wapi_version,net_view=newtork_view)\n\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output.decode())\n        dns_view_list = [ value['name'] for value in json_output]\n        return dns_view_list\n    \n    \n    \n    @staticmethod\n    def create_reverse_zone(device_name,subnet,view='default'):\n        '''\n        Reserve a Free IP in Infoblox\n        '''\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try :\n            curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X POST ' \\\n                  'https://{dev_ip}/wapi/v{wapi_version}/zone_auth?_return_type=json-pretty' \\\n                  ' -d \\'{{\\\"fqdn\\\":\\\"{fqdn_name}\\\",\\\"view\\\":\\\"{view}\\\",\\\"zone_format\\\":\\\"IPV4\\\"' \\\n                  '}}\\''.format(uname = username,\n                                        pwd = password,\n                                        dev_ip = device_ip,\n                                        wapi_version = wapi_version,\n                                        fqdn_name = subnet,view=view)\n        except Exception as e:\n            return \"Error:: Invalid FQDN or data provided\"\n        status, output = subprocess.getstatusoutput(curlCommand)\n        try:\n            json_output = json.loads(output.decode())\n            return json_output\n        except Exception as e:\n            return \"Error:: Failed to create reverse zone\"\n            \n\n    @staticmethod\n    def create_ptr_record(device_name,fqdn,free_ip,view='default'):\n        '''\n        Reserve a Free IP in Infoblox\n        '''\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X POST ' \\\n                  'https://{dev_ip}/wapi/v{wapi_version}/record:ptr?_return_type=json-pretty' \\\n                  ' -d \\'{{\\\"ptrdname\\\":\\\"{fqdn_name}\\\",\\\"view\\\":\\\"{view}\\\",\\\"ipv4addr\\\":\\\"{ip}\\\"' \\\n                  '}}\\''.format(uname = username,\n                                        pwd = password,\n                                        dev_ip = device_ip,\n                                        wapi_version = wapi_version,\n                                        fqdn_name = fqdn,\n                                        ip = free_ip,view=view)\n        except Exception as e:\n            return \"Error:: Invalid FQDN or data provided\"\n        status, output = subprocess.getstatusoutput(curlCommand)\n        try:\n            json_output = json.loads(output.decode())\n            return json_output\n        except Exception as e:\n            return \"Error:: Failed to create ptr record  IP\"\n            \n            \n            \n    @staticmethod\n    def get_next_available_ip(device_name, subnet):\n        '''\n        Return a free IP address from the Infoblox device\n        '''\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -k1 -u {uname}:{pwd} -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/ipv4address?' \\\n               'network={subnet}&status=UNUSED\\''.format( uname = username,pwd = password,ip = device_ip,wapi_version = wapi_version,subnet = subnet)\n\n           \n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        output = os.popen(curl_command)\n        json_output = json.loads(output.read())\n\n        freeip = [json_data[\"ip_address\"]  for  json_data in json_output if json_data[\"status\"] == 'UNUSED' and json_data[\"types\"] == [] ]\n\n        \n        try:\n            return str(freeip[0])\n        except KeyError as e:\n            return \"Error::No Free IP Available\"\n            \n\n\n    @staticmethod\n    def get_free_ip_by_exclusion(device_name, subnet, excluded_ip_list):\n        '''\n        Return a free IP address from the Infoblox device\n        '''\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        \n        # sub_string  = \"{\"exclude\": [\"172.21.10.1\", \"172.21.10.2\", \"172.21.10.3\", \"172.21.10.4\", \"172.21.10.5\", \"172.21.10.6\", \"172.21.10.7\", \"172.21.10.8\", \"172.21.10.9\", \"172.21.10.10\", \"172.21.10.11\", \"172.21.10.12\", \"172.21.10.13\", \"172.21.10.14\", \"172.21.10.15\", \"172.21.10.16\", \"172.21.10.17\", \"172.21.10.18\", \"172.21.10.19\", \"172.21.10.20\", \"172.21.10.250\", \"172.21.10.251\", \"172.21.10.252\", \"172.21.10.253\", \"172.21.10.254\"], \"num\": 1}\"\n        try:\n            sub_string = 'https://{ip}/wapi/v{wapi_version}/{ref}?'\\\n                            '_function=next_available_ip\\&_return_type='\\\n                            'json-pretty'.format(\n                            ip=device_ip,\n                            wapi_version=wapi_version,\n                            ref=Infoblox.get_reference(username, password, device_ip, \\\n                                                      wapi_version, subnet))\n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        a = json.dumps(excluded_ip_list)\n        string = '{\"exclude\": '+a+', \"num\": 1}'\n        curl_command = 'curl -H \"'\"Content-Type: application/json\"'\" --silent -k1 -u '+username+':'+password+' -X POST '\n        curl_command += '-d '+\"'\"+string+\"' \"\n        curl_command += sub_string\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output.decode())\n        try:\n            return str(json_output['ips'][0])\n        except KeyError as e:\n            return \"Error::No Free IP Available\"\n\n    @staticmethod\n    def reserve_free_ip_a(device_name, fqdn, free_ip):\n        '''\n        Reserve a Free IP in Infoblox\n        '''\n        username, password = Decrypt.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curlCommand = 'curl --silent -k1 -u {uname}:{pwd} -H \\\"Content-Type:application/json\\\" -X POST '\\\n                          'https://{dev_ip}/wapi/v{wapi_version}/record:a?_return_type=json-pretty'\\\n                          ' -d \\'{{\\\"name\\\":\\\"{fqdn_name}\\\",\\\"ipv4addr\\\":\\\"{ip}\\\"}}\\''.format(uname=username,\n                                        pwd=password,\n                                        dev_ip=device_ip,\n                                        wapi_version=wapi_version,\n                                        fqdn_name=fqdn,\n                                        ip=free_ip)\n            logger.info(curlCommand)\n        except Exception as e:\n            return \"Error:: Invalid FQDN or data provided\"\n        status, output = subprocess.getstatusoutput(curlCommand)\n        logger.info(output)\n        if output[0] == \"{\" :\n            json_output = json.loads(output.decode())\n            return json_output['text']\n        else :\n            return 'reserved'\n      \n        \n\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"Infoblox_vw","_keywords":["Infoblox_vw","","Version 2.x"]}