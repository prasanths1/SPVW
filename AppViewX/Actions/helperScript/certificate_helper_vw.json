{"name":"certificate_helper_vw","scriptType":"Python","scriptContent":"import sys\r\n\r\nsys.path.insert(0, AVX::DEPENDENCIES)\r\nsys.path.insert(0, AVX::HELPER)\r\n\r\nimport appviewx\r\nimport Decrypt_Python3 as Decrypt\r\nimport paramiko\r\nfrom dblayer.appviewx.device import Device\r\nfrom dblayer.certificates import Certificate\r\nfrom pslib.utils import logger_util\r\nlogger = logger_util.get_logger(\"Helper -- Certificate Helper\") \r\n\r\nconnection = appviewx.db_connection()\r\ndb = connection.appviewx\r\n\r\ndef get_device_ip(device_name):\r\n    \"\"\"\r\n    This function return ip of passed f5 device.\r\n    Args:\r\n        device_name (str): Name of the f5 device.\r\n    Returns:\r\n        str: return ip address of f5 in str.\r\n    \"\"\"   \r\n    return Device.objects.get(vendor_name = 'F5', category = 'ADC', subsystem = 'LoadBalancer', name = device_name).ip\r\n    \r\ndef connect_remote(IP, username, password,port_ssh):\r\n    \"\"\"\r\n    This function establish ssh connection to f5 device.\r\n    Args:\r\n        IP (str): IP of the f5 device.\r\n        username (str): User of the f5 device.\r\n        password (str): Password of the f5 device.\r\n    Returns:\r\n        object: return ssh object.\r\n    \"\"\"\r\n    try:\r\n        remote_conn=paramiko.SSHClient()\r\n        remote_conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())\r\n        remote_conn.connect(IP,username=username,password=password,look_for_keys=False,allow_agent=False,port=port_ssh)\r\n        return remote_conn\r\n    except Exception as e:\r\n        print (str(e))\r\n\r\ndef check_bash_mode(connection) :\r\n    stdin, stdout, err=connection.exec_command('echo \"testing\"')\r\n    err = err.read().decode()\r\n    if \"Error\" not in err:\r\n        return True\r\n    else:\r\n        return False\r\n\r\ndef get_cert_common_name(device_name, cert_name):\r\n    # Get ip of f5 device\r\n    f5_ip = get_device_ip(device_name)    \r\n    common_name_crt=\"\"\r\n    # Get username and password of IP\r\n    username, password = Decrypt.getpassword(device_name)    \r\n    # Connect to f5 device to collect all cert file name\r\n    port_ssh = 22#collection.find_one({'name': device_name})['deviceCommunicationPort']['sshPort']\r\n    ssh = connect_remote(f5_ip, username, password,port_ssh)\r\n    bash_mode = check_bash_mode(ssh) \r\n    dev_version = Device.objects.get(vendor_name = 'F5', category = 'ADC', subsystem = 'LoadBalancer', name = device_name).version\r\n    # List all cert in f5 device\r\n    \r\n    if dev_version in [\"v11\", \"v12\",\"v13\"]:\r\n        if bash_mode:\r\n            countcmd = \"tmsh list sys crypto cert \"+cert_name.strip()+\" |grep common-name\"# | awk '{print $2}'\"\r\n        else:\r\n            if dev_version in [\"v11\", \"v12\"]:\r\n                countcmd = \"list sys crypto cert {} |grep common-name\".format(cert_name.strip())\r\n            else:\r\n                countcmd = '''run util bash -c \"tmsh list sys crypto cert {} |grep common-name\"'''.format(cert_name.strip())\r\n\r\n        stdin, stdout, stderr = ssh.exec_command(countcmd)    \r\n        common_name_crt = stdout.read().decode()     \r\n        \r\n        common_name_crt = common_name_crt.split()[-1]        \r\n        ssh.close()\r\n    else:\r\n        if bash_mode:\r\n            countcmd = \"tmsh run util bash -c 'openssl x509 -in /config/ssl/ssl.crt/{0} -noout -text'\".format(cert_name)\r\n        else:\r\n            countcmd = \"run util bash -c 'openssl x509 -in /config/ssl/ssl.crt/{0} -noout -text'\".format(cert_name)\r\n        stdin, stdout, stderr = ssh.exec_command(countcmd)    \r\n        return_stdout = stdout.read().decode()            \r\n        ssh.close()\r\n        splited_lines = return_stdout.splitlines()\r\n        for line in splited_lines:\r\n            line = line.strip()\r\n            if \"Subject:\" in line:                \r\n                common_name_crt = line.split(\"CN=\")[-1]  \r\n    \r\n    return common_name_crt\r\n\r\ndef get_list_of_cert_name(device_name):\r\n    \"\"\"\r\n    This function get all the cert name from specific f5 device.\r\n    Args:\r\n        device_name (str): Name of the f5 device.\r\n    Returns:\r\n        list: return list with cert name.\r\n    \"\"\"\r\n    # Get ip of f5 device\r\n    IP = get_device_ip(device_name)\r\n    \r\n    # Get username and password of IP\r\n    username, password = Decrypt.getpassword(device_name)\r\n    \r\n    # Connect to f5 device to collect all cert file name\r\n    port_ssh = 22#collection.find_one({'name': device_name})['deviceCommunicationPort']['sshPort']\r\n    # Connect to f5 device to collect all cert file name\r\n    ssh = connect_remote(IP, username, password,port_ssh)\r\n    bash_mode = check_bash_mode(ssh)\r\n    \r\n    dev_version = Device.objects.get(vendor_name = 'F5', category = 'ADC', subsystem = 'LoadBalancer', name = device_name).version\r\n    \r\n    # List all cert in f5 device\r\n    if dev_version in [\"v11\", \"v12\",\"v13\"]:\r\n        if bash_mode:\r\n            countcmd = \"tmsh list sys crypto cert |grep 'common-name\\|sys crypto cert'\"            \r\n        else:\r\n            if dev_version in [\"v11\", \"v12\"]:\r\n                countcmd = \"list sys crypto cert |grep 'common-name\\|sys crypto cert'\"\r\n            else:\r\n                countcmd = '''run util bash -c \"tmsh list sys crypto cert |grep 'common-name\\|sys crypto cert'\"'''\r\n    else:\r\n        if bash_mode:\r\n            countcmd = \"tmsh run util bash -c 'ls /config/ssl/ssl.crt'\"\r\n        else:\r\n            countcmd = \"run util bash -c 'ls /config/ssl/ssl.crt'\"\r\n    \r\n    stdin, stdout, stderr = ssh.exec_command(countcmd)   \r\n    return_stdout = stdout.read().decode()\r\n    ssh.close()\r\n    cert_list = []\r\n    # Put each cert name in a list\r\n    splited_lines = return_stdout.split(\"\\n\")\r\n    if dev_version in [\"v11\",\"v12\",\"v13\"]:\r\n        for line in splited_lines:            \r\n            if line.startswith(\"sys crypto cert \"):\r\n                # 17 is len of string \"sys crypto cert \"\r\n                cert_name = line[16:].replace(\" {\", \"\")\r\n                \r\n            elif \"common-name\" in line:\r\n                common_name_crt = line.strip().split()[-1]\r\n                temp_dict={}\r\n                temp_dict[\"cert_name\"]=cert_name\r\n                temp_dict[\"cert_common_name\"]=common_name_crt\r\n                temp_dict[\"device_ip\"]=IP\r\n                temp_dict[\"device_name\"]=device_name\r\n                cert_list.append(temp_dict)\r\n    if dev_version in [\"v10\"]:\r\n        for line in splited_lines:            \r\n            if line.endswith(\".crt\"):\r\n                cert_name_cmd = line.strip()\r\n                cert_common_name = get_cert_common_name(device_name, cert_name_cmd)\r\n                temp_dict={}\r\n                temp_dict[\"cert_name\"]=cert_name_cmd\r\n                temp_dict[\"cert_common_name\"]=cert_common_name\r\n                temp_dict[\"device_ip\"]=IP\r\n                temp_dict[\"device_name\"]=device_name\r\n                cert_list.append(temp_dict)\r\n    \r\n    return cert_list\r\n    \r\ndef get_list_of_key_name(device_name):\r\n    \"\"\"\r\n    This function get all the key name from specific f5 device.\r\n    Args:\r\n        device_name (str): Name of the f5 device.\r\n    Returns:\r\n        list: return list with key name.\r\n    \"\"\"\r\n    # Get ip of f5 device\r\n    IP = get_device_ip(device_name)\r\n    \r\n    # Get username and password of IP\r\n    username, password = Decrypt.getpassword(device_name)    \r\n    # Connect to f5 device to collect all cert file name\r\n    port_ssh = 22#collection.find_one({'name': device_name})['deviceCommunicationPort']['sshPort']\r\n    # Connect to f5 device to collect all key name\r\n    ssh = connect_remote(IP, username, password,port_ssh)\r\n    bash_mode = check_bash_mode(ssh)    \r\n    dev_version = Device.objects.get(vendor_name = 'F5', category = 'ADC', subsystem = 'LoadBalancer', name = device_name).version\r\n    \r\n    # List all cert in f5 device\r\n    if dev_version in [\"v11\", \"v12\", \"v13\"]:\r\n        if bash_mode:\r\n            countcmd = \"tmsh -c 'list sys crypto key'\"\r\n        else:\r\n            countcmd = \"list sys crypto key\"\r\n    else:\r\n        if bash_mode:\r\n            countcmd = \"tmsh run util bash -c 'ls /config/ssl/ssl.key'\"\r\n        else:\r\n            countcmd = \"run util bash -c 'ls /config/ssl/ssl.key'\"\r\n            \r\n    stdin, stdout, stderr = ssh.exec_command(countcmd)    \r\n    \r\n    return_stdout = stdout.read().decode()\r\n    ssh.close()\r\n    \r\n    key_list = []\r\n    # Put each cert name in a list\r\n    splited_lines = return_stdout.splitlines()\r\n    for line in splited_lines:\r\n        if line.startswith(\"sys crypto key \"):\r\n            # 17 is len of string \"sys crypto key \"\r\n            key_name_cmd = line[15:].replace(\" {\", \"\")\r\n            key_list.append(key_name_cmd)\r\n        if dev_version in [\"v10\"] and line.endswith(\".key\"):\r\n            key_list.append(line.strip())\r\n    \r\n    return key_list\r\n\r\ndef get_ssl_client_profile(device_name):\r\n    \"\"\"\r\n    This function get all the client ssl profile from specific f5 device.\r\n    Args:\r\n        device_name (str): Name of the f5 device.\r\n    Returns:\r\n        list: return list with client ssl profile.\r\n    \"\"\"\r\n    # Get ip of f5 device\r\n    IP = get_device_ip(device_name)\r\n    \r\n    # Get username and password of IP\r\n    username, password = Decrypt.getpassword(device_name)    \r\n    # Connect to f5 device to collect all cert file name\r\n    port_ssh = 22#collection.find_one({'name': device_name})['deviceCommunicationPort']['sshPort']\r\n\r\n    # Connect to f5 device to collect all cert file name\r\n    ssh = connect_remote(IP, username, password,port_ssh)\r\n    bash_mode = check_bash_mode(ssh)\r\n    # Command to get client-ssl from device\r\n    if bash_mode:\r\n        countcmd = \"tmsh -c 'list ltm profile client-ssl'\"\r\n    else:\r\n        countcmd = \"list ltm profile client-ssl\"    \r\n    stdin, stdout, stderr = ssh.exec_command(countcmd)    \r\n    \r\n    return_stdout = stdout.read().decode()\r\n    ssh.close()\r\n    # Get the client ssl from f5 device\r\n    client_ssl = []\r\n    \r\n    splited_lines = return_stdout.splitlines()\r\n    for line in splited_lines:\r\n        if line.startswith(\"ltm profile client-ssl \"):\r\n            client_name_ssl = line[23:].replace(\" {\", \"\")\r\n            client_ssl.append(client_name_ssl.strip())\r\n    \r\n    return client_ssl\r\n\r\ndef get_ssl_server_profile(device_name):\r\n    \"\"\"\r\n    This function get all the server ssl profile from specific f5 device.\r\n    Args:\r\n        device_name (str): Name of the f5 device.\r\n    Returns:\r\n        list: return list with server ssl profile.\r\n    \"\"\"\r\n    # Get ip of f5 device\r\n    IP = get_device_ip(device_name)\r\n    \r\n    # Get username and password of IP\r\n    username, password = Decrypt.getpassword(device_name)\r\n    \r\n    # Connect to f5 device to collect all cert file name\r\n    port_ssh = 22#collection.find_one({'name': device_name})['deviceCommunicationPort']['sshPort']\r\n\r\n    # Connect to f5 device to collect all cert file name\r\n    ssh = connect_remote(IP, username, password,port_ssh)\r\n    bash_mode = check_bash_mode(ssh)\r\n    # Command to get server-ssl from device\r\n    if bash_mode:\r\n        countcmd = \"tmsh -c 'list ltm profile server-ssl'\"\r\n    else:\r\n        countcmd = \"list ltm profile server-ssl\"\r\n    stdin, stdout, stderr = ssh.exec_command(countcmd)    \r\n    return_stdout = stdout.read().decode()\r\n    ssh.close()\r\n    # Get the server ssl from f5 device\r\n    server_ssl = []\r\n    splited_lines = return_stdout.splitlines()\r\n    for line in splited_lines:\r\n        if line.startswith(\"ltm profile server-ssl \"):\r\n            server_name_ssl = line[23:].replace(\" {\", \"\")\r\n            server_ssl.append(server_name_ssl.strip())\r\n    \r\n    return server_ssl\r\n\r\ndef get_profile_of_exp_cert(expired_cert_list):\r\n    \"\"\"\r\n    This function return associated profile inforamtion of expired cert.\r\n    Args:\r\n        expired_cert_list (list): list with expired cert name.\r\n    Returns:\r\n        dict: return dictionary with expired cert and associated profile.\r\n    \"\"\"      \r\n    dict_exp_cert_prof = {}\r\n    # For each expired cert fetch profile detail from DB\r\n    for cert in expired_cert_list:\r\n        common_name_crt = cert.split(\"||\")[2]        \r\n        str_cert =  cert.split(\"||\")[1] \r\n        \r\n        # Get ip of f5 device  \r\n        f5_ip = get_device_ip(cert.split(\"||\")[0])         \r\n        device_name = cert.split(\"||\")[0]\r\n        certificate_collection = db.certificate\r\n        str_profile = []\r\n        for value in certificate_collection.find({\"commonName\":common_name_crt, \"status\":\"Expired\"}):\r\n            certAssociations = value[\"certAssociations\"]\r\n            for cert_value in certAssociations:\r\n                if cert_value[\"vendor\"] == \"F5\" and cert_value[\"category\"] == \"ADC\":\r\n                    device_ip = get_device_ip(cert_value[\"source\"])\r\n                    if device_ip in f5_ip:\r\n                        associatedObjects = cert_value[\"associatedObjects\"]\r\n                        logger.info('associatedObjects')\r\n                        logger.info(associatedObjects)\r\n                        discovered_file_names = [file_name.split('::')[-1] for file_name in cert_value[\"discoveredFileNames\"]]\r\n                        if str_cert in discovered_file_names and associatedObjects:\r\n                            str_profile = [app.split(\"::\")[-1].split(':')[0] for app in associatedObjects]\r\n                            logger.info(str_profile)\r\n        if device_name in dict_exp_cert_prof.keys():\r\n            dict_exp_cert_prof[device_name].append({\"profiles\":list(set(str_profile)), \"common_name\":common_name_crt,\"cert_name\":str_cert})\r\n        else:\r\n            dict_exp_cert_prof[device_name] = [{\"profiles\":list(set(str_profile)), \"common_name\":common_name_crt, \"cert_name\":str_cert}]\r\n    logger.info(dict_exp_cert_prof)\r\n    return dict_exp_cert_prof\r\n","description":"Certificate helper scripts helps in getting cert and key related information from particular device and DB","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"certificate_helper_vw","_keywords":["certificate_helper_vw","Certificate helper scripts helps in getting cert and key related information from particular device and DB","Version 2.x"]}