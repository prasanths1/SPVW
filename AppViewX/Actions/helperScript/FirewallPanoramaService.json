{"name":"FirewallPanoramaService","scriptType":"Python","scriptContent":"import sys\nimport traceback\nimport logger_util\n\nsys.path.insert(0,AVX::HELPER)\nsys.path.insert(0,AVX::DEPENDENCIES)\n\nlogger = logger_util.get_logger('Firewall Panorama Service')\n\n\n'''\nThis task is to create the Service Object in the Panorama Device\n#FIXME: Prevalidation and Postvalidation to be done\n#FIXME: if no input received fro the boolean flags, then the device property is set to 'no'\n'''\n\nclass FirewallPanoramaService(object):\n    \n    @classmethod\n    def clean_input_data(self,input_dict):\n        logger.info(\"Input Received Before clean : \"+str(input_dict))\n\n        input_dict[\"name\"] = self.handle_strip(input_dict[\"name\"])\n        input_dict['device_group'] = self.handle_strip(input_dict[\"device_group\"])\n        input_dict['description'] = self.handle_strip(input_dict[\"description\"])\n        input_dict['protocol'] = self.handle_strip(input_dict[\"protocol\"])\n        input_dict['device_name'] = self.handle_strip(input_dict[\"device_name\"])\n\n        input_dict['operation_type'] = self.handle_strip(input_dict['operation_type'])\n        \n\n        logger.info(\"Input Received After clean : \"+str(input_dict))\n\n    @classmethod\n    def validate_input_data(self,input_dict):\n        logger.info(\"Validating the Input Data\")\n        status = True\n\n        status = status and self.mandatory_string_validation(input_dict['name'],\"name\",True)\n        status = status and self.mandatory_string_validation(input_dict['device_group'],\"device_group\",True)\n        status = status and self.mandatory_string_validation(input_dict['device_name'],\"device_name\",True)\n        status = status and self.mandatory_string_validation(input_dict['protocol'],\"protocol\",True)\n\n        if not status:\n            logger.info(\"INPUT VALIDATION FAILED\")\n        else:\n            logger.info(\"INPUT VALIDATION SUCCESS\")\n\n        return status\n\n    @classmethod\n    def validation_fail_output(self):\n        output = {}\n        output[\"status\"] = \"failed\"\n        output[\"message\"] = \"Validation Failed\"\n        logger.info(\"output : \"+str(output))\n        return output\n\n    def __init__(self,input_dict):\n        logger.info(\"Creating Object with input :\"+str(input_dict))\n        self.name = input_dict[\"name\"]\n        self.device_group = input_dict['device_group']\n        self.description = input_dict['description']\n        self.is_disable_override = input_dict['is_disable_override']\n        self.protocol = input_dict['protocol']\n        self.destination_port = input_dict['destination_port']\n        self.source_port = input_dict['source_port']\n        self.is_override = input_dict['is_override']\n        self.halfclose_timeout = input_dict['halfclose_timeout']\n        self.timeout = input_dict['timeout']\n        self.timewait_timeout = input_dict['timewait_timeout']\n\n        self.device_name = input_dict['device_name']\n        self.is_rollback = input_dict['is_rollback']\n        self.rollback_input = input_dict['rollback_input']\n        self.is_deferred = input_dict['is_deferred']\n\n        self.operation_type = input_dict['operation_type']\n\n\n\n    def get_input_dict(self):\n        output = {}\n        output[\"name\"] = self.name\n        output['device_group'] = self.device_group\n        output['description'] = self.description\n        output['is_disable_override'] = self.is_disable_override\n        output['protocol'] = self.protocol\n        output['destination_port'] = self.destination_port\n        output['source_port'] = self.source_port\n        output['is_override'] = self.is_override\n        output['halfclose_timeout'] = self.halfclose_timeout\n        output['timeout'] = self.timeout\n        output['timewait_timeout'] = self.timewait_timeout\n\n        output['device_name'] = self.device_name\n        output['is_rollback'] = self.is_rollback\n        output['rollback_input'] = self.rollback_input\n        output['is_deferred'] = self.is_deferred\n\n        output['operation_type'] = self.operation_type\n\n        return output\n\n    def create(self):\n        logger.info(\"Creation Started\")\n\n        try:\n            if self.is_deferred:\n                return self.create_deferred()\n            else:\n                return self.create_immediate()\n        except Exception as exception:\n            output = {}\n            error_trace = traceback.format_exc()\n            logger.info(\"error_trace :\"+str(error_trace))\n            output[\"status\"] = \"failed\"\n            output[\"error\"] = str(exception)\n            output[\"error_trace\"] = str(error_trace)\n            return output\n\n    def create_immediate(self):\n        logger.info(\"Create immediate not supported\")\n        return ({\"status\":\"failed\",\"message\":\"not supported\"})\n\n    def create_deferred(self):\n        output_commands = []\n        command = \"set device-group \"+self.device_group+\" \"\n\n        if self.name:\n            command += \"service \"+self.name+\" \"\n        if self.description:\n            command += \"description '\"+self.description+\"' \"\n\n        command += \"disable-override \"+(\"yes\" if self.is_disable_override else \"no\")+\" \"\n\n        if self.protocol:\n            command += \"protocol \"+self.protocol+\" \"\n        \n        if self.destination_port:\n            command += \"port \"+self.destination_port+\" \"\n\n        if self.source_port:\n            command += \"source-port \"+self.source_port+\" \"\n        \n        # command += \"override \"+(\"yes\" if self.is_override else \"no\")+\" \"\n\n        if self.halfclose_timeout !=None:\n            command += \"halfclose-timeout \"+self.halfclose_timeout+\" \"\n\n        if self.timeout != None:\n            command += \"timeout \"+self.timeout+\" \"\n\n        if self.timewait_timeout != None:\n            command += \"timewait-timeout \"+self.timewait_timeout+\" \"\n\n        output_commands.append(command)\n        output = {}\n        output[\"status\"] = \"success\"\n        output[\"commands\"] = output_commands\n        output[\"rollback\"] = self.get_input_dict()\n        return output\n\n    def delete(self):\n        logger.info(\"Deletion Started\")\n        try:\n            if self.is_deferred:\n                return self.delete_deferred()\n            else:\n                return self.delete_immediate()\n        except Exception as exception:\n            output = {}\n            error_trace = traceback.format_exc()\n            logger.info(\"error_trace :\"+str(error_trace))\n            output[\"status\"] = \"failed\"\n            output[\"error\"] = str(exception)\n            output[\"error_trace\"] = str(error_trace)\n            return output\n\n    def delete_immediate(self):\n        logger.info(\"Delete Immediate not supported\")\n        return {\"status\":\"failed\",\"message\":\"not supported\"}\n    \n    # FIXME: Delete rollback to be handled by fetching all the complete object details from the device\n    def delete_deferred(self):\n        output_commands = []\n        command = \"delete device-group \"+self.device_group+\" \"\n\n        if self.name:\n            command += \"service \"+self.name+\" \"\n        output_commands.append(command)\n        output = {}\n        output[\"status\"] = \"success\"\n        output[\"commands\"] = output_commands\n        return output\n\n# FIXME: Prevalidation functionality to be added\n    @classmethod\n    def carry_out_pre_validation_activity_for_tabular_input(self, input_dict):\n        activity_output = []\n        output_dict = {}\n        output_dict['device_name'] =  input_dict['device_name']\n        output_dict['operation_type'] =  input_dict['operation_type']\n        output_dict['data'] = []\n        output_dict['commands'] = [\"show device-group \" +input_dict['device_group']+\" service \"+input_dict['name']]\n        activity_output.append(output_dict)\n       \n        return activity_output\n\n# FIXME: PostValidation functionality to be added\n    \n    def carry_out_post_validation_activity_for_tabular_input(self):\n        activity_output = []\n        output_dict = {}\n        output_dict['device_name'] = self.device_name\n        output_dict['operation_type'] = self.operation_type\n        output_dict['data'] = []\n        output_dict['commands'] = [\"show device-group \" +self.device_group+\" service \"+self.name]\n        activity_output.append(output_dict)\n        return activity_output\n\n    # FIXME: Partial Rollback functionality to be added\n    \n    def generate_partial_rollback_commands(self, rollback_input):\n        activity_output = []\n        for rollback_dict in rollback_input:\n            \n            output_dict = {}\n            output_dict['device_name'] = rollback_dict['device_name']\n            output_dict['operation_type'] = rollback_dict['operation_type']\n            output_dict['data'] = []\n            if rollback_dict['operation_type'] == \"create\":\n                output_dict['commands'] = self.delete_deferred()['commands']\n            elif rollback_dict['operation_type'] == \"delete\":\n                output_dict['commands'] = self.create_deferred()['commands']\n            else:\n                output_dict['commands'] = []\n            activity_output.append(output_dict)\n        return activity_output\n\n\n\n\n\n    @classmethod\n    def handle_strip(self,input):\n        if type(input).__name__ == 'str':\n            return input.strip() if (input!=None and input!='') else input\n        return input\n\n    @classmethod\n    def mandatory_string_validation(self,input,key,is_error_update):\n        output = input != None and input != ''\n        if not output and is_error_update:\n            logger.info(key + \" Validation Failed with \"+str(input))    \n        return output","description":"FirewallPanoramaService","readOnly":false,"version":"Version 3.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"FirewallPanoramaService","_keywords":["FirewallPanoramaService","Version 3.x"]}