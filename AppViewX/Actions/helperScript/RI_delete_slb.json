{"name":"RI_delete_slb","scriptType":"Python","scriptContent":"import re\nimport sys\nimport json\nimport datetime\n\nsys.path.insert(0, AVX::DEPENDENCIES)\nsys.path.insert(0, AVX::HELPER)\nimport logger_util\nlogger = logger_util.get_logger(\"Auto VIP Decomm\")\nimport appviewx\nimport Decrypt_Python3 as Decrypt\nimport paramiko\n\n\ndef get_device_info(db, device_name):\n    \"\"\"Return device id and version\n    \"\"\"\n    return db.device.find_one(\n        {'vendor': 'Citrix', 'category': 'ADC', 'subsystem': 'LoadBalancer', 'deviceType': 'SLB', 'name': device_name})\n\n\ndef vip_status_enabled(vip_record):\n    \"\"\"Return vip is enabled or not\n    \"\"\"\n    return vip_record['status'].lower() == 'out of service'\n\n\ndef get_vip_record(db, device_id, vip_name):\n    \"\"\"Return the record of vip\n    \"\"\"\n    return db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixvs', 'name': vip_name})\n\n\ndef add_sync_command(device_version, device_sync_group):\n    \"\"\"Add device sync command\n    \"\"\"\n    sync_command = []\n    if device_sync_group:\n        if device_version == \"v10\":\n            sync_command = [\"run sys config-sync\"]\n        else:\n            sync_command = [\n                \"tmsh run cm config-sync to-group `tmsh list cm device-group one-line | grep 'sync-failover' | awk '{print $3}'`\"]\n    return sync_command\n\n\ndef get_monitor_type(db, device_id, monitor_name):\n    \"\"\"Return type of monitor\n    \"\"\"\n    db_config = db.me_adc.find_one({\"code\": \"citrixmonitor\", \"name\": monitor_name, \"deviceId\": device_id},\n                                   {\"configData\": 1, \"partition\": 1})\n    type = db_config['configData'].split()[4]\n    return type, db_config['partition']\n\n\ndef create_service_group(db, device_id, device_version, servicegroup_name):\n    \"\"\"Construct create slb service group command from the configuration\n    \"\"\"\n    service_group_commands = []\n    fields_to_fetch = {'monitorMap': 1, 'partition': 1, \"state\": 1, \"serviceGroupMemberMap\": 1, \"protocol\": 1}\n    service_group = db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixsg', 'name': servicegroup_name},\n                                       fields_to_fetch)\n    add_sg_cmd = 'add serviceGroup {name} {type}'.format(\n        name=servicegroup_name,\n        type=service_group[\"protocol\"])\n    service_group_commands.append(add_sg_cmd)\n    for sg in service_group[\"serviceGroupMemberMap\"]:\n        bind_cmd = 'bind serviceGroup ' + servicegroup_name\n        ip_port = sg.split(\"::\")[-1].split(\":\")\n        bind_cmd += ' ' + ip_port[0] + ' ' + ip_port[1]\n        service_group_commands.append(bind_cmd)\n    for monitors in service_group['monitorMap']:\n        bind_cmd = 'bind serviceGroup ' + servicegroup_name\n        bind_cmd += \" -monitorName \" + monitors\n        service_group_commands.append(bind_cmd)\n\n    return service_group_commands\n\n\ndef create_slb_virtual(db, device_id, device_version, vip_name):\n    \"\"\"Construct create slb virtual command from the configuration\n    \"\"\"\n    vip_commands = []\n    fields_to_fetch = {'protocol': 1, 'configData': 1, 'partition':1, \"ip\": 1, \"port\": 1, \"serviceGroupMap\":1}\n    vip = db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixvs', 'name': vip_name}, fields_to_fetch)\n    add_vip_command = 'add lb vserver {name} {protocol} {ip} {port}'.format(\n        name=vip_name, protocol=vip['protocol'], ip=vip['ip'], port=vip['port'])\n    vip_commands.append(add_vip_command)\n    for service_group in vip['serviceGroupMap']:\n        modify_vip_command = 'bind lb vserver ' + vip_name + ' ' + service_group\n        vip_commands.append(modify_vip_command)\n    return vip_commands\n\ndef create_slb_monitor(db, device_id, monitor_type, partition, monitor):\n    \"\"\"\n        construct create monitor command\n    \"\"\"\n\n    return \"add lb monitor \" + monitor + ' ' + monitor_type\n\ndef delete_monitor(db, device_id, vip_record, action, vip_name_list):\n    \"\"\"Delete monitor associated with the vip\n    \"\"\"\n    monitor_commands = []\n    delete_monitor_dict = {}\n    mon_type = {}\n    standard_monitor_list = ['swivel RADIUS Monitor', 'ping-default', 'tcp-default', 'arp',\n                             'nd6', 'ping', 'tcp', 'http', 'tcp-ecv', 'http-ecv', 'udp-ecv', 'dns', 'ftp'\n                                                                                                    'tcps', 'https',\n                             'tcps-ecv', 'https-ecv', 'ldns-ping', 'ldns-tcp', 'ldns-dns'\n                                                                               'xdm', 'xnc']\n    pool_name_list = []\n    for vips in vip_name_list:\n        vips_info = get_vip_record(db, device_id, vips)\n        pool_name_list += vips_info[\"serviceGroupMap\"] if \"serviceGroupMap\" in vips_info else []\n    pool_name = vip_record['serviceGroupMap'] if 'serviceGroupMap' in vip_record else ''\n    if pool_name and not db.me_adc.find_one(\n            {'deviceId': device_id, 'code': 'citrixvs', 'name': {'$nin': vip_name_list}, 'serviceGroupMap': pool_name},\n            {'_id': 1}):\n        for pools in pool_name:\n            pool_name = pools.split('/')[-1]\n            monitor_list = \\\n            db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixsg', 'name': pool_name}, {'monitorMap': 1})[\n                'monitorMap']\n            if monitor_list:\n                # Remove empty strings and remove partition from the monitor, eg: /Common/http_monitor to http_monitor\n                monitor_list = list(filter(None, monitor_list))\n                delete_monitor_list = monitor_list[:]\n                for monitor in monitor_list:\n                    if not delete_monitor_dict.get(monitor):\n                        if monitor in standard_monitor_list:\n                            delete_monitor_dict[monitor] = False\n                            mon_type[monitor] = monitor\n                        else:\n                            monitor_type, partition = get_monitor_type(db, device_id, monitor)\n                            delete_monitor_dict[monitor] = False\n                            mon_type[monitor] = monitor_type\n                    if db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixsg', 'name': {'$nin': pool_name_list},\n                                           'monitorMap': monitor}, {'_id': 1}):\n                        if monitor in delete_monitor_list:\n                            delete_monitor_list.remove(monitor)\n\n                for monitor in delete_monitor_list:\n                    if monitor not in standard_monitor_list:\n                        monitor_type, partition = get_monitor_type(db, device_id, monitor)\n                        if action == 'IMPLEMENT':\n                            delete_monitor_dict[monitor] = True\n                            monitor_commands.append('rm lb monitor ' + monitor + ' ' + monitor_type)\n                        elif action == 'ROLLBACK':\n                            monitor_commands.append(create_slb_monitor(db, device_id, monitor_type, partition, monitor))\n                        elif action == 'PREVAL':\n                            monitor_commands.append('sh lb monitor ' + monitor + ' ' + monitor_type)\n                        elif action == 'POSTVAL':\n                            monitor_commands.append('sh lb monitor '+ monitor + ' ' + monitor_type)\n                        else:\n                            raise Exception('Unknown action ' + action + ' on function delete_monitor')\n\n    if action == 'IMPLEMENT':\n        return monitor_commands,delete_monitor_dict,mon_type\n    else:                           \n        return monitor_commands\n\n\ndef delete_servers(db, device_id, vip_record, action, vip_name_list):\n    \"\"\"Delete nodes associated with the pool\n    \"\"\"\n    delete_node_list = []\n    delete_servers_dict = {}\n    pool_name_list = []\n    for vips in vip_name_list:\n        vips_info = get_vip_record(db, device_id, vips)\n        pool_name_list += vips_info[\"serviceGroupMap\"] if \"serviceGroupMap\" in vips_info else []\n    logger.info(\" pool_name :\"+ str(pool_name_list))\n    pool_names = vip_record[\"serviceGroupMap\"] if \"serviceGroupMap\" in vip_record else ''\n    for pool_name in pool_names:\n        vip_pool_list = (db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixsg', 'name': pool_name},{\"parentName\":1}) or {}).get(\"parentName\",[])\n        final_vip_list = list(set(vip_pool_list)-set(vip_name_list))\n        if pool_name:\n            server_list = (db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixsg', 'name': pool_name},\n                                             {\"citrixsv\": 1}) or {}).get(\"citrixsv\", [])\n            logger.info(\"delete_servers function -\" + str(server_list))\n            for server_id in server_list:\n                server_name = server_id.split('::')[-1].split(':')[0]\n                logger.info(\"delete_servers function - server_name\" + str(server_name))\n                delete_servers_dict[server_name] = False\n                if not final_vip_list and not db.me_adc.find_one({'serverName': server_name, 'deviceId': device_id, 'code': 'citrixsv', \"parentName\": {'$nin': pool_name_list}}):\n                    if action == 'IMPLEMENT':\n                        delete_servers_dict[server_name] = True                        \n                        delete_node_list.append('rm server ' + server_name)\n                    elif action == 'ROLLBACK':\n                        # Node creation is not supported\n                        pass\n                    elif action == 'PREVAL':\n                        delete_node_list.append('sh server ' + server_name)\n                    elif action == 'POSTVAL':\n                        delete_node_list.append('sh server ' + server_name)\n                    else:\n                        raise Exception(action + ' not supported in function delete_node')\n\n\n    if action == \"IMPLEMENT\":\n        return delete_node_list, delete_servers_dict\n    else:\n        return delete_node_list\n\n\ndef delete_servicegroup(db, device_id, device_version, vip_name, vip_record, action, vip_name_list):\n    \"\"\"Delete pools associated with the vip\n    \"\"\"\n    pool_commands = []\n    delete_sg_dict = {}\n    vip_pool_name = vip_record['serviceGroupMap'] if 'serviceGroupMap' in vip_record else ''\n    for sg_name in vip_pool_name:\n        delete_sg_dict = {sg_name: False}\n        if not db.me_adc.find_one({'deviceId': device_id, 'code': 'citrixvs', 'name': {'$nin': vip_name_list},\n                                   'serviceGroupMap': sg_name}, {'_id': 1}):\n            delete_sg_dict = {sg_name: True}\n            if action == 'IMPLEMENT':\n                pool_commands.append('rm serviceGroup ' + sg_name)\n            elif action == 'ROLLBACK':\n                pool_commands += create_service_group(db, device_id, device_version, sg_name)\n            elif action == 'PREVAL':\n                pool_commands.append('sh serviceGroup ' + sg_name)\n            elif action == 'POSTVAL':\n                pool_commands.append('sh serviceGroup ' + sg_name)\n            else:\n                raise Exception('Unknown action ' + action + ' on function delete_pool')\n    if action == 'IMPLEMENT':\n        return delete_sg_dict, pool_commands\n    else:\n        return pool_commands\n\n\ndef delete_vip(db, device_id, device_version, vip_name, vip_record, action):\n    \"\"\"Delete vip\n    \"\"\"\n    vip_commands = []\n    if action == 'IMPLEMENT':\n        vip_commands.append('rm lb vserver ' + vip_name)\n    elif action == 'ROLLBACK':\n        vip_commands += create_slb_virtual(db, device_id, device_version, vip_name)\n    elif action == 'PREVAL':\n        vip_commands.append('sh lb vserver ' + vip_name)\n    elif action == 'POSTVAL':\n        vip_commands.append('sh lb vserver ' + vip_name)\n    else:\n        raise Exception('Unknown action ' + action + ' on function delete_vip')\n\n    return vip_commands\n\n\ndef change_vip_status(vip_name, partition, action):\n    \"\"\"Change status of the vip\n    \"\"\"\n    vip_commands = []\n    if action == 'IMPLEMENT':\n        vip_commands.append('disable lb vserver ' + vip_name)\n    elif action == 'ROLLBACK':\n        vip_commands.append('enable lb vserver ' + vip_name)\n    elif action == 'PREVAL':\n        vip_commands.append('sh lb vserver ' + vip_name)\n    elif action == 'POSTVAL':\n        vip_commands.append('sh lb vserver ' + vip_name)\n    else:\n        raise Exception('Unknown action ' + action + ' on function change_vip_status')\n\n    return vip_commands\n\n\ndef delete_vip_main(db, device_name, vip_name, device_row, action, vip_name_list):\n    \"\"\"Main method for deletion of a vip\n    \"\"\"\n    command_list = []\n    csv_formation_dict = {}\n    device_id, device_version = str(device_row['_id']), device_row['version']\n    device_ip, device_status = device_row['ip'], device_row['status']\n    vip_record = get_vip_record(db, device_id, vip_name)\n    if not vip_status_enabled(vip_record):\n        # If status is enabled do not delete the vip, just change status to disabled\n        partition = vip_record['partition']\n        command_list += change_vip_status(vip_name, partition, action)\n\n    if action == 'ROLLBACK':\n        command_list += delete_monitor(db, device_id, vip_record, action, vip_name_list)\n        command_list += delete_servicegroup(db, device_id, device_version, vip_name, vip_record, action, vip_name_list)\n        command_list += delete_vip(db, device_id, device_version, vip_name, vip_record, action)\n    elif action == 'IMPLEMENT':\n        delete_sg_dict, pool_commands = delete_servicegroup(db, device_id, device_version, vip_name, vip_record, action,\n                                                            vip_name_list)\n        delete_node_list, delete_servers_dict = delete_servers(db, device_id, vip_record, action, vip_name_list)\n        command_list += delete_node_list\n        monitor_commands,delete_monitor_dict,mon_type = delete_monitor(db, device_id, vip_record, action, vip_name_list)\n        command_list += monitor_commands\n        csv_formation_dict = {'delete_sg_dict': delete_sg_dict, 'delete_servers_dict': delete_servers_dict,'delete_monitor_dict':delete_monitor_dict,\n                            'mon_type':mon_type}\n\n    else:\n        command_list += delete_vip(db, device_id, device_version, vip_name, vip_record, action)\n        command_list += delete_servicegroup(db, device_id, device_version, vip_name, vip_record, action, vip_name_list)\n        command_list += delete_servers(db, device_id, vip_record, action, vip_name_list)\n        command_list += delete_monitor(db, device_id, vip_record, action, vip_name_list)\n\n    return command_list, csv_formation_dict\n\n\ndef delete_multiple_vip(device_name, vip_name_list, action):\n    \"\"\"Delete multiple citrix virtual servers\n    \"\"\"\n    db_connection = appviewx.db_connection()\n    db = db_connection.appviewx\n    citrix_commands = []\n    csv_final_dict = {}\n    device_row = get_device_info(db, device_name)\n    device_version = device_row['version']\n    # tmshell = ['tmsh'] if is_bash_shell(device_row['name'], device_row['ip'], device_row['status']) else []\n    if action == \"IMPLEMENT\":\n        for vip_name in vip_name_list:\n            vip_record = get_vip_record(db, str(device_row['_id']), vip_name)\n            citrix_commands += delete_vip(db, str(device_row['_id']), device_version, vip_name, vip_record, action)\n        for vip_name in vip_name_list:\n            vip_record = get_vip_record(db, str(device_row['_id']), vip_name)            \n            delete_sg_dict, pool_commands = delete_servicegroup(db, str(device_row['_id']), device_version, vip_name, vip_record, action,\n                                                            vip_name_list)\n            citrix_commands += pool_commands\n    for vip_name in vip_name_list:\n        tmsh, csv_formation_dict = delete_vip_main(db, device_name, vip_name, device_row, action, vip_name_list)\n        citrix_commands += tmsh\n        csv_final_dict[vip_name] = csv_formation_dict\n    if action in ('IMPLEMENT', 'ROLLBACK'):\n        citrix_commands.append(\"save ns config\")\n    if action in ('ROLLBACK', 'PREVAL', 'POSTVAL'):\n        return citrix_commands\n    if action == \"IMPLEMENT\":\n        return citrix_commands, csv_final_dict\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"RI_delete_slb","_keywords":["RI_delete_slb","","Version 2.x"]}