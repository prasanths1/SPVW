{"name":"avx_mail_send_and_csv_generation","scriptType":"Python","scriptContent":"import os\nimport sys\nimport smtplib\nimport csv\nimport paramiko\nfrom os.path import basename\nfrom email.mime.application import MIMEApplication\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\nimport appviewx\nimport Decrypt_Python3\nSFTP_SERVER = 'sftpserver'\nPATH = os.path.dirname(os.path.abspath(__file__))\n\nclass DBUtil():\n    '''\n    Database wrapper for db connection\n    '''\n    @classmethod\n    def get_db_conn(self):\n        '''\n        open the mongodb connection\n    \n        Args:\n            param1(self):           self is a reference to the class instance,\n\n        Returns:\n            connecion object: The return type. \n    \n        '''\n        try:\n            return appviewx.db_connection()\n        except:\n            raise Exception(sys.exc_info()[1])\n\nclass DeviceUtil():\n    '''\n    Wrapper for ADC\n    \n    '''\n    \n    @classmethod\n    def connect_remote_device(self,device_ip,username,password):\n\n      \"\"\" Connect the remote device by using paramiko library\n      Args:\n            param1(self):           self is a reference to the class instance,\n            param2(device_ip):    F5 Device ip,\n            param3(username):     F5 Username for connection,\n            param4(password):     F5 Password for connection\n\n\n\n      \"\"\"\n\n      try:\n        port = 22\n        ssh=paramiko.SSHClient()\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        ssh.connect(device_ip,port,username,password)\n        return ssh\n      except Exception as e:\n        return e\n    \n    @classmethod\n    def get_device_details(self,device,connection):\n        '''\n        fetch the username,password,ip of the given F5 device name\n    \n        Args:\n            param1(self):           self is a reference to the class instance,\n            param2(infoblox_ip):    F5 device name\n            param3(connection):     mongodb connection\n            \n        \n        Returns:\n            dict: The return type. details for success. exception otherwise\n    \n        '''\n        try:\n            device_collection = connection.appviewx.device\n            device_name = device_collection.find_one({'name':device})\n            username,password = Decrypt_Python3.getpassword(device)\n            result_dict = {'hostname':device_name['ip'],\n                          'username':username,\n                          'password':password,\n                          'datacenter':device_name['dataCenter'] or ''\n                          }\n            return result_dict\n        except Exception as e:\n            return e\n\n\n\nclass CSVUtil():\n\n  \"\"\" xslx wrapper for creating report as xslx file and stored in to a specific appviewx file path \"\"\"\n\n  @classmethod\n  def create_csv_file(self,csv_file_name,csv_columns,dict_data):\n    '''to create csv file in appviewx server based on given data'''\n    try:\n        with open(PATH+'/../../'+csv_file_name, 'w') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=csv_columns)\n            writer.writeheader()\n            for data in dict_data:\n                writer.writerow(data)\n        return PATH+'/../../'+csv_file_name\n    except Exception as e:\n          return e\n        \nclass SFTPUtil():\n    '''Connect to sftp server and transfer/remove the file in required path'''\n    @classmethod\n    def push_file_to_ftp_server(self,csv_file_name):\n        '''To move the file from appviewx server to sftp server'''\n        try:\n            connection = DBUtil.get_db_conn()\n            device_details = DeviceUtil.get_device_details(SFTP_SERVER,connection)\n            ssh = paramiko.SSHClient()\n            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n            transport = paramiko.Transport((device_details['hostname'], 22))\n            transport.connect(username=device_details['username'],password=device_details['password'])\n            sftp = paramiko.SFTPClient.from_transport(transport)\n            sftp.put(PATH+'/../../'+csv_file_name,'/data/AppViewX/Reports/'+csv_file_name)\n            return 'file is successfully transfered to sftp server'\n        except Exception as e:\n            return e\n            \n    @classmethod\n    def remove_file_from_sftp_server(self,csv_file_name):\n        '''To remove file from sftp server'''\n        try:\n            connection = DBUtil.get_db_conn()\n            device_details = DeviceUtil.get_device_details(SFTP_SERVER,connection)\n            ssh = paramiko.SSHClient()\n            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n            transport = paramiko.Transport((device_details['hostname'], 22))\n            transport.connect(username=device_details['username'],password=device_details['password'])\n            sftp = paramiko.SFTPClient.from_transport(transport)\n            sftp.remove('/data/AppViewX/Reports/'+csv_file_name)\n            return 'CSV file is successfully removed from sftp server'\n        except Exception as e:\n            return e\n        \n            \nclass EmailUtil():\n\n  \"\"\" Email wrapper for email sending functionality \"\"\"\n\n  @classmethod\n  def send_mail(self,file_name,subject,body,attach_exist,toaddr=[]):\n      \n      \"\"\" Send email with attachments \"\"\"\n\n      connect_db = DBUtil.get_db_conn()\n      settings_db = connect_db.appviewx.appSettings.find_one({\"category\": \"SMTP\",\"subCategory\":\"SMTP\"})\n      smtp_server = settings_db['properties']['SMTP_HOST']\n      port = settings_db['properties']['SMTP_PORT']\n      outgoing_mail_id = settings_db['properties']['SMTP_FROM_ADDRESS']\n      # username = settings_db['properties']['SMTP_USERNAME']\n      # smtp_password_en = settings_db['properties']['SMTP_PASSWORD']['encryptedValue']\n      # smtp_password_key = settings_db['properties']['SMTP_PASSWORD']['key']\n      # smtp_password = Decrypt_Python3.decyrpt_snow(smtp_password_en, smtp_password_key)\n      try:\n        msg = MIMEMultipart()\n        msg['From'] = outgoing_mail_id\n        msg['To'] = ','.join(toaddr)\n        msg['Subject'] = subject\n        body = body\n        msg.attach(MIMEText(body, 'html'))\n        if attach_exist==\"yes\":\n          with open(PATH+'/../../'+file_name,'rb') as fil:\n              part = MIMEApplication(fil.read(), Name=basename(PATH+'/../../'+file_name))\n              part['Content-Disposition'] = 'attachment; filename=\"%s\"' % basename(PATH+'/../../'+file_name)\n              msg.attach(part)\n        server = smtplib.SMTP(smtp_server, port)\n        server.ehlo()\n        server.starttls()\n        server.ehlo()\n        # server.login(username, smtp_password)\n        text = msg.as_string()\n        server.sendmail(outgoing_mail_id, toaddr ,text)\n        return 'Send mail successfully'\n      except Exception as e:\n          return e.msg","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"avx_mail_send_and_csv_generation","_keywords":["avx_mail_send_and_csv_generation","","Version 2.x"]}