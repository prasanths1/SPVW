{"name":"FirewallPanoramaSchedule","scriptType":"Python","scriptContent":"import sys\nimport traceback\nimport logger_util\n\nsys.path.insert(0,AVX::HELPER)\nsys.path.insert(0,AVX::DEPENDENCIES)\n\nlogger = logger_util.get_logger(\"Firewall Panorama Schedule\")\n\n'''\nThis task is to create the Schedule Object in the Panorama Device\n#FIXME: Prevalidation and Postvalidation to be done\n#FIXME: if no input received fro the boolean flags, then the device property is set to 'no'\n'''\n\nclass FirewallPanoramaSchedule(object):\n\n    @classmethod\n    def clean_input_data(self,input_dict):\n        logger.info(\"Input Received Before clean : \"+str(input_dict))\n\n        input_dict[\"name\"] = self.handle_strip(input_dict['name'])\n        input_dict[\"device_group\"] = self.handle_strip(input_dict['device_group'])\n        input_dict[\"schedule_type\"] = self.handle_strip(input_dict['schedule_type'])\n\n        input_dict['device_name'] = self.handle_strip(input_dict['device_name'])\n        input_dict['operation_type'] = self.handle_strip(input_dict['operation_type'])\n                \n\n        logger.info(\"Input Received After clean : \"+str(input_dict))\n\n    #FIXME: Only generic validation available, specific to vendor to be added\n    @classmethod\n    def validate_input_data(self,input_dict):\n        logger.info(\"Validating the Input Data\")\n        status = True\n\n        status = status and self.mandatory_string_validation(input_dict['name'],\"name\",True)        \n        status = status and self.mandatory_string_validation(input_dict['device_group'],\"device_group\",True)        \n        status = status and self.mandatory_string_validation(input_dict['device_name'],\"device_name\",True)                \n\n        if not status:\n            logger.info(\"INPUT VALIDATION FAILED\")\n        else:\n            logger.info(\"INPUT VALIDATION SUCCESS\")\n\n        return status\n\n    @classmethod\n    def validation_fail_output(self):\n        output = {}\n        output[\"status\"] = \"failed\"\n        output[\"message\"] = \"Validation failed\"\n        logger.info(\"output : \"+str(output))\n        return output\n\n    def __init__(self, input_dict):\n        logger.info(\"Creating Object with input :\"+str(input_dict))\n\n        self.name = input_dict[\"name\"]\n        self.device_group = input_dict[\"device_group\"]\n        self.is_disable_override = input_dict[\"is_disable_override\"]\n        self.schedule_type = input_dict[\"schedule_type\"]\n        self.non_recurring_start = input_dict[\"non_recurring_start\"]\n        self.non_recurring_end = input_dict[\"non_recurring_end\"]\n\n        # [{\"start\":\"10:00-23:59\",\"end\":\"10:00-23:59\"},{\"start\":\"10:00-23:59\",\"end\":\"10:00-23:59\"}]\n        self.daily_table_input = input_dict[\"daily_table_input\"]\n\n        # [ {\"day\":\"friday\",\"start\":\"10:00-23:59\",\"end\":\"10:00-23:59\"},{\"day\":\"sunday\",\"start\":\"10:00-23:59\",\"end\":\"10:00-23:59\"}]\n        self.weekly_table_input = input_dict[\"weekly_table_input\"]\n\n        self.device_name = input_dict['device_name']\n        self.is_rollback = input_dict['is_rollback']\n        self.rollback_input = input_dict['rollback_input']\n        self.is_deferred = input_dict['is_deferred']\n\n        self.operation_type = input_dict['operation_type']\n\n    def get_input_dict(self):\n        output = {}\n\n        output[\"name\"] = self.name\n        output[\"device_group\"] = self.device_group\n        output[\"is_disable_override\"] = self.is_disable_override\n        output[\"schedule_type\"] = self.schedule_type\n        output[\"non_recurring_start\"] = self.non_recurring_start\n        output[\"non_recurring_end\"] = self.non_recurring_end\n        output[\"daily_table_input\"] = self.daily_table_input\n        output[\"weekly_table_input\"] = self.weekly_table_input\n\n        output['device_name'] = self.device_name\n        output['is_rollback'] = self.is_rollback\n        output['rollback_input'] = self.rollback_input\n        output['is_deferred'] = self.is_deferred\n\n        output['operation_type'] = self.operation_type\n\n        \n        return output\n        \n    def create(self):\n        logger.info(\"Creation Started\")\n        try:\n            if self.is_deferred:\n                return self.create_deferred()\n            else:\n                return self.create_immediate()\n        except Exception as exception:\n            output = {}\n            error_trace = traceback.format_exc()\n            logger.info(\"error_trace :\"+str(error_trace))\n            output[\"status\"] = \"failed\"\n            output[\"error\"] = str(exception)\n            output[\"error_trace\"] = str(error_trace)\n            return output\n    # FIXME: support not provided now\n    def create_immediate(self):\n        logger.info(\"Create Immediate not supported\")\n        return {\"status\":\"failed\",\"message\":\"not supported\"}\n\n    def create_deferred(self):\n        output_commands = []\n        command = \"set device-group \"+self.device_group+\" \"\n\n        command = self.extend_command_with_given_input(\"schedule\",self.name,command)\n\n        command += \"disable-override \"+(\"yes\" if self.is_disable_override else \"no\")+\" \"\n\n        if self.schedule_type:\n            command += \"schedule-type \"\n            if self.schedule_type == \"non-recurring\":\n                command += \"non-recurring \"+str(self.non_recurring_start)+\"-\"+str(self.non_recurring_end)\n            if self.schedule_type == \"daily\":\n                command += \"recurring daily [ \"\n                for daily_input in self.daily_table_input:\n                    command += daily_input[\"start\"]+\"-\"+daily_input[\"end\"]+\" \"                    \n                command +=\"]\"\n            if self.schedule_type == \"weekly\":\n                command += \"recurring weekly \"\n                tmp_weekly_dict = {}\n                for weekly_input in self.weekly_table_input:\n                    day = weekly_input[\"day\"].lower()\n                    if day not in tmp_weekly_dict:\n                        tmp_weekly_dict[day] = []\n                    tmp_weekly_dict[day].append(weekly_input[\"start\"]+\"-\"+weekly_input[\"end\"])\n\n                for key in tmp_weekly_dict:\n                    command += key +\" [ \"\n                    for list_of_weekly in tmp_weekly_dict[key]:\n                        command += list_of_weekly+\" \"                    \n                    command +=\"] \"\n\n        output_commands.append(command)\n\n        output = {}\n        output[\"status\"] = \"success\"\n        output[\"commands\"] = output_commands\n        output[\"rollback\"] = self.get_input_dict()\n        return output\n\n    def extend_command_with_given_input_string(self,key,value,command):\n        if value:\n            command += key+\" \"+value+\" \"\n        return command\n\n    def extend_command_with_given_input_list(self,key,list_value,command):\n        if list_value:\n            command += key+\" [\"\n            for value in list_value:\n                command += \" \"+value+\" \"\n            command += \"] \"\n        return command\n\n    def extend_command_with_given_input(self,key,list_value,command):\n        if type(list_value).__name__==\"str\":\n            return self.extend_command_with_given_input_string(key,list_value,command)\n        elif type(list_value).__name__==\"list\":\n            return self.extend_command_with_given_input_list(key,list_value,command)\n        else:\n            return command\n    \n    def delete(self):\n        logger.info(\"Deletion Started\")\n        try:\n            if self.is_deferred:\n                return self.delete_deferred()\n            else:\n                return self.delete_immediate()\n        except Exception as exception:\n            output = {}\n            error_trace = traceback.format_exc()\n            logger.info(\"error_trace :\"+str(error_trace))\n            output[\"status\"] = \"failed\"\n            output[\"error\"] = str(exception)\n            output[\"error_trace\"] = str(error_trace)\n            return output\n\n\n    def delete_immediate(self):\n        logger.info(\"Delete Immediate not supported\")\n        return {\"status\":\"failed\",\"message\":\"not supported\"}\n\n    def delete_deferred(self):\n        output_commands = []\n        command = \"delete device-group \"+self.device_group+\" \"\n\n        if self.name:\n            command += \"schedule \"+self.name+\" \"\n        output_commands.append(command)\n        output = {}\n        output[\"status\"] = \"success\"\n        output[\"commands\"] = output_commands\n        return output\n\n\n# FIXME: Prevalidation functionality to be added\n    @classmethod\n    def carry_out_pre_validation_activity_for_tabular_input(self, input_dict):\n        activity_output = []\n        output_dict = {}\n        output_dict['device_name'] =  input_dict['device_name']\n        output_dict['operation_type'] =  input_dict['operation_type']\n        output_dict['data'] = []\n        output_dict['commands'] = [\"show device-group \" +input_dict['device_group']+\" schedule \"+input_dict['name']]\n        activity_output.append(output_dict)\n       \n        return activity_output\n\n# FIXME: PostValidation functionality to be added\n    \n    def carry_out_post_validation_activity_for_tabular_input(self):\n        activity_output = []\n        output_dict = {}\n        output_dict['device_name'] = self.device_name\n        output_dict['operation_type'] = self.operation_type\n        output_dict['data'] = []\n        output_dict['commands'] = [\"show device-group \" +self.device_group+\" schedule \"+self.name]\n        activity_output.append(output_dict)\n        return activity_output\n\n    # FIXME: Partial Rollback functionality to be added\n    \n    def generate_partial_rollback_commands(self, rollback_input):\n        activity_output = []\n        for rollback_dict in rollback_input:\n            \n            output_dict = {}\n            output_dict['device_name'] = rollback_dict['device_name']\n            output_dict['operation_type'] = rollback_dict['operation_type']\n            output_dict['data'] = []\n            if rollback_dict['operation_type'] == \"create\":\n                output_dict['commands'] = self.delete_deferred()['commands']\n            elif rollback_dict['operation_type'] == \"delete\":\n                output_dict['commands'] = self.create_deferred()['commands']\n            else:\n                output_dict['commands'] = []\n            activity_output.append(output_dict)\n        return activity_output\n\n\n\n\n    @classmethod\n    def handle_strip(self,input):\n        if type(input).__name__ == 'str':\n            return input.strip() if (input!=None and input!='') else input\n        return input\n\n    @classmethod\n    def mandatory_string_validation(self,input,key,is_error_update):\n        output = input != None and input != ''\n        if not output and is_error_update:\n            logger.info(key + \" Validation Failed with \"+str(input))    \n        return output","description":"FirewallPanoramaSchedule","readOnly":false,"version":"Version 3.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":{"committed":true,"pendingForPushAction":true,"pushActionCompleted":false,"enabledForRemoteRepository":true,"connectedRepo":null},"_id":"FirewallPanoramaSchedule","_keywords":["FirewallPanoramaSchedule","Version 3.x"]}