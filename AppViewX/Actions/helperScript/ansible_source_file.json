{"name":"ansible_source_file","scriptType":"Python","scriptContent":"#!/usr/bin/python\n\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: my_test\n\nshort_description: This is my test module\n\nversion_added: \"2.4\"\n\ndescription:\n    - \"This is my longer description explaining my test module\"\n\noptions:\n    server:\n        description:\n            - This is the AppViewX server\n        required: true\n    username:\n        description:\n            - This is the AppViewX server username\n        required: true\n    password:\n        description:\n            - This is the AppViewX server password\n        required: true\n\n\nauthor:\n    - Thameem Ansari\n'''\n\nEXAMPLES = '''\nRefer generated yaml file'''\n\nRETURN = '''\nvwchanged:\n    description: The overall status of the visual workflow\n    type: bool\n    returned: always\nmessage:\n    description: The output message that the test module generates\n    type: str\n    returned: always\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nimport requests\nimport json,yaml\n\ndef run_module():\n\n\n    result = dict(\n        changed=False,\n        message=''\n    )\n\n    has_changed,output = generate_session_id(module.params[\"provider\"])\n    if has_changed is False:\n        result[\"sessionIdchanged\"] = has_changed\n        result[\"sessionIderrorResponse\"] = output\n    else:\n        result[\"sessionIdchanged\"] = has_changed\n        #result[\"sessionId\"] = output[\"sessionId\"]\n\n    has_changed, output = generate_vw_response(module.params,output[\"sessionId\"])\n\n    if has_changed is True:\n        result['vwchanged'] = has_changed\n        result['changed'] = has_changed\n        result['requestId'] = output[\"response\"][\"response\"][\"requestId\"]\n        result[\"message\"] = str(workflow_name)+\" workflow has triggered successfully.RequestId has been generated\"\n    else:\n        result['vwchanged'] = has_changed\n        result[\"vwerrorResponse\"] = str(output)\n        result[\"message\"] = str(workflow_name)+\" has failed to trigger\"\n\n\n        # if module.params['name'] == 'fail me':\n    #     module.fail_json(msg='You requested this to fail', **result)\n    module.exit_json(**result)\n\ndef generate_vw_response(input_dict,sessionid):\n\n\n    headers = {\n        \"sessionId\": str(sessionid),\n        \"Content-Type\": \"application/json\"\n    }\n\n\n    vw_payload = {\n        \"payload\": {\n                \"data\": {\n                        \"input\": {\n                                \"requestData\": [\n                                        {\n                                                \"sequenceNo\": 1,\n                                                \"scenario\": \"scenario\",\n                                                \"fieldInfo\": {\n                                                }\n                                        }\n                                ]\n                        },\n                        \"task_action\": 1\n                },\n                \"header\": {\n                        \"workflowName\": str(workflow_name)\n                }\n        }\n}\n    for key, val in input_dict.items():\n        if not key in [\"provider\"]:\n            vw_payload[\"payload\"][\"data\"][\"input\"][\"requestData\"][0][\"fieldInfo\"][key] = val\n\n    url = \"{}://{}:5300/avxapi/visualworkflow-submit-request?gwkey={}&&gwsource=web\".format(input_dict[\"provider\"][\"server_protocol\"],input_dict[\"provider\"][\"server\"], input_dict[\"provider\"][\"gwkey\"])\n    result_resp = requests.post(url, data=json.dumps(vw_payload), headers=headers,verify=False)\n\n    if result_resp is not None:\n        result_resp_json = json.loads(result_resp.text)\n        if result_resp.status_code == 200 and result_resp_json[\"response\"] is not None:\n\n            output = {\"status\": result_resp.status_code, 'response': result_resp_json}\n            return True, output\n        else:\n            output = {\"status\": result_resp.status_code, 'response': result_resp_json}\n            return False, output\n\n    else:\n        return False, {\"response\": None}\n\n\ndef generate_session_id(data):\n\n\n    headers = {\n        \"username\": data[\"username\"],\n        \"password\": data[\"password\"],\n        \"Content-Type\": \"application/json\"\n    }\n    url = \"{}://{}:5300/avxapi/acctmgmt-perform-login?gwkey={}&&gwsource=web\".format(data[\"server_protocol\"],data[\"server\"],data[\"gwkey\"])\n    result = requests.post(url, data = json.dumps({}), headers=headers,verify=False)\n    if result is not None:\n        result_json = result.json()\n        if result.status_code == 200:\n            output = {\"status\": result.status_code,'response': result_json,\"sessionId\" :result_json[\"response\"][\"sessionId\"] }\n            return True, output\n        else:\n            output = {\"status\": result.status_code, 'response': result_json,\"sessionId\" :None}\n            return False, output\n    else:\n        return False,{\"response\":None}\n\ndef main():\n    run_module()\n\nif __name__ == '__main__':\n    # define available arguments/parameters a user can pass to the module\n    module_args = dict(provider=dict(type= 'dict', required = True,\n        username=dict(type='str', required=True),\n        password=dict(type='str', required=True, no_log=True),\n        server=dict(type='str', required=True),\n        server_protocol=dict(type='str', required=True),\n        gwkey=dict(type='str', required=True,default=\"f000ca01\")))\n\n\n    form_val = '!!!!'\n    workflow_name = '@@@@'\n    form_dict = {}\n    tabular_status = False\n    for key, val in form_val.items():\n        try:\n            if type(eval(val)) is list:\n                tabular_input = eval(val)\n                tabular_key = key\n                tabular_status = True\n            else:\n                form_dict[str(key)] = {'type': 'str', 'required': True}\n        except:\n            if \",\" in val:\n                form_dict[str(key)] = {'type': 'str','choices':val.split(\",\"), 'required': True}\n            elif not val:\n                form_dict[str(key)] = {'type': 'str', 'required': False}\n            else:\n                form_dict[str(key)] = {'type': 'str', 'required': True}\n\n    if tabular_status is True:\n        del form_val[tabular_key]\n        a={'type': 'list','required': True}\n        for i in tabular_input[0]:\n            a[i]=dict(type='str', required=True)\n            # if i in list(form_dict.keys()):\n            #     del form_dict[i]\n\n        module_args.update(dict(aggregate=dict(a)))\n    module_args.update(form_dict)\n    module = AnsibleModule(\n        argument_spec=module_args,\n        supports_check_mode=True,\n    )\n\n    main()\n\n","description":"ansible_source_file","readOnly":true,"version":"Version 3.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"ansible_source_file","_keywords":["ansible_source_file","ansible_source_file","Version 3.x"]}