{"name":"DNS_helper","scriptType":"Python","scriptContent":"\n'''\nCreated on 08-Jul-2016\n\n@author: Sujeesh.S\n@version : 1.0\n\n'''\n\nimport sys\nimport json\nimport subprocess\nimport os\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\nimport appviewx\nimport base64\nimport Decrypt_Python3\nimport logger_util\nlogger = logger_util.get_logger('Infoblox_generic_helper')\n\n\nclass Infoblox:\n    '''\n    This class is having all functions related to an Infoblox device\n    '''\n\n    def __init__(self):\n        '''\n        Initialize Infoblox object\n        '''\n\n    @staticmethod\n    def get_device_ip(device_name):\n        '''\n        Return device ip and wapi version of the device.\n        '''\n        connection = appviewx.db_connection()\n        collection = connection.appviewx.device\n        device = collection.find_one({'name': device_name},\n                                     {'ip': 1, 'attributes': 1})\n        return device['ip'], (device.get('attributes') or {}).get('wapiVersion',\n                                Infoblox.get_wapi_version(device['ip'],\n                                *Decrypt_Python3.getpassword(device_name)))\n    \n    @staticmethod\n    def get_wapi_version(infoblox_addr, username, password):\n        url = 'https://{device_ip}/wapi/v{wapiVersion}/?_schema'.format(device_ip=infoblox_addr,\n                                                                        wapiVersion='1.0')\n        curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      '{url}'.format(uname=username, pwd=password, url=url)\n\n        output = os.popen(curl_command).read()\n        try:\n            return json.loads(output)[\"supported_versions\"][-1]\n        except (ValueError, KeyError):\n            return '1.0'\n        \n    @staticmethod\n    def get_default_dns_view(infoblox_addr, wapi_version, username, password):\n        url = 'https://{device_ip}/wapi/v{wapiVersion}/view?is_default=true'.format(device_ip=infoblox_addr,\n                                                                        wapiVersion=wapi_version)\n        curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      '{url}'.format(uname=username, pwd=password, url=url)\n        logger.info(curl_command)\n        output = os.popen(curl_command).read()\n        try:\n            return json.loads(output)[0][\"name\"]\n        except (ValueError, KeyError, IndexError):\n            return None\n\n    \n    @staticmethod\n    def get_reference(username, password, device_ip, wapi, subnet):\n        '''\n        Return _ref of Infoblox device\n        '''\n        curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET '\\\n            'https://{ip}/wapi/v{wapi_version}/'\\\n            'network?_return_type=json-pretty\\&network='\\\n            '{subnet}'.format(\n                uname=username,\n                pwd=password,\n                ip=device_ip,\n                wapi_version=wapi,\n                subnet=subnet)\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output)\n        return json_output[0]['_ref']\n    \n    @staticmethod\n    def new_dhcp_reservation(device_name, free_ip, mac=\"00-00-00-00-00-00\"):\n        '''Maps the IP address to the mac address given by fixedaddress'''\n        username, password = Decrypt_Python3.getpassword(device_name)            \n        encoded_text = base64.b64encode(username + ':' + password)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        payload = {\"ipv4addr\": free_ip, \"mac\": mac}\n        url = 'https://' + device_ip + '/wapi/v' + wapi_version + '/fixedaddress'\n        curl_cmd = \"curl -sss -k1 -X POST -H 'Content-Type:application/json' -H 'Authorization:Basic \" + encoded_text + \"' '\" + url + \"' -d '\" + json.dumps(payload) + \"'\"\n        try:\n            return os.popen(curl_cmd).read()            \n        except Exception as e:\n            return \"Error::reserving free ip failed\" + str(e)\n\n    @staticmethod\n    def get_free_ip(device_name, subnet):\n        '''\n        Return a free IP address from the Infoblox device\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -sss  -sss -k1 -u \"{uname}\":\"{pwd}\" -X POST '\\\n                'https://{ip}/wapi/v{wapi_version}/{ref}?'\\\n                '_function=next_available_ip\\&_return_type='\\\n                'json-pretty\\&num=1'.format(\n                    uname=username,\n                    pwd=password,\n                    ip=device_ip,\n                    wapi_version=wapi_version,\n                    ref=Infoblox.get_reference(username, password, device_ip,\n                                               wapi_version, subnet))\n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output)\n        try:\n            return str(json_output['ips'][0])\n        except KeyError as e:\n            return \"Error::No Free IP Available\"\n        \n    @staticmethod\n    def get_extattrdef(device_name, search_by_name=None):\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        url = \"'https://{device_ip}/wapi/v{wapiVersion}/extensibleattributedef?_return_fields=allowed_object_types,name,list_values,type{search_query}'\".format(device_ip=device_ip,\n                                                                        wapiVersion=wapi_version,\n                                                                        search_query=search_by_name and '&name=%s' % search_by_name or '')\n        curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      '{url}'.format(uname=username, pwd=password, url=url)              \n        output = os.popen(curl_command).read()\n        try:\n            return json.loads(output)\n        except (ValueError, KeyError, IndexError):\n            return None \n\n    @staticmethod\n    def get_list_of_subnets(username, password, device_ip, wapi):\n        '''\n        Return list of ipv4 subnets configured on infoblox\n        '''\n        curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET '\\\n                        'https://{ip}/wapi/v{wapi_version}/'\\\n                        'network?_return_type=json-pretty'.format(\n                        uname=username,\n                        pwd=password,\n                        ip=device_ip,\n                        wapi_version=wapi)\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output)\n        logger.info(json_output)\n        return json_output\n\n    @staticmethod\n    def reserve_free_ip(device_name, fqdn, free_ip):\n        '''\n        Reserve a Free IP in Infoblox\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curlCommand = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X POST '\\\n                          'https://{dev_ip}/wapi/v{wapi_version}/record:host?_return_type=json-pretty'\\\n                          ' -d \\'{{\\\"name\\\":\\\"{fqdn_name}\\\",\\\"ipv4addrs\\\":[{{\\\"ipv4addr\\\":\\\"{ip}\\\"}}]'\\\n                          '}}\\''.format(uname=username,\n                                        pwd=password,\n                                        dev_ip=device_ip,\n                                        wapi_version=wapi_version,\n                                        fqdn_name=fqdn,\n                                        ip=free_ip)\n            logger.info(curlCommand)\n        except Exception as e:\n            return \"Error:: Invalid FQDN or data provided\"\n        status, output = subprocess.getstatusoutput(curlCommand)\n        logger.info(output)\n        if output[0] == \"{\" :\n            json_output = json.loads(output)\n            return json_output['text']\n        else :\n            return 'reserved'\n\n    @staticmethod\n    def get_ip_reference(uname, pwd, dIP, wapi_ver, ip):\n        '''\n        Get IP reference\n\n        :param str uname: Username\n        :param str pwd: Password\n        :param str wapi_ver: Device wapi version\n        :param ip: ip address\n        '''\n        curlCommand = 'curl --silent -sss  -k1 -u  \"{uname}\":\"{pwd}\" -X GET https://{device_ip}/wapi/v{wapi_version}/ipv4address?'\\\n                      'ip_address={ip}'.format(uname=uname,\n                                               pwd=pwd,\n                                               device_ip=dIP,\n                                               wapi_version=wapi_ver,\n                                               ip=ip)\n\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output)\n        return json_output[0]['_ref']\n        # return curlCommand\n\n    @staticmethod\n    def unreserve_freeip(device_name, free_ip, action=\"\"):\n        '''\n        Delete all records for that ip and will free the ip\n\n        param str device_name: IPAM Device Name\n        param ip: ip address\n        param str action: String\n        '''\n        encode_text = Decrypt_Python3.getencoded(device_name)\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        ref = Infoblox.get_ip_reference(username, password, device_ip, wapi_version, free_ip)\n\n        curlCommand = 'curl --silent -sss  -sss -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X DELETE '\\\n                      'https://{dev_ip}/wapi/v{wapi_ver}/{reference}'.format(uname=username,\n                                                                             pwd=password,\n                                                                             dev_ip=device_ip,\n                                                                             wapi_ver=wapi_version,\n                                                                             reference=ref)\n\n        curl_command = 'curl --silent -sss  -sss -k1 -H \\\"Authorization:Basic {encode_text}\\\" -H \\\"Content-Type:application/json\\\" -X DELETE '\\\n            'https://{dev_ip}/wapi/v{wapi_ver}/{reference}'.format(uname=username,\n                                                                   pwd=password,\n                                                                   dev_ip=device_ip,\n                                                                   wapi_ver=wapi_version,\n                                                                   encode_text=encode_text,\n                                                                   reference=ref)\n\n        if action == 'associate':\n            status, output = subprocess.getstatusoutput(curlCommand)\n            json_output = json.loads(output)\n            return json_output\n        else:\n            return curl_command\n        \n\n    @staticmethod\n    def get_subnet(device_name, view=None):\n        '''\n        Get available subnets from infoblox\n\n        :param str device_name: IPAM Device Name\n        '''\n        subnet_list = []\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        if not view:\n            view = Infoblox.get_default_dns_view(device_ip, wapi_version, username, password)\n        curlCommand = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      '\\\"https://{dev_ip}/wapi/v{wapi_ver}/network?network_view={view}&_max_results=500&_return_type=json-pretty\\\"'.format(uname=username,\n                                                                         pwd=password,\n                                                                         dev_ip=device_ip,\n                                                                         wapi_ver=wapi_version,\n                                                                         view=view)\n        logger.info(curlCommand)\n        status, output = subprocess.getstatusoutput(curlCommand)\n        try:\n            json_output = json.loads(output)\n            if isinstance(json_output, dict):\n                raise Exception(json_output.get(\"Error\", \"Unknown error in WAPI response  - !\" + str(json_output)))\n            subnet_list = [value['network'] for value in json_output]\n            return subnet_list\n        except ValueError:\n            raise Exception(output)\n    \n    @staticmethod\n    def get_network_view(device_name):\n        '''\n        Get available network views from infoblox\n        \n        :param str device_name: IPAM Device Name\n        '''\n        network_view_list = []\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        curlCommand = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      '\"https://{dev_ip}/wapi/v{wapi_ver}/networkview?_return_type=json-pretty\"'.format(uname=username,\n                                                                         pwd=password,\n                                                                         dev_ip=device_ip,\n                                                                         wapi_ver=wapi_version)\n\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output)\n        network_view_list = [ value['name'] for value in json_output]\n        return network_view_list\n        \n    @staticmethod\n    def get_dns_view(device_name, newtork_view):\n        '''\n        Get available dns views from infoblox\n        \n        :param str device_name: IPAM Device Name\n        '''\n        dns_view_list = []\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        if ' ' in newtork_view :\n            newtork_view = newtork_view.replace(' ', '%20')\n        \n            \n        curlCommand = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      '\"https://{dev_ip}/wapi/v{wapi_ver}/view?network_view={net_view}&_return_type=json-pretty\"'.format(uname=username,\n                                                                         pwd=password,\n                                                                         dev_ip=device_ip,\n                                                                         wapi_ver=wapi_version, net_view=newtork_view)\n\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output)\n        dns_view_list = [ value['name'] for value in json_output]\n        return dns_view_list\n    \n    @staticmethod\n    def get_all_view(device_name):\n        '''\n        Get available dns views from infoblox\n        \n        :param str device_name: IPAM Device Name\n        '''\n        dns_view_list = []\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)        \n            \n        curlCommand = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X GET '\\\n                      'https://{dev_ip}/wapi/v{wapi_ver}/view?_return_type=json-pretty'.format(uname=username,\n                                                                         pwd=password,\n                                                                         dev_ip=device_ip,\n                                                                         wapi_ver=wapi_version)\n\n        status, output = subprocess.getstatusoutput(curlCommand)\n        json_output = json.loads(output)\n        dns_view_list = [ value['name'] for value in json_output]\n        return dns_view_list\n\n    \n    @staticmethod\n    def create_reverse_zone(device_name, subnet, view=None):\n        '''\n        Reserve a Free IP in Infoblox\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        if not view:\n            view = Infoblox.get_default_dns_view(device_ip, wapi_version, username, password)\n        try :\n            curlCommand = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X POST ' \\\n                  'https://{dev_ip}/wapi/v{wapi_version}/zone_auth?_return_type=json-pretty' \\\n                  ' -d \\'{{\\\"fqdn\\\":\\\"{fqdn_name}\\\",\\\"view\\\":\\\"{view}\\\",\\\"zone_format\\\":\\\"IPV4\\\"' \\\n                  '}}\\''.format(uname=username,\n                                        pwd=password,\n                                        dev_ip=device_ip,\n                                        wapi_version=wapi_version,\n                                        fqdn_name=subnet, view=view)\n        except Exception as e:\n            return \"Error:: Invalid FQDN or data provided\"\n        status, output = subprocess.getstatusoutput(curlCommand)\n        try:\n            json_output = json.loads(output)\n            return json_output\n        except Exception as e:\n            return \"Error:: Failed to create reverse zone\"\n            \n\n    @staticmethod\n    def create_ptr_record(device_name, fqdn, free_ip, view=None):\n        '''\n        Reserve a Free IP in Infoblox\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        if not view:\n            view = Infoblox.get_default_dns_view(device_ip, wapi_version, username, password)\n        try:\n            curlCommand = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -H \\\"Content-Type:application/json\\\" -X POST ' \\\n                  'https://{dev_ip}/wapi/v{wapi_version}/record:ptr?_return_type=json-pretty' \\\n                  ' -d \\'{{\\\"ptrdname\\\":\\\"{fqdn_name}\\\",\\\"view\\\":\\\"{view}\\\",\\\"ipv4addr\\\":\\\"{ip}\\\"' \\\n                  '}}\\''.format(uname=username,\n                                        pwd=password,\n                                        dev_ip=device_ip,\n                                        wapi_version=wapi_version,\n                                        fqdn_name=fqdn,\n                                        ip=free_ip, view=view)\n            return curlCommand\n        except Exception as e:\n            return \"Error:: Invalid FQDN or data provided\"\n        status, output = subprocess.getstatusoutput(curlCommand)\n        try:\n            json_output = json.loads(output)\n            return json_output\n        except Exception as e:\n            return \"Error:: Failed to create ptr record  IP\"\n            \n            \n            \n    @staticmethod\n    def get_next_available_ip(device_name, subnet):\n        '''\n        Return a free IP address from the Infoblox device\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/ipv4address?' \\\n               'network={subnet}&status=UNUSED\\''.format(uname=username, pwd=password, ip=device_ip, wapi_version=wapi_version, subnet=subnet)\n\n           \n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        output = os.popen(curl_command)\n        json_output = json.loads(output.read())\n\n        freeip = [json_data[\"ip_address\"]  for  json_data in json_output if json_data[\"status\"] == 'UNUSED' and json_data[\"types\"] == [] ]\n\n        \n        try:\n            return str(freeip[0])\n        except KeyError as e:\n            return \"Error::No Free IP Available\"\n        \n    \n    @staticmethod\n    def is_a_available(device_name, fqdn, ipv4addr, view):\n        '''\n        Return Boolean by availability of host by the given name and view\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/record:a?' \\\n               'name={name}&view={view}&ipv4addr={ipv4addr}\\''.format(uname=username, pwd=password,\n                                                       ip=device_ip, wapi_version=wapi_version,\n                                                       name=fqdn, view=view, ipv4addr=ipv4addr)\n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        output = os.popen(curl_command)\n        json_output = json.loads(output.read())\n        for json_data in json_output:\n            if isinstance(json_data, dict) and json_data.has_key(\"_ref\"):\n                return True\n        return False\n    \n    @staticmethod\n    def is_cname_available(device_name, cname, name, view):\n        '''\n        Return Boolean by availability of cname by the given cname, name and view\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/record:cname?' \\\n               'canonical={cname}&name={name}&view={view}\\''.format(uname=username, pwd=password,\n                                                                     ip=device_ip, wapi_version=wapi_version,\n                                                                     cname=cname, name=name,\n                                                                     view=view)\n\n           \n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        output = os.popen(curl_command)\n        json_output = json.loads(output.read())\n        for json_data in json_output:\n            if isinstance(json_data, dict) and json_data.has_key(\"_ref\"):\n                return True\n        return False\n\n    @staticmethod\n    def list_record_details(device_name, record_type, view, record_name):\n        '''\n        Return json output given record type\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/record:{record_type}?{record_name_key}={record_name_value}&' \\\n               'view={view}{ptr_params}\\''.format(uname=username, pwd=password,\n                                    ip=device_ip, wapi_version=wapi_version, record_type= record_type, view=view,\n                                    record_name_key = 'name' if (record_type != 'ptr') else 'ptrdname',\n                                    ptr_params = '&_return_fields=ipv4addr&_return_fields=ptrdname&_return_fields=view' if (record_type == 'ptr') else '',\n                                    record_name_value = record_name) \n            logger.info(curl_command)        \n        except IndexError as e:\n            logger.error(\"Error::Curl command formation fails\")\n            return \"Error::Curl command formation fails\"\n        try:\n            output = os.popen(curl_command).read()\n            json_output = json.loads(output)\n            if isinstance(json_output, dict) and json_output.has_key(\"Error\"):\n                logger.error(\"Error::\"+json_output.get('text','Error while executing curl command'))\n                return \"Error::\"+json_output.get('text','Error while executing curl command')\n            #output is in string format\n            logger.info(output)\n            return output\n        except:\n            logger.error(\"Error::while executing curl command\")\n            return \"Error::while executing curl command\"\n            \n    @staticmethod\n    def list_record_names(device_name, record_type, view):\n        '''\n        Return json output given record type\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/record:{record_type}?' \\\n               'view={view}\\''.format(uname=username, pwd=password,\n                                    ip=device_ip, wapi_version=wapi_version, record_type= record_type, view=view ) \n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        try:\n            output = os.popen(curl_command).read()\n            json_output = json.loads(output)\n            #Following will return list of record name or empty list \n            return [record_dict.get('name', record_dict.get('ptrdname') ) for record_dict in json_output]\n        except:\n            logger.error(\"Error::while executing curl command\")\n            return \"Error::while executing curl command\"\n            \n    @staticmethod\n    def get_ref_based_on_params(device_name, record_type, data):\n        '''\n        To update the record with given data(json)\n        data :dictionary format of key value params\n        record_type: A,MX,PTR,SRV,CNAME\n        devicename: infoblox device name\n        '''\n        try:\n            username, password = Decrypt_Python3.getpassword(device_name)\n            device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n            data_list = []\n            import copy\n            removed_ref_dict = copy.copy(data)\n            del(removed_ref_dict['_ref'])\n            for key, value in removed_ref_dict.items():\n                data_list.append(str(key)+\"=\"+str(value))\n            data_string = \"&\".join(data_list)\n        \n            curl_command = 'curl -k1 -u \"{uname}\":\"{pwd}\" -H \"Content-Type: application/json\" -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/record:{record_type}'\\\n               '?{data}\\''.format(uname=username, pwd=password, ip=device_ip, wapi_version=wapi_version,\n                                record_type=record_type, data=data_string )\n            logger.info(curl_command)\n        except IndexError as e:\n            logger.error(\"Error::Curl command formation fails\")\n            return \"Error::Curl command formation fails\"\n        \n        try:\n            output = os.popen(curl_command).read()\n            json_output = json.loads(output)\n            if isinstance(json_output, dict) and json_output.has_key(\"Error\"):\n                logger.error(\"Error::\"+json_output.get('text','Error while executing curl command'))\n                return \"Error::\"+json_output.get('text','Error while executing curl command')\n            elif not json_output:\n                logger.error(\"Error::No Records found\")\n                return \"Error::No Records found\"\n            #output is in string format\n            logger.info(output)\n            return str(json_output[0]['_ref'])\n        except:\n            logger.error(\"Error::while executing curl command\")\n            return \"Error::while executing curl command\"    \n        #return curl_command\n        \n    \n    @staticmethod\n    def update_record(device_name, reference, record_type, data, execute_cmd=False):\n        '''\n        To update the record with given data(json)\n        data :dictionary format of key value params\n        record_type: A,MX,PTR,SRV,CNAME\n        devicename: infoblox device name\n        reference: Reference of Record object\n        '''\n        try:\n            username, password = Decrypt_Python3.getpassword(device_name)\n            device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n            data_list = [] \n            for key, value in data.items():\n                data_list.append(str(key)+\"=\"+str(value))\n            data_string = \"&\".join(data_list)\n        \n            curl_command = 'curl -k1 -u \"{uname}\":\"{pwd}\" -X PUT ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/{reference}\\''\\\n               ' -d \\'{data}\\''.format(uname=username, pwd=password, ip=device_ip, wapi_version=wapi_version,\n                                 reference=reference, data=data_string )\n            logger.info(curl_command)\n        except IndexError as e:\n            logger.error(\"Error::Curl command formation fails\")\n            return \"Error::Curl command formation fails\"\n        if execute_cmd:\n            try:\n                output = os.popen(curl_command).read()\n                json_output = json.loads(output)\n                if isinstance(json_output, dict) and json_output.has_key(\"Error\"):\n                    logger.error(\"Error::\"+json_output.get('text','Error while executing curl command'))\n                    return \"Error::\"+json_output.get('text','Error while executing curl command')\n                elif not json_output:\n                    logger.error(\"Error::No Records found\")\n                    return \"Error::No Records found\"\n                #output is in string format\n                logger.info(output)\n                return output\n            except:\n                logger.error(\"Error::while executing curl command\")\n                return \"Error::while executing curl command\"    \n        else:\n            return curl_command\n\n    @staticmethod\n    def is_ns_available(device_name, name, nameserver, view):\n        '''\n        Return Boolean by availability of NS by the given name, nameserver and view\n        supported from Infoblox 8\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        try:\n            curl_command = 'curl --silent -sss  -k1 -u \"{uname}\":\"{pwd}\" -X GET ' \\\n               '\\'https://{ip}/wapi/v{wapi_version}/record:ns?' \\\n               'name={name}&nameserver={nameserver}&view={view}\\''.format(uname=username, pwd=password,\n                                                                     ip=device_ip, wapi_version=wapi_version,\n                                                                     name=name, nameserver=nameserver,\n                                                                     view=view)\n\n           \n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        output = os.popen(curl_command)\n        json_output = json.loads(output.read())\n        for json_data in json_output:\n            if isinstance(json_data, dict) and json_data.has_key(\"_ref\"):\n                return True\n        return False\n\n\n    @staticmethod\n    def get_free_ip_by_exclusion(device_name, subnet, excluded_ip_list):\n        '''\n        Return a free IP address from the Infoblox device\n        '''\n        username, password = Decrypt_Python3.getpassword(device_name)\n        device_ip, wapi_version = Infoblox.get_device_ip(device_name)\n        \n        # sub_string  = \"{\"exclude\": [\"172.21.10.1\", \"172.21.10.2\", \"172.21.10.3\", \"172.21.10.4\", \"172.21.10.5\", \"172.21.10.6\", \"172.21.10.7\", \"172.21.10.8\", \"172.21.10.9\", \"172.21.10.10\", \"172.21.10.11\", \"172.21.10.12\", \"172.21.10.13\", \"172.21.10.14\", \"172.21.10.15\", \"172.21.10.16\", \"172.21.10.17\", \"172.21.10.18\", \"172.21.10.19\", \"172.21.10.20\", \"172.21.10.250\", \"172.21.10.251\", \"172.21.10.252\", \"172.21.10.253\", \"172.21.10.254\"], \"num\": 1}\"\n        try:\n            sub_string = 'https://{ip}/wapi/v{wapi_version}/{ref}?'\\\n                            '_function=next_available_ip\\&_return_type='\\\n                            'json-pretty'.format(\n                            ip=device_ip,\n                            wapi_version=wapi_version,\n                            ref=Infoblox.get_reference(username, password, device_ip, \\\n                                                      wapi_version, subnet))\n        except IndexError as e:\n            return \"Error::Subnet not configured in Infoblox\"\n        a = json.dumps(excluded_ip_list)\n        string = '{\"exclude\": ' + a + ', \"num\": 1}'\n        curl_command = 'curl -H \"'\"Content-Type: application/json\"'\" --silent -sss  -k1 -u ' + username + ':' + password + ' -X POST '\n        curl_command += '-d ' + \"'\" + string + \"' \"\n        curl_command += sub_string\n        status, output = subprocess.getstatusoutput(curl_command)\n        json_output = json.loads(output)\n        try:\n            return str(json_output['ips'][0])\n        except KeyError as e:\n            return \"Error::No Free IP Available\"","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":{"committed":false,"pendingForPushAction":false,"pushActionCompleted":false,"enabledForRemoteRepository":true,"connectedRepo":null},"_id":"DNS_helper","_keywords":["DNS_helper","","Version 2.x"]}