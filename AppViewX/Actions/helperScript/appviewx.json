{"name":"appviewx","scriptType":"Python","scriptContent":"\"\"\"Appviewx mongoDB connection for internal purpose.\"\"\"\nimport os\nimport subprocess\nimport sys\nimport ssl\nimport socket\nimport atexit\nfrom pymongo import MongoClient, ReadPreference\nfrom configobj import ConfigObj\nsys.path.insert(0, AVX::DEPENDENCIES)\nfrom avx_decrypt import decrypt\n\nglobal CONN\n\nCONN = None\n\nPATH = os.path.dirname(os.path.abspath(__file__))\n\n# Conf file parser\nCOMMENT_CHAR = '#'\nOPTION_CHAR = '='\n\n\ndef get_conf_file():\n    \"\"\"Get AppViewX conf file path.\"\"\"\n    conf_file = os.path.abspath(PATH + '/../../conf/appviewx.conf')\n    if os.path.exists(str(conf_file)):\n        return conf_file\n    else:\n        print(\"wrong configuration file\")\n        sys.exit()\n\n\ndef get_db_credentials(is_kubernetes_installed, vault=True):\n    \"\"\"Function to get db credentials from appviewx.properties file.\"\"\"\n    appviewx_properties = ConfigObj(os.path.abspath(PATH + '/../../properties/appviewx.properties'))\n    if is_kubernetes_installed:\n        db_encryptedpassword = '$MONGO_ENCRYPTED_PASSWORD'\n    else:\n        db_encryptedpassword = appviewx_properties['APS_MONGO_ENCRYPTED_PASSWORD']\n\n    db_username = appviewx_properties['APS_MONGO_USERNAME']\n    db_name = appviewx_properties['MONGO_AUTHENTICATION_DB']\n    db_password = decrypt(db_encryptedpassword, vault)\n    return db_username, db_password, db_name\n\n\ndef get_appviewx_properties():\n    \"\"\"Function to get appviewx configurations from appviewx.properties file.\"\"\"\n    appviewx_properties = ConfigObj(os.path.abspath(PATH + '/../../properties/appviewx.properties'))\n    is_vault_enabled = appviewx_properties['IS_VAULT_ENABLED']\n    enable_ssl = appviewx_properties['DB_HTTPS']\n    mongo_db_hosts = appviewx_properties['DATABASE_HOSTS']\n    return is_vault_enabled, enable_ssl, mongo_db_hosts\n\n\ndef get_java_path():\n    \"\"\"Function to get the PATH of java.\"\"\"\n    decrypt_jar_path = os.path.abspath(PATH + '/../../jre/bin/java')\n    if os.path.exists(str(decrypt_jar_path)):\n        return decrypt_jar_path\n    else:\n        print(\"could not locate java\")\n        sys.exit()\n\n\ndef get_conf_content(filename):\n    \"\"\"Function to get the content of configuration file.\"\"\"\n    options = {}\n\n    f_ob = open(filename)\n    dic_key = ''\n    for line in f_ob:\n        line = line.strip('\\n')\n        # First, remove comments:\n        if line.startswith(COMMENT_CHAR):\n            # split on comment char, keep only the part before\n            continue\n            #line, comment = line.split(COMMENT_CHAR, 1)\n        # Second, find lines with an option=value:\n        if OPTION_CHAR in line:\n            # split on option char:\n            option, value = line.split(OPTION_CHAR, 1)\n            # strip spaces:\n            option = option.strip()\n            value = value.strip()\n            # store in dictionary:\n            options[dic_key][option] = list()\n            if dic_key == 'MONGODB' and option == 'HOSTS':\n                options[dic_key][option] = value.split(',')\n            else:\n                options[dic_key][option].append(value)\n        elif line.startswith('[') and line.endswith(']'):\n            dic_key = line[1:-1]\n            options[dic_key] = dict()\n\n    f_ob.close()\n    return options\n\n\ndef is_kubernetes_installed():\n    try:\n        cmd = 'echo $MONGO_ENCRYPTED_PASSWORD'\n        password = subprocess.check_output(cmd, shell=True).decode('utf-8')\n        return bool(password.strip())\n    except Exception as exe:\n        print(exe)\n        sys.exit()\n\n\ndef db_connection():\n    \"\"\"Connect to mongo replicaSet.\"\"\"\n    global CONN\n    kubernetes_installed = is_kubernetes_installed()\n\n    if kubernetes_installed:\n        is_vault_enabled, enable_ssl, mongo_hosts = get_appviewx_properties()\n        mongo_hosts = mongo_hosts.split(',')\n        is_multinode = 'false'\n        enable_ssl = enable_ssl.lower()\n    else:\n        conf_file = get_conf_file()\n        conf_content = get_conf_content(conf_file)\n        is_vault_enabled = conf_content['VAULT']['ENABLE_VAULT'][0]\n        mongo_hosts = conf_content['MONGODB']['HOSTS']\n        is_multinode = conf_content['ENVIRONMENT']['MULTINODE'][0].lower()\n        enable_ssl = conf_content['MONGODB']['ENABLE_SSL'][0].lower()\n    \n    if is_vault_enabled.lower() == 'true':\n        username, password, dbname = get_db_credentials(kubernetes_installed, vault=True)\n    else:\n        username, password, dbname = get_db_credentials(kubernetes_installed, vault=False)\n\n    if is_multinode == 'true':\n        mongo_ip = mongo_hosts[0]\n        mongo_secondary_ips = mongo_hosts[1:]\n\n        try:\n            if enable_ssl == 'true':\n                CONN = MongoClient(\n                    mongo_ip, read_preference=ReadPreference.PRIMARY,\n                    ssl=True, ssl_cert_reqs=ssl.CERT_NONE, replicaset='rpset')\n            else:\n                CONN = MongoClient(mongo_ip, read_preference=ReadPreference.PRIMARY, replicaset='rpset')\n            CONN.admin.authenticate(username, password, source=dbname)\n        except Exception:\n            for mongoip in mongo_secondary_ips:\n                try:\n                    if enable_ssl == 'true':\n                        CONN = MongoClient(\n                            mongoip, read_preference=ReadPreference.PRIMARY,\n                            ssl=True, ssl_cert_reqs=ssl.CERT_NONE, replicaset='rpset')\n                    else:\n                        CONN = MongoClient(mongoip, read_preference=ReadPreference.PRIMARY, replicaset='rpset')\n                    CONN.admin.authenticate(username, password, source=dbname)\n                    break\n                except Exception:\n                    mongo_ip = mongoip\n                    continue\n            else:\n                print('Could not connect to DB')\n                sys.exit(1)\n    else:\n        try:\n            curr_host = socket.gethostbyname(socket.gethostname())\n            host = mongo_hosts[0].replace('localhost', curr_host)\n            if enable_ssl == 'true':\n                CONN = MongoClient(host, ssl=True, ssl_cert_reqs=ssl.CERT_NONE)\n            else:\n                CONN = MongoClient(host)\n            CONN.admin.authenticate(str(username), str(password), source=dbname)\n        except Exception as exe:\n            print(exe)\n            sys.exit()\n    return CONN\n\n\ndef db_close():\n    \"\"\"Function to make sure db connection object is destroyed.\"\"\"\n    if hasattr(CONN, 'close'):\n        CONN.close()\n\natexit.register(db_close)\n","description":"This script is invoked in other helper scripts in order to establish database connection","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"appviewx","_keywords":["appviewx","This script is invoked in other helper scripts in order to establish database connection","Version 2.x"]}