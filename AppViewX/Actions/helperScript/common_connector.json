{"name":"common_connector","scriptType":"Python","scriptContent":"import os\nimport sys\nimport gridfs\nfrom bson import ObjectId\nimport base64\nimport requests\nimport json\nimport Decrypt_Python3 as Decrypt\nimport logger_util\nlogger = logger_util.get_logger('COMMON CONNECTOR')\nimport appviewx\nconn = appviewx.db_connection()\ndb = conn.appviewx\n\n\ndef db_connection():\n    return db\n    \ndef get_credentials(db, device):\n    device_ip = db.device.find_one({\"name\":device}, {\"ip\": 1})[\"ip\"]\n    username = db.device.find_one({\"name\":device})[\"access\"][0][\"userName\"]\n    password = db.device.find_one({\"name\":device})[\"access\"][0][\"password\"]\n    key = db.device.find_one({\"name\":device})[\"access\"][0][\"key\"]\n    password = Decrypt.decyrpt(password,key)\n    return device_ip, username, password\n    \n\ndef write_into_file(db, file):\n    '''\n    write the content into a file into /var/tmp/\n    '''\n    upload_file= str(file)\n    logger.info(str(file))\n    upload_file = upload_file.replace(\"'\",'\"')\n    logger.info(\"***File***\")\n    logger.info(upload_file)\n    json_upload_file= json.loads(upload_file)\n    requestId = json_upload_file['requestId']\n    fieldId = json_upload_file['fieldId']\n    taskId = json_upload_file['taskId']\n    file_name = json_upload_file['fileName']\n    with open('/var/tmp/new_file.pfx', 'wb') as obj_file:\n        field_id = str(db.visualworkflow_request_uploaded_files.files.find_one({'metadata.requestId':requestId,'metadata.fieldId':fieldId,'metadata.taskId':taskId},{'_id':1})['_id'])\n        gfs=gridfs.GridFS(db,collection='visualworkflow_request_uploaded_files')\n        content = gfs.get(ObjectId(field_id)).read()\n        logger.info(str(type(content)))\n        obj_file.write(content)\n    return file_name\n\ndef get_uuid(session_id, gateway_url, gateway_key, certificate_password):\n    encoded_data=\"\"\n    with open('/var/tmp/new_file.pfx', 'rb') as file:\n        content = file.read()\n        logger.info(file)\n        logger.info(type(file))\n        encoded_data = str(base64.b64encode(content.strip()).decode('utf-8'))\n    headers = {'sessionId': session_id, 'Content-Type': 'application/json'}\n    url = gateway_url + 'avxapi/cert-ca-settings-upload-client-auth-certificate?gwkey=' + gateway_key + '&gwsource=external'\n    data = {\n    \"payload\": {\n    \"fileContent\": encoded_data,\n    \"fileName\": \"new_file.pfx\",\n    \"certificateCategory\": \"Client\",\n    \"password\" : str(base64.b64encode(certificate_password.encode(\"utf-8\")).decode(\"utf-8\"))\n    }\n    }\n    logger.info(data)\n    response = requests.post(url, data = json.dumps(data), headers = headers, verify = False)\n    logger.info(response)\n    return response.json().get('response', 'Incorrect Password')\n\n","description":"","readOnly":false,"version":"Version 3.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"common_connector","_keywords":["common_connector","","Version 3.x"]}