{"name":"afm_rule_creation_utils","scriptType":"Python","scriptContent":"import sys\nsys.path.insert(0,AVX::DEPENDENCIES)\nsys.path.insert(0,AVX::HELPER)\n\nimport paramiko\nimport importlib\nimport json\nimport dblayer\nimport Decrypt_Python3\n\nimportlib.reload(dblayer)\nimportlib.reload(Decrypt_Python3)\n\nfrom dblayer.appviewx.device import Device\n\n\ndef return_path():\n    import os\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    return abs_path\n\n\ndef handle_exception(func):\n    def wrapper(*args, **kwargs):\n        try:\n            execution = func(*args, **kwargs)\n            return execution\n        except (dblayer.appviewx.device.DoesNotExist,):\n            if kwargs.get('associate_script'):\n                Configs.json_dumps(error=kwargs.get('error'))\n            else:\n                raise TemplateException('Device name not found')\n    return wrapper\n\n\nclass TemplateException(Exception):\n    pass\n\n\nclass Configs:\n\n    @staticmethod\n    def json_dumps(*args, **kwargs):\n        if args:\n            print(json.dumps(args[0]))\n        else:\n            print(json.dumps(kwargs))\n    \n    @handle_exception\n    def get_device_ip(self, device, associate_script=False, error='Device name not found'):\n        # raise Exception(repr(device))\n        ip_address = Device.objects.get(name=device).ip\n        return ip_address\n\n    @staticmethod\n    def get_device(**kwargs):\n        return Device.objects.filter(**kwargs)\n\n\nclass F5Manager(Configs):\n    connections = {}\n\n    def __init__(self, device, associate_script=False):\n        self.device_ip = self.get_device_ip(device, associate_script)\n        self.username, self.password = Decrypt_Python3.getpassword(device)\n        \n    def establish_connection(self):\n        conn = F5Manager.connections.get(self.device_ip)\n        if not conn:\n            conn = paramiko.SSHClient()\n            conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n            conn.connect(hostname=self.device_ip, username=self.username, password=self.password, allow_agent=False)\n            F5Manager.connections[self.device_ip] = conn\n        return conn\n\n    def execute_cmd(self, conn, command):\n        return list(map(lambda x: x.read().decode(\"utf-8\"), conn.exec_command(command)[1:3]))","description":"Helper script for AFM_Rule_Creation template","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"afm_rule_creation_utils","_keywords":["afm_rule_creation_utils","Helper script for AFM_Rule_Creation template","Version 2.x"]}