{"name":"commandrepoconnectorv2","scriptType":"Python","scriptContent":"import os\nimport json\nfrom configobj import ConfigObj\nimport requests\n\nrequests.packages.urllib3.disable_warnings()\n\npwd = os.path.dirname(os.path.abspath(__file__))\nproperties_path = os.path.join(pwd,\"../../properties/appviewx.properties\")\n\nclass CommandRepositoryExecutionError(Exception):\n    '''\n    raised when a Command repository API call fails\n    '''\n    pass\n\ndef command_repo_connector(session_id,intent,is_prep,form_fields):\n    '''\n    returns the commands for the respective indent\n    Uses command repository API (Get Commands)\n    '''\n    with open(\"/tmp/command_repo\",\"w\") as k:\n        k.write(\"Started command repo\")\n\n    avx_properties = ConfigObj(properties_path)\n    gw_url = avx_properties['GATEWAY_BASE_URL']\n    gw_key = avx_properties['GATEWAY_KEY']\n    gw_url = gw_url if gw_url.endswith('/') else gw_url+\"/\"\n\n    URL = ''\n    with open(\"/tmp/command_repo\",\"w\") as k:\n        k.write(\"is_prep \"+ str(is_prep))\n    if is_prep:\n         URL = '{0}avxapi/generate-commands?gwkey={1}&gwsource=external'.format(gw_url, gw_key)\n    else:\n         URL = '{0}avxapi/generate-commands-and-implement?gwkey={1}&gwsource=external'.format(gw_url, gw_key)\n        \n    payload =   {  \n                \"payload\":\n                            {  \n                              \"intent\":intent, \n                              \"resource\":form_fields[\"device_name\"],\n                              \"attributes\": form_fields\n                            }\n                }\n\n    headers = {'content-type': 'application/json','sessionid': session_id}\n    data = json.dumps(payload)\n    response = requests.post(URL, data=data, headers=headers, verify = False)\n    response_data = response.json()\n    with open(\"/tmp/command_repo\",\"a\") as k:\n        k.write(str(data)+\"\\n\"+str(headers)+\"\\n\"+str(URL))\n        k.write(\"\\ncommand repo response\"+str(response_data))\n    if response_data[\"response\"] and response.status_code == 200:\n        output = {}\n        if is_prep:\n            output['commands'] = [ val[\"command\"] for val in response_data[\"response\"][\"command\"] if val[\"type\"] == \"command\" or val[\"type\"] == \"rest\"]\n            output['data']  = []\n           \n        else:\n            output['data']       =  [ val[\"output\"] for val in response_data[\"response\"][\"logs\"] if val[\"type\"] == \"command\" or val[\"type\"] == \"rest\"]\n            output['commands']   =  [ val[\"command\"] for val in response_data[\"response\"][\"logs\"] if val[\"type\"] == \"command\" or val[\"type\"] == \"rest\"]\n            \n        return output\n    else:\n        raise CommandRepositoryExecutionError(response_data)\n\nif __name__ == '__main__':\n\n    # { \"payload\":{ \"resource\":\"F5-192.168.41.237\", \"intent\":\"modify-ltm-vip_pre\", \"attributes\":{ \"VirtualName\":\"test\", \"PoolName\":\"test1\" } } }\n\n    # print(generate_commands(\"2120568c-94d3-4acf-9928-04ff309782b5\", \"modify-ltm-vip_pre\", VirtualName=\"test\", PoolName=\"test1\", device_name = \"192.168.99.35\" ))\n    print(command_repo_connector(session_id='3e88a5c3-e212-4da0-a74c-37a7de6558a5',intent='modify-ltm-vip_pre', **{\"VirtualName\":\"test\",\"PoolName\":\"test1\",\"device_name\":\"192.168.99.35\"}))\n    pass","description":"commandrepoconnectorv2","readOnly":false,"version":"Version 3.x","historyReferences":["5da08cc509ff0e728708f57b"],"usedHistory":"3946e59ca9c67c5c9de304aa9090a98e","sourceControlSettings":null,"_id":"commandrepoconnectorv2","_keywords":["commandrepoconnectorv2","commandrepoconnectorv2","Version 3.x"]}