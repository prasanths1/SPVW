{"name":"adc_f5_vip_helper","scriptType":"Python","scriptContent":"import sys\nimport json\n\n\n#Import module pymongo\nimport pymongo\nfrom pymongo import MongoClient\n\nimport appviewx\n# connect_db = appviewx.db_connection()\n\ndef get_appviewx_conn():\n    return appviewx.db_connection().appviewx\n\n\ndef fetchDCList():\n    db = get_appviewx_conn()\n    collection = db.device\n    dcList=[]\n    for value in collection.find():\n        try:\n            dcList.append(value['dataCenter'])\n        except:\n            pass\n            \n    dcSet=set(dcList)\n    dcList=list(dcSet)\n    return dcList\n\ndef fetchDGList(dcName):\n    db = get_appviewx_conn()\n    collection = db.device\n    collection1 = db.deviceGroup\n    dgList=[]\n    dgList_final = []\n    for value in collection.find({\"dataCenter\":dcName}):\n        try:\n            dgListforValue=value['deviceGroups']\n        except KeyError:\n            continue\n        for index in range(len(dgListforValue)):\n            dgList.append(dgListforValue[index])\n        for val in dgList:\n            for val1 in collection1.find({\"_id\":val}):\n                dgList_final.append(val1[\"name\"])\n    dgSet=set(dgList_final)\n    dgList=list(dgSet)\n    return dgList\n\ndef fetchLBList(dgName):\n    db = get_appviewx_conn()\n    collection = db.device\n    collection1 = db.deviceGroup\n    dg_group = ''\n    lbList=[]\n    for val in collection1.find({\"name\":dgName}):\n        dg_group = val[\"_id\"]\n    for value in collection.find({'deviceGroups':{'$in':[dg_group]}}):\n        lbList.append(value['name'])\n    lbList.sort()\n    return lbList\n\ndef fetchDeviceID(devicename):\n    db = get_appviewx_conn()\n    collection = db.device\n    for value in collection.find({\"name\": devicename}):\n        op=str(value['_id'])\n    return op\n\n\ndef fetchRuleList(deviceName):\n    db = get_appviewx_conn()\n    collection = db.device\n    deviceid=fetchDeviceID(deviceName)\n    collection = db.me_adc\n    ruleList=[]\n    for value in collection.find({'deviceId':deviceid,\"code\":\"lr\",\"partition\":\"Common\"}):\n        ruleList.append(value['name'])\n    return ruleList\n\ndef fetchProfiles(deviceName,protocol):\n    db = get_appviewx_conn()\n    collection = db.device\n    deviceid=fetchDeviceID(deviceName)\n    collection = db.me_adc\n    profList=[]\n    for value in collection.find({'deviceId':deviceid,'type':protocol,\"code\":\"lpr\",\"partition\":\"Common\"}):\n        profList.append(value['name'])\n    return profList\n\ndef fetchMonitors(deviceName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    monitors=[]\n    deviceid=fetchDeviceID(deviceName)\n    for value in collection.find({\"deviceId\": deviceid,\"code\":\"lm\",\"partition\":\"Common\"}):\n        monitors.append(value['name'])\n    return monitors\n    \ndef fetchCertNames(deviceName):\n    db = get_appviewx_conn()\n    collection = db.certificates\n    certnames=[]\n    deviceid=fetchDeviceID(deviceName)\n    for value in collection.find({'deviceId':{'$in':[deviceid]}}):\n        certnames.append(value['name'])\n    return certnames\n\ndef fetchCertKeyNames(deviceName):\n    db = get_appviewx_conn()\n    collection = db.certificates\n    certkeynames=[]\n    deviceid=fetchDeviceID(deviceName)\n    for value in collection.find({'deviceId':{'$in':[deviceid]}}):\n        certkeynames.append(value['keyId'])\n    return certkeynames\n    \ndef fetchVipNames(deviceName):\n    deviceid=fetchDeviceID(deviceName)\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    VIPnames=[]\n    for value in collection.find({'deviceId':deviceid,\"code\":\"vs\",\"partition\":\"Common\"}):\n        VIPnames.append(value['name'])\n    return VIPnames\n\ndef fetchVipNameswithIPport(deviceName):\n    deviceid=fetchDeviceID(deviceName)\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    VIPnames=[]\n    for value in collection.find({'deviceId':deviceid,\"code\":\"vs\",\"partition\":\"Common\"}):\n        name = value['name']\n        ip = value[\"destinationIp\"]\n        port = value[\"destinationPort\"]\n        temp = name+\" || \"+ip+\":\"+port\n        VIPnames.append(temp)\n    return VIPnames\n    \ndef fetchClientAndServerProf(vipName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    serverProf=[]\n    clientProf=[]\n    serverProf1=[]\n    clientProf1=[]\n    destPort=[]\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        clientProf.append(value['clientprofile'])\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        serverProf.append(value['serverprofile'])\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        destPort.append(value['destinationPort'])\n    collection1=db.me_adc\n    try :\n        clientProf=clientProf[0].split(',')\n        serverProf=serverProf[0].split(',')\n    except IndexError:\n        pass\n    for i in range(len(clientProf)):\n        for value in collection1.find({'name':clientProf[i],\"code\":\"lpr\"}):\n            if value['type']=='client-ssl':\n                clientProf1.append(value['name'])\n    for i in range(len(serverProf)):\n        for value in collection1.find({'name':serverProf[i],\"code\":\"lpr\"}):\n            if value['type']=='server-ssl':\n                serverProf1.append(value['name'])\n    profiles=[]\n    profiles.append(serverProf1)\n    profiles.append(clientProf1)\n    profiles.append(destPort)\n    return profiles\n\ndef fetchClientAndServerProtProf(deviceName,vipName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    serverProf=[]\n    clientProf=[]\n    serverProf1=[]\n    clientProf1=[]\n    destPort=[]\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        clientProf.append(value['clientprofile'])\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        serverProf.append(value['serverprofile'])\n    deviceId=fetchDeviceID(deviceName)  \n    clientProf=clientProf[0].split(',')\n    serverProf=serverProf[0].split(',')\n    collection1=db.lpr\n    for i in range(len(clientProf)):\n        for value in collection1.find({'name':clientProf[i],'deviceId':deviceId}):\n            if value['type']!='client-ssl':\n                clientProf1.append(value['name'])\n    for i in range(len(serverProf)):\n        for value in collection1.find({'name':serverProf[i],'deviceId':deviceId}):\n            if value['type']!='server-ssl':\n                serverProf1.append(value['name'])\n    profiles=[]\n    profiles.append(serverProf1)\n    profiles.append(clientProf1)\n    return profiles\n\n    \ndef fetchProfBasedOnVip(vipName,typee):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    collection1=db.me_adc\n    Prof=[]\n    if(typee=='persist'):\n                \n        for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n            Prof.append(value['persist'])\n    elif(typee=='fallback'):\n        for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n            Prof.append(value['fallback'])\n    elif(typee=='oneconn'):\n        Prof1=[]\n        for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n            temp=value['profiles'][0].split(',')\n            Prof1=Prof1+temp\n        for i in range(len(Prof1)):\n            for value in collection1.find({'name':Prof1[i],\"code\":\"lpr\",\"partition\":\"Common\"}):\n                if (value['type']=='one-connect'):\n                    Prof.append(value['name'])\n\n    elif(typee=='http'):\n        Prof1=[]\n        for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n            temp=value['profiles'][0].split(',')\n            Prof1=Prof1+temp\n        for i in range(len(Prof1)):\n            for value in collection1.find({'name':Prof1[i],\"code\":\"lpr\",\"partition\":\"Common\"}):\n                if value['type']=='http':\n                    Prof.append(value['name'])\n    elif(typee=='ftp'):\n        Prof1=[]\n        for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n            temp=value['profiles'][0].split(',')\n            Prof1=Prof1+temp\n        for i in range(len(Prof1)):\n            for value in collection1.find({'name':Prof1[i],\"code\":\"lpr\",\"partition\":\"Common\"}):\n                if value['type']=='ftp':\n                    Prof.append(value['name'])\n\n    elif(typee=='snat'):\n        Prof=[]\n        for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n            temp=value['snat'].split(',')\n            Prof=Prof+temp\n\n    prof_set=set(Prof)\n    Prof=list(prof_set)\n    return Prof\n    \n    \ndef fetchPoolsBasedonVip(vipName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    #collection1=db.lp\n    Pools=[]\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        temp=value['pool'].split(',')\n        Pools=Pools+temp\n    return Pools\n\ndef fetchMonitorsBasedonPool(poolName):\n    db = get_appviewx_conn()\n    collection=db.me_adc\n    Monitors=[]\n    for value in collection.find({'name':poolName,\"code\":\"lp\",\"partition\":\"Common\"}):\n        temp=value['monitorAll']\n        Monitors=Monitors+temp\n    return Monitors\n\ndef fetchRulesBasedonVip(vipName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    Rules=[]\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        if 'rules' in value.keys():\n            temp=value['rules']\n            Rules=Rules+temp\n    return Rules\n    \ndef fetchMirrorStatus(vipName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    mirr=''\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        mirr=value['mirror']\n    return mirr\n\ndef fetchlbMethod(vipName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    pool=fetchPoolsBasedonVip(vipName)\n    lbm=''\n    for value in collection.find({'name':pool[0],\"code\":\"lp\",\"partition\":\"Common\"}):\n        lbm=value['lbmode']\n    return lbm\n\ndef fetchPoolMembersOfVip(vipName):\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    collection1 = db.me_adc\n    pool=fetchPoolsBasedonVip(vipName)\n    pool_mems=[]\n    pool_mems_list_of_dict=[]\n    for value in collection.find({'name':pool[0],\"code\":\"lp\",\"partition\":\"Common\"}):\n        pool_mems=value['lpm']\n    for i in range(len(pool_mems)):\n        for value in collection1.find({'_id':pool_mems[i],\"code\":\"lpm\"}):\n            member_dict={'pm_ip_addr':value['ip'],'pm_port':value['port'],'ratio':value['ratio'],'status_id':value['state'],'priority':value['priority']}\n            pool_mems_list_of_dict.append(member_dict)\n    return pool_mems_list_of_dict\n    \ndef fetchSourcePort(vipName):\n        \n    db = get_appviewx_conn()\n    collection = db.me_adc\n    srcPort=''\n    for value in collection.find({'name':vipName,\"code\":\"vs\",\"partition\":\"Common\"}):\n        srcPort=value['sourcePort']\n    return srcPort\ndef split_vip(vip_name):\n    temp = vip_name.split(\"||\")[0].rstrip()\n    return temp\n\ndef fetchPriorityGroup(vipName):\n    poolName = fetchPoolsBasedonVip(vipName)\n    db = get_appviewx_conn()\n    collection = db.me_adc\n    priorityGrpstatus = ''\n    for value in collection.find({'name':poolName[0],\"code\":\"lp\"}):\n        priorityGrpstatus = value['priority']\n    return priorityGrpstatus\n\ndef return_path():\n    import os\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    return abs_path\n\ndef create_listofcommands_for_pending_wo(final_list_of_commands,field_id_of_validate_across_workorder):\n    sys.path.insert(0,AVX::DEPENDENCIES)\n    sys.path.insert(0,AVX::HELPER)\n    import pymongo\n    from pymongo import MongoClient\n    import socket\n    db_ip = socket.gethostbyname(socket.gethostname())\n    connect_db = MongoClient(db_ip, 5000)\n    connect_db.admin.authenticate('admin','admin')\n    db = connect_db.workFlowDBEngine\n    dbs = connect_db.appviewx\n    collection =  db.workorder_details\n    collection1 = dbs.apsRequests\n    conflict = 0\n    final = []\n    temp = []\n    for val in collection.find({\"workorder_status\":\"In Progress\"}):\n        temp = []\n        temp = val[\"tasks\"][1][\"task_input\"][\"input_data\"][\"implementation_config\"][\"deviceList\"][0][\"commands\"]\n        for val1 in temp:\n\n            for mem in final_list_of_commands:\n                from_form = mem.split(\" \")\n                from_db = val1.split(\" \")\n                from_form = filter(None, from_form)\n                from_db = filter(None, from_db)\n                if (len(from_db) > 0) and (len(from_form) > 0):\n                    if (from_db[0] == from_form[0]) and (from_form[0] in {\"create\",\"modify\",\"delete\"}):\n                        if len(from_db) > 4 and len(from_form) > 4:\n                            if (from_db[2] == from_form[2]) and (from_db[2] in {\"virtual\",\"pool\",\"rule\",\"snatpool\",\"wideip\",\"server\"}):\n                                # print \"yes\"\n                                if from_db[1] == from_form[1] and from_db[2] == from_form[2] and from_db[3] == from_form[3]:\n                                    for val2 in collection1.find({\"workOrderIds\" : str(val[\"_id\"])}):\n                                        message = \"There is a pending work order with similar object details \\n\\n\"\n                                        r_id = val2[\"requestId\"]+\"\\n\"\n                                        template_name = \"Template : \"+val[\"description\"]+\"\\n\"\n                                        created_by = \"Created by : \"+val[\"created_by\"]+\"\\n\"\n                                        req_id = \"Request ID : \"+r_id+\"\\n\"\n                                        error_str = message+template_name+created_by+req_id+\"Config : \"+val1\n                                        output = {field_id_of_validate_across_workorder : error_str}\n                                        final.append(output)\n                                        print(json.dumps({\"error\":\"Work order with similar object(s) exists\",\"data\":final}))\n                                \n\n                            if (from_db[3] == from_form[3]) and (from_db[3] in {\"persistence\",\"profile\",\"monitor\"}):\n                                if from_db[1] == from_form[1] and from_db[2] == from_form[2] and from_db[3] == from_form[3] and from_db[4] == from_form[4]:\n                                    for val2 in collection1.find({\"workOrderIds\" : str(val[\"_id\"])}):\n                                        message = \"There is a pending work order with similar object details \\n\\n\"\n                                        r_id = val2[\"requestId\"]+\"\\n\"\n                                        template_name = \"Template : \"+val[\"description\"]+\"\\n\"\n                                        created_by = \"Created by : \"+val[\"created_by\"]+\"\\n\"\n                                        req_id = \"Request ID : \"+r_id+\"\\n\"\n                                        error_str = message+template_name+created_by+req_id+\"Config : \"+val1\n                                        output = {field_id_of_validate_across_workorder : error_str}\n                                        final.append(output)\n                                        print(json.dumps({\"error\":\"Work order with similar object(s) exists\",\"data\":final}))\n\n    output = {\"work_order_check\" : \"Success, No Conflicts Found\"}\n    final.append(output)\n    print(json.dumps({\"message\":\"No pending work order(s) exists\",\"data\":final}))\n    return\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"adc_f5_vip_helper","_keywords":["adc_f5_vip_helper","","Version 2.x"]}