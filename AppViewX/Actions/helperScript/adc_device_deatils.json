{"name":"adc_device_deatils","scriptType":"Python","scriptContent":"\n'''\nCreated on 06-Jul-2016\n\n@author: bakthavatchalam.g\n'''\nimport sys\nimport json\nimport itertools\nsys.path.insert(0,AVX::DEPENDENCIES)\nsys.path.insert(0,AVX::HELPER)\nimport appviewx\n# reload(appviewx)\n\nDB_CONN = appviewx.db_connection()\navx_db = DB_CONN.appviewx\nadc_collection = avx_db.me_adc\ndevice_collection = avx_db.device\n\n\ndef get_vendor(json_format=False, field_id='vendor'):\n    \"\"\"Returns the list of vendors from the device collection.\n\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :returns: List of strings or dicts\n    \"\"\"\n    if json_format and not isinstance(field_id, str):\n        return ''\n\n    result = device_collection.find({}, {'vendor': 1}).distinct('vendor') or []\n\n    if not json_format:\n        return result\n    else:\n        return json.dumps([{field_id: vendor} for vendor in result])\n\n\ndef get_data_center(json_format=False, field_id='data_center'):\n    \"\"\"Returns the list of data centers from the device collection.\n\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :returns: List of strings or dicts\n    \"\"\"\n    if json_format and not isinstance(field_id, str):\n        return []\n\n    result = device_collection.find({}, {'dataCenter': 1}).distinct('dataCenter') or []\n\n    if not json_format:\n        return result\n    else:\n        return json.dumps([{field_id: item} for item in result if str(item).strip() not in [\"null\",\"\",\"none\",\"None\"]])\n\n\ndef get_device_group(data_center_name, json_format=False, field_id='device_group'):\n    \"\"\"Returns the list of data groups from the device collection.\n\n    :param str data_center_name: Name of the data center\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :returns: List of strings or dicts\n    \"\"\"\n    if json_format and not isinstance(field_id, str):\n        return []\n\n    try:\n        result = device_collection.find({'dataCenter': data_center_name}, {'deviceGroups': 1})\n        result = list(set(itertools.chain(*[row.get('deviceGroups', []) for row in result])))\n\n        if not json_format:\n            return result or []\n        else:\n            return json.dumps([{field_id: dg} for dg in result])\n    except:\n        return []\n\n\ndef get_device_version(device_name, vendor):\n    \"\"\"Given a device name and vendor, returns its version\n\n    :param str device_name: Name of the device\n    :param str vendor: Name of the vendor\n    :returns str: version of the device\n    \"\"\"\n    result = device_collection.find_one({\"name\": device_name, \"vendor\": vendor})\n    return result and result['version'] or ''\n\n\ndef get_device_id(device_name):\n    \"\"\"Returns the device id given its name\n\n    :param str device_name: Name of the device\n    :returns: Device id\n    \"\"\"\n    try:\n        return str(device_collection.find_one({\"name\": device_name}, {'_id': 1})['_id'])\n    except:\n        return ''\n\n\ndef get_device_ip(device_name):\n    \"\"\"Returns the device ip given its name\n\n    :param str device_name: Name of the device\n    :returns: Device ip\n    \"\"\"\n    try:\n        return str(device_collection.find_one({\"name\": device_name}, {'ip': 1})['ip'])\n    except:\n        return ''\n\n\ndef get_load_balancer_list(vendor=None, version=None, data_center=None, device_group=None, json_format=False, field_id='lb'):\n    \"\"\"Returns the load balancer list\n\n    :param str vendor: Name of the vendor (optional)\n    :param str version: Name of the version (optional)\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :returns: List of strings or dicts\n    \"\"\"\n    if json_format and not isinstance(field_id, str):\n        return []\n\n    device_grp_collection = avx_db.deviceGroup\n    filters = {}\n\n    if vendor:\n        filters['vendor'] = vendor\n    if version:\n        filters['version'] = version\n    if data_center:\n        filters['dataCenter'] = data_center\n\n    if device_group:\n        device_group = device_grp_collection.find_one({\"name\": device_group})\n        if device_group:\n            filters['deviceGroups'] = {'$in': [device_group['_id']]}\n\n    result = list(set(device_collection.find(filters, {'name': 1}).distinct('name') or []))\n    if not json_format:\n        return result\n    else:\n        return json.dumps([{field_id: lb} for lb in result])\n\n\ndef get_vip_list(device_name, json_format=False, field_id=None, vendor='F5' , partition = 'Common'):\n    \"\"\"Given a device name, gets the list of vip under it.\n\n    :param str device_name: Name of the device\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :returns: list of dicts or dicts\n    \"\"\"\n    if not device_name:\n        return []\n\n    device_id = get_device_id(device_name)\n\n    if not device_id:\n        return []\n\n    if vendor in ('Citrix', 'Netscaler'):\n        code = 'citrixvs'\n        result = list(set(adc_collection.find({'deviceId': device_id, 'code': code }, {'name': 1}).distinct('name') or []))\n    elif vendor == 'F5':\n        code = 'vs'\n        result = list(set(adc_collection.find({'deviceId': device_id, 'code': code , 'partition': partition}, {'name': 1}).distinct('name') or []))\n\n    \n\n    if not json_format:\n        return result\n    else:\n        return json.dumps([{field_id: lb} for lb in result])\n\n\ndef get_pool_by_vip(device_id, vip_name, json_format=False, field_id=None, vendor='F5'):\n    \"\"\"Given a device id and vip name, gets the pool of the vip\n\n    :param str device_id: Id of the device\n    :param str vip_name: Name of the virtual server\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :returns: the ltm pool or dict\n    \"\"\"\n\n    if vendor in ('Citrix', 'Netscaler'):\n        result = adc_collection.find_one({'parentName': {'$in': [vip_name]}, \"deviceId\": device_id, \"code\": \"citrixsg\"})\n        if not json_format:\n            return result and result['name'] or ''\n        else:\n            return result and json.dumps([{field_id: result['name']}]) or []\n\n    result = adc_collection.find_one({'name': vip_name, \"deviceId\": device_id, \"code\": \"vs\"})\n\n    if not json_format:\n        return result and result['pool'] or ''\n    else:\n        return result and json.dumps([{field_id: result['pool']}]) or []\n\n\ndef get_pool_members(device_id, pool_name, vendor='F5'):\n    \"\"\"\n    \"\"\"\n    if vendor in ('Citrix', 'Netscaler'):\n        result = adc_collection.find_one({\"deviceId\": device_id, \"code\": \"citrixsg\", \"name\": pool_name})\n        tmp = []\n        if result and result.get('serviceMap'):\n            pool_members = [serv.split('::')[1] for serv in result.get('serviceMap')]\n            for member in pool_members:\n                record = adc_collection.find_one({\"deviceId\": device_id, \"code\": \"citrixsv\", \"name\": member})\n                if record:\n                    tmp.append((record['name'], record['ip'], record['port']))\n        return tmp\n\n\ndef is_pool_used_by_other_vips(device_id, vip_name, pool_name):\n    \"\"\"Given a device id, vip name, pool name, tells if the pool is used by other vips\n\n    :param str device_id: Id of the device\n    :param str vip_name: Name of the virtual server\n    :param str pool_name: name of the pool\n    :returns: True, if pool used by other vip, else False\n    \"\"\"\n    return bool(adc_collection.find_one({\"deviceId\": device_id, \"code\": \"vs\", \"pool\": pool_name, \"name\": {\"$ne\": vip_name}}) or {})\n\n\ndef get_monitors(device_id, pool_name=None, monitor_type=None, json_format=False, field_id=None):\n    \"\"\"Given a device_id, pool_name returns the monitors for the pool\n\n    :param str device_id: Id of the device\n    :param str pool_name: name of the pool (optional)\n    :param str monitor_type: Type of the monitor (optional)\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :returns: list of monitors used by the pool\n    \"\"\"\n\n    filters = {'name': pool_name, \"deviceId\": device_id, \"code\": \"lp\"}\n    if pool_name:\n        filters['name'] = pool_name\n\n    monitors = []\n\n    for value in adc_collection.find(filters):\n        monitors += [monitor.split('/')[-1] for monitor in value['monitorAll'] if monitor]\n\n    if monitor_type:\n        monitors = [monitor for monitor in monitors if get_monitor_type(device_id, monitor) == monitor_type]\n\n    if not json_format:\n        return monitors or []\n    else:\n        return monitors and json.dumps([{field_id: monitor} for monitor in monitors]) or []\n\n\ndef get_pools_by_monitor(device_id, monitor):\n    \"\"\"Given a device_id and monitor , returns the list of pools where the monitor is used\n\n    :param str device_id: Id of the device\n    :param str monitor: Name of the monitor\n    :returns: list of pools\n    \"\"\"\n    pools = []\n    for row in adc_collection.find({\"code\": \"lp\", \"deviceId\": device_id}):\n        for existing_monitor in row['monitorAll']:\n            if existing_monitor.split(\"/\")[-1] == monitor:\n                pools.append(row['name'])\n    return pools\n\n\ndef get_monitor_type(device_id, monitor_name):\n    \"\"\"Given a device_id and monitor_name, returns the type of the monitor\n\n    :param str device_id: Id of the device\n    :param str monitor_name: Name of the monitor\n    :returns: type of the monitor\n    \"\"\"\n    result = adc_collection.find_one({'name': monitor_name, \"deviceId\": device_id, \"code\": \"lm\"})\n    return result and result['type'] or ''\n\n\ndef get_profiles(device_id, vip_name=None, json_format=False, field_id=None):\n    \"\"\"Given a device_id, vip_name returns the list of profiles\n\n    :param str device_id: Id of the device\n    :param str vip_name: name of the vip\n    :param bool json_format: When True, it formats the data as per the Jython needs\n    :param str field_id: When json_format is True, this field is Mandate.\n    :result: List of profile\n\n    \"\"\"\n    filters = {\"deviceId\": device_id, \"code\": \"vs\"}\n\n    if vip_name:\n        filters['name'] = vip_name\n\n    profiles = [prof for row in adc_collection.find(filters) for prof in row['profiles']] or []\n\n    if not json_format:\n        return profiles\n    else:\n        return json.dumps([{field_id: prof} for prof in profiles])\n\n\ndef get_vips_used_by_profile(device_id, profile):\n    \"\"\"Given a device_id and profile name, returns the list of vips where the profile is used\n\n    :param str device_id: Id of the device\n    :param str profile_name: Name of the profile\n    :returns: List of vip names\n    \"\"\"\n    return [row['name'] for row in adc_collection.find({\"deviceId\": device_id, \"code\": \"vs\", \"profiles\": {\"$in\": [profile]}})]\n\n\ndef get_profile_type(device_id, profile):\n    \"\"\"Given a device_id and profile name, returns the type of the profile\n\n    :param str device_id: Id of the device\n    :param str profile: Name of the profile\n    :returns: profile type\n    \"\"\"\n    result = adc_collection.find_one({'name': profile, \"code\": \"lpr\", \"deviceId\": device_id})\n    return result and result['type'] or ''\n\n\ndef main():\n    \"\"\"Entry point for the script\n    \"\"\"\n    '''print get_data_center(json_format=True, field_id='dc')\n    print get_device_group('CGV', True, 'dg')\n    print get_device_id('116')\n    print get_load_balancer_list('F5', 'v11')\n    print get_vendor(True)\n    #print get_load_balancer_list('Citrix')\n    pool = get_pool_by_vip('57873f20e4b0098d8b40ebdb', 'VServer1', vendor='Citrix')\n    pool_members = get_pool_members('57873f20e4b0098d8b40ebdb', pool, vendor='Citrix')\n    print pool\n    print pool_members'''\n    # print (get_device_ip('Citrix_slb_gslb'))\n\nif __name__ == '__main__':\n    main()\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"adc_device_deatils","_keywords":["adc_device_deatils","","Version 2.x"]}