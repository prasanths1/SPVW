{"name":"cert_helper","scriptType":"Python","scriptContent":"#!Python/bin/python\n\nimport os\nimport sys\nimport requests\nimport json\nimport traceback\nimport time\nimport base64\nUSER = 'c3lzdGVt'\nPASSWORD = 'NzRaQjF5b2M4OUcyNDNzbA=='\ncurrent_location = os.path.dirname(os.path.realpath(__file__))\nsys.path.insert(0,current_location+'/../scripts/Commons/')\nfrom configobj import ConfigObj\n\nheader = {\"Content-Type\":\"application/json\"}\n\n\ndef decode_input_pem(data_store):\n\t\"\"\"Decode the encocded request input from user.\"\"\"\n\ttry:\n\t\treturn json.loads(base64.b64decode(data_store))\n\texcept Exception as e:\n\t\traise Exception(\"The encoded text is not valid : \"+str(e))\n\n\ndef get_gwinfo():\n\t'''Parse required data from properties file.'''\n\ttry:\n\t\tconfig = ConfigObj(current_location + '/../../properties/appviewx.properties')\n\n\t\tgwurl=config['GATEWAY_BASE_URL']\n\t\tgwkey=config['GATEWAY_KEY']\n\t\tgwsource=config['SOURCE']\n\n\t\treturn gwurl,gwkey,gwsource\n\texcept Exception as err:\n\n\t\traise Exception\n\n\ndef update_device_status_message(request,status,title,message):\n\t\"\"\"Map Client to Device.\"\"\"\n\tprint(request['vendorAuth']['vendorDetails']['name'],' : ',title,' : ',message)\n\tgwurl, gwkey, gwsource = get_gwinfo()\n\t#gwurl, gwkey, gwsource = 'http://192.168.138.211:5300/','f000ca01','WEB'\n\tapi = 'avxapi/misc-update-device-status-message'\n\turl = gwurl + api + '?gwkey={}&gwsource={}'.format(gwkey, gwsource)\n\tpayload = {\n\t\t\"payload\":{\n\t\t\t\"deviceName\":request['vendorAuth']['vendorDetails']['name'],\n\t\t\t\"statusList\" : [{\n\t\t\t\t\"title\" : title,\n\t\t\t\t\"message\" : message,\n\t\t\t\t\"status\" : status,\n\t\t\t\t\"timeStamp\" : int(time.time()*1000.0)\n\t\t\t}]\n\t\t}\n\t}\n\traw_response = requests.post(url, data=json.dumps(payload), headers=header, verify=False)\n\tif raw_response.status_code != 200:\n\t\tprint('cannot update device status message : '+str(raw_response.text))\n\n\ndef trigger_push_to_client_cert(device_name):\n\tgwurl, gwkey, gwsource = get_gwinfo()\n\tapi_url = gwurl.rstrip('/') +'/avxapi/cert-gateway-push-client-cert?gwkey=' + gwkey + '&gwsource=' + gwsource\n\tpayload = {'payload':{'device':{'name':device_name}}}\n\theaders = {'sessionid':get_system_user_session_id(),'Content-Type': 'application/json'}\n\traw_response = requests.post(api_url,headers=headers,data=json.dumps(payload),verify=False)\n\tif int(raw_response.status_code) != 200:\n\t\traise Exception(\"{} : {}\".format(raw_response.status_code,raw_response.reason))\n\n\ndef get_system_user_session_id():\n\t\"\"\"Method to get the session-id.\"\"\"\n\tgwurl, gwkey, gwsource = get_gwinfo()\n\tapi_url = gwurl.rstrip('/')+'/avxapi/acctmgmt-perform-login?gwkey='+gwkey+'&gwsource=' + gwsource\n\tuser = base64.b64decode(USER.encode()).decode()\n\tpassword = base64.b64decode(PASSWORD.encode()).decode()\n\n\theaders = {'username': user,'password': password,'Content-Type': 'application/json'}\n\ttry:\n\t\tresponse = requests.post(api_url,headers=headers,data='{}',verify=False)\n\t\tif int(response.status_code) == 429:\n\t\t\treturn None\n\t\tresponse = json.loads(response.text)\n\t\treturn response[\"response\"][\"sessionId\"]\n\texcept:\n\t\traise Exception('Cannot get Session Id')\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"cert_helper","_keywords":["cert_helper","","Version 2.x"]}