{"name":"cert_iis_client_cert_post_push","scriptType":"Python","scriptContent":"#!Python/bin/python\n\nimport os\nimport sys\nimport requests\nimport json\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\nfrom OpenSSL import crypto\nfrom cryptography import x509\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cert_helper import *\nimport re\nimport traceback\nimport pfx_to_pem as ptp\n\npolicy = {\n\t\"POWERSHELL\" : 1,\n\t\"WMI\" : 2\n}\nheader = {\"Content-Type\":\"application/json\"}\ncert_start_tag = \"BEGIN CERTIFICATE\"\ncert_end_tag = 'END CERTIFICATE'\n\n\ndef delete_client_certificate(request, pem_file, thumbprints):\n\t\"\"\"Delete Client Certificate.\"\"\"\n\tapi = '/rest/RemoveCertificateFromStore'\n\tagent_url = request['vendorAuth'][\"agentUrl\"] + api\n\tselected_policy = request['vendorAuth'][\"vendorDetails\"]['anythingElse']['windowsGateway']['type']\n\tpayload = {\n\t\t'policy' : policy[selected_policy],\n\t\t'CertificateHash' : thumbprints\n\t}\n\traw_response = requests.post(agent_url, data=json.dumps(payload), headers=header, verify=False, cert=pem_file)\n\tif raw_response.status_code != 200 or raw_response.text != 'true':\n\t\traise Exception(\"{} : {}\".format(raw_response.status_code,raw_response.reason))\n\n\ndef map_client_device(request):\n\t\"\"\"Map Client to Device.\"\"\"\n\tgwurl, gwkey, gwsource = get_gwinfo()\n\tapi = 'avxapi/map-default-client-cert-to-device'\n\turl = gwurl + api + '?gwkey={}&gwsource={}'.format(gwkey, gwsource)\n\tpayload = {\"payload\":{\"deviceName\":request['vendorAuth']['vendorDetails']['name']}}\n\traw_response = requests.put(url, data=json.dumps(payload), headers=header, verify=False)\n\tif raw_response.status_code != 200:\n\t\traise Exception(raw_response.text)\n\ndef get_client_certificate_instance(pem_file):\n\t\"\"\"Get Cert Details.\"\"\"\n\tdata = open(pem_file, \"rb\").read()\n\tcert = crypto.load_certificate(crypto.FILETYPE_PEM, data)\n\treturn cert\n\ndef get_thumbprint(cert):\n\t\"\"\"get signature algorithm.\"\"\"\n\treturn cert.digest(\"sha1\").decode(\"utf-8\").replace(':','')\n\n\ndef get_all_thumbprints(pem_file):\n\tpem_content = open(pem_file).read()\n\tcert_started,certificate,contents,thumbprints = False,[],[],[]\n\n\tfor line in pem_content.split('\\n'):\n\t\tif cert_start_tag in line:\n\t\t\tcert_started = True\n\t\t\tcertificate.append(line)\n\t\telif cert_started and cert_end_tag in line:\n\t\t\tcert_started = False\n\t\t\tcertificate.append(line)\n\n\t\t\tcontents.append('\\n'.join(certificate))\n\t\t\tcertificate = []\n\t\telif cert_started:\n\t\t\tcertificate.append(line)\n\n\tfor content in contents:\n\t\tcert = crypto.load_certificate(crypto.FILETYPE_PEM, content)\n\t\tthumbprints.append(get_thumbprint(cert))\n\treturn thumbprints\n\n\ndef is_delete_same_client_cert(request, pem_file):\n\t\"\"\"Checks same certificate or not.\"\"\"\n\tpushed_client_cert_thumbprint = request['certificate'][\"extension\"]['thumbPrint'].replace(':','')\n\tclient_cert = get_client_certificate_instance(pem_file)\n\tclient_auth_cert_thumbprint = get_thumbprint(client_cert)\n\tthumbprints_to_delete = get_all_thumbprints(pem_file)\n\treturn pushed_client_cert_thumbprint.lower() == client_auth_cert_thumbprint.lower(), thumbprints_to_delete\n\nif __name__ == '__main__':\n\trequest = sys.argv[1]\n\ttry:\n\t\trequest = decode_input_pem(request)\n\t\tpem_file = ptp.pfx_2_pem(request)\n\t\tsame_cert,thumbprints_to_delete = is_delete_same_client_cert(request, pem_file)\n\t\tif same_cert:\n\t\t\tsys.exit(1)\n\t\telse:\n\t\t\tdelete_client_certificate(request, pem_file, thumbprints_to_delete)\n\t\t\tupdate_device_status_message(request,'Success','Client certificate : Delete shipped client certificate','shipped client certificate deleted from Machine\\'s certificate store')\n\t\t\tmap_client_device(request)\n\t\t\tupdate_device_status_message(request,'Success','Client certificate : Switch authentication to default client certificate','Device will use default client certificate for further communication')\n\t\t\tprint('AppResponseCode:0')\n\texcept Exception as e:\n\t\tupdate_device_status_message(request,'Failure','Client certificate : Post push process','Problem in client certificate post push : '+str(e))\n\t\ttraceback.print_exc()\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"cert_iis_client_cert_post_push","_keywords":["cert_iis_client_cert_post_push","","Version 2.x"]}