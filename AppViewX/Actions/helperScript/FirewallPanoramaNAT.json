{"name":"FirewallPanoramaNAT","scriptType":"Python","scriptContent":"import sys\nimport traceback\nimport logger_util\n\nsys.path.insert(0,AVX::HELPER)\nsys.path.insert(0,AVX::DEPENDENCIES)\n\nlogger = logger_util.get_logger(\"Firewall Panorama NAT\")\n\n'''\nThis task is to create the NAT Object in the Panorama Device\n#FIXME: Prevalidation and Postvalidation to be done\n#FIXME: if no input received fro the boolean flags, then the device property is set to 'no'\n'''\n\nclass FirewallPanoramaNAT(object):\n\n    @classmethod\n    def clean_input_data(self,input_dict):\n        logger.info(\"Input Received Before clean : \"+str(input_dict))\n\n        input_dict[\"name\"] = self.handle_strip(input_dict['name'])\n        input_dict[\"device_group\"] = self.handle_strip(input_dict['device_group'])\n        input_dict[\"from\"] = self.handle_strip(input_dict['from'])\n        input_dict[\"to\"] = self.handle_strip(input_dict['to'])        \n        input_dict[\"active_active_device_binding\"] = self.handle_strip(input_dict['active_active_device_binding'])        \n        input_dict[\"description\"] = self.handle_strip(input_dict['description'])        \n        input_dict[\"nat_type\"] = self.handle_strip(input_dict['nat_type'])        \n        input_dict[\"service\"] = self.handle_strip(input_dict['service'])\n        input_dict[\"to_interface\"] = self.handle_strip(input_dict['to_interface'])\n        input_dict[\"destination\"] = self.handle_strip(input_dict['destination'])\n        input_dict[\"destination_translation_translated_address\"] = self.handle_strip(input_dict['destination_translation_translated_address'])\n        input_dict[\"destination_translation_translated_port\"] = self.handle_strip(input_dict['destination_translation_translated_port'])\n        input_dict[\"source\"] = self.handle_strip(input_dict['source'])        \n        input_dict[\"source_translation_translated_address\"] = self.handle_strip(input_dict['source_translation_translated_address'])\n              \n        input_dict['device_name'] = self.handle_strip(input_dict['device_name'])\n        input_dict['operation_type'] = self.handle_strip(input_dict['operation_type'])\n        \n        logger.info(\"Input Received After clean : \"+str(input_dict))\n\n    #FIXME: Only generic validation available, specific to vendor to be added\n    @classmethod\n    def validate_input_data(self,input_dict):\n        logger.info(\"Validating the Input Data\")\n        status = True\n\n        status = status and self.mandatory_string_validation(input_dict['name'],\"name\",True)        \n        status = status and self.mandatory_string_validation(input_dict['device_group'],\"device_group\",True)        \n        status = status and self.mandatory_string_validation(input_dict['source'],\"source\",True)        \n        status = status and self.mandatory_string_validation(input_dict['destination'],\"destination\",True)                \n        status = status and self.mandatory_string_validation(input_dict['device_name'],\"device_name\",True)                \n\n        if not status:\n            logger.info(\"INPUT VALIDATION FAILED\")\n        else:\n            logger.info(\"INPUT VALIDATION SUCCESS\")\n\n        return status\n\n    @classmethod\n    def validation_fail_output(self):\n        output = {}\n        output[\"status\"] = \"failed\"\n        output[\"message\"] = \"Validation failed\"\n        logger.info(\"output : \"+str(output))\n        return output\n\n    def __init__(self, input_dict):\n        logger.info(\"Creating Object with input :\"+str(input_dict))\n\n        self.name = input_dict[\"name\"]\n        self.device_group = input_dict[\"device_group\"]\n        self.fromm = input_dict[\"from\"]\n        self.to = input_dict[\"to\"]\n        self.active_active_device_binding = input_dict[\"active_active_device_binding\"]\n        self.description = input_dict[\"description\"]\n        self.is_disabled = input_dict[\"is_disabled\"]\n        self.nat_type = input_dict[\"nat_type\"]\n        self.service = input_dict[\"service\"]       \n        self.to_interface = input_dict[\"to_interface\"]\n        self.destination = input_dict[\"destination\"]\n        self.destination_translation_translated_address = input_dict[\"destination_translation_translated_address\"]\n        self.destination_translation_translated_port = input_dict[\"destination_translation_translated_port\"]\n        self.source = input_dict[\"source\"]\n        self.is_source_translation_static_ip_bi_directional = input_dict[\"is_source_translation_static_ip_bi_directional\"]\n        self.source_translation_translated_address = input_dict[\"source_translation_translated_address\"]\n        \n        self.device_name = input_dict['device_name']\n        self.is_rollback = input_dict['is_rollback']\n        self.rollback_input = input_dict['rollback_input']\n        self.is_deferred = input_dict['is_deferred']\n\n        self.operation_type = input_dict['operation_type']\n\n    def get_input_dict(self):\n        output = {}\n\n        output[\"name\"] = self.name\n        output[\"device_group\"] = self.device_group\n        output[\"from\"] = self.fromm\n        output[\"to\"] = self.to\n        output[\"active_active_device_binding\"] = self.active_active_device_binding\n        output[\"description\"] = self.description\n        output[\"is_disabled\"] = self.is_disabled\n        output[\"nat_type\"] = self.nat_type\n        output[\"service\"] = self.service\n        output[\"to_interface\"] = self.to_interface\n        output[\"destination\"] = self.destination\n        output[\"destination_translation_translated_address\"] = self.destination_translation_translated_address\n        output[\"destination_translation_translated_port\"] = self.destination_translation_translated_port\n        output[\"source\"] = self.source\n        output[\"is_source_translation_static_ip_bi_directional\"] = self.is_source_translation_static_ip_bi_directional\n        output[\"source_translation_translated_address\"] = self.source_translation_translated_address\n        \n        output['device_name'] = self.device_name\n        output['is_rollback'] = self.is_rollback\n        output['rollback_input'] = self.rollback_input\n        output['is_deferred'] = self.is_deferred\n\n        output['operation_type'] = self.operation_type\n\n        return output\n        \n    def create(self):\n        logger.info(\"Creation Started\")\n        try:\n            if self.is_deferred:\n                return self.create_deferred()\n            else:\n                return self.create_immediate()\n        except Exception as exception:\n            output = {}\n            error_trace = traceback.format_exc()\n            logger.info(\"error_trace :\"+str(error_trace))\n            output[\"status\"] = \"failed\"\n            output[\"error\"] = str(exception)\n            output[\"error_trace\"] = str(error_trace)\n            return output\n    # FIXME: support not provided now\n    def create_immediate(self):\n        logger.info(\"Create Immediate not supported\")\n        return {\"status\":\"failed\",\"message\":\"not supported\"}\n\n    def create_deferred(self):\n        output_commands = []\n        command = \"set device-group \"+self.device_group+\" pre-rulebase nat \"\n\n        command = self.extend_command_with_given_input(\"rules\",self.name,command)\n\n        command = self.extend_command_with_given_input(\"from\",self.fromm,command)\n        command = self.extend_command_with_given_input(\"to\",self.to,command)\n        command = self.extend_command_with_given_input(\"active-active-device-binding\",self.active_active_device_binding,command)\n        if self.description:\n            command += \"description '\"+self.description+\"' \"\n        logger.info(\"command :\"+str(command))\n        command += \"disabled \"+(\"yes\" if self.is_disabled else \"no\")+\" \"\n        command = self.extend_command_with_given_input(\"nat-type\",self.nat_type,command)\n        command = self.extend_command_with_given_input(\"service\",self.service,command)\n        command = self.extend_command_with_given_input(\"to-interface\",self.to_interface,command)\n        command = self.extend_command_with_given_input(\"destination\",self.destination,command)\n\n        if self.destination_translation_translated_address or self.destination_translation_translated_port:\n            command += \" destination-translation \"\n            if self.destination_translation_translated_address:\n                command = self.extend_command_with_given_input(\"translated-address\",self.destination_translation_translated_address,command)\n            if self.destination_translation_translated_port:\n                command = self.extend_command_with_given_input(\"translated-port\",self.destination_translation_translated_port,command)\n\n        output_commands.append(command)\n\n        if self.source or self.is_source_translation_static_ip_bi_directional or self.source_translation_translated_address:\n            command = \"set device-group \"+self.device_group+\" pre-rulebase nat \"\n            command = self.extend_command_with_given_input(\"rules\",self.name,command)\n            \n            command = self.extend_command_with_given_input(\"source\",self.source,command)\n            if self.is_source_translation_static_ip_bi_directional != None or self.source_translation_translated_address:\n                command += \" source-translation static-ip \"\n                if self.is_source_translation_static_ip_bi_directional != None:\n                    command += \"bi-directional \"+(\"yes\" if self.is_source_translation_static_ip_bi_directional else \"no\")+\" \"\n                if self.source_translation_translated_address:\n                    command = self.extend_command_with_given_input(\"translated-address\",self.source_translation_translated_address,command)\n            output_commands.append(command)\n\n        output = {}\n        output[\"status\"] = \"success\"\n        output[\"commands\"] = output_commands\n        output[\"rollback\"] = self.get_input_dict()\n        return output\n\n    def extend_command_with_given_input_string(self,key,value,command):\n        if value:\n            command += key+\" \"+value+\" \"\n        return command\n\n    def extend_command_with_given_input_list(self,key,list_value,command):\n        if list_value:\n            command += key+\" [\"\n            for value in list_value:\n                command += \" \"+value+\" \"\n            command += \"] \"\n        return command\n\n    def extend_command_with_given_input(self,key,list_value,command):\n        if type(list_value).__name__==\"str\":\n            return self.extend_command_with_given_input_string(key,list_value,command)\n        elif type(list_value).__name__==\"list\":\n            return self.extend_command_with_given_input_list(key,list_value,command)\n        else:\n            return command\n    \n    def delete(self):\n        logger.info(\"Deletion Started\")\n        try:\n            if self.is_deferred:\n                return self.delete_deferred()\n            else:\n                return self.delete_immediate()\n        except Exception as exception:\n            output = {}\n            error_trace = traceback.format_exc()\n            logger.info(\"error_trace :\"+str(error_trace))\n            output[\"status\"] = \"failed\"\n            output[\"error\"] = str(exception)\n            output[\"error_trace\"] = str(error_trace)\n            return output\n\n\n    def delete_immediate(self):\n        logger.info(\"Delete Immediate not supported\")\n        return {\"status\":\"failed\",\"message\":\"not supported\"}\n\n    def delete_deferred(self):\n        output_commands = []\n        command = \"delete device-group \"+self.device_group+\" pre-rulebase nat \"\n\n        if self.name:\n            command += \"rules \"+self.name+\" \"\n        output_commands.append(command)\n        output = {}\n        output[\"status\"] = \"success\"\n        output[\"commands\"] = output_commands\n        return output\n\n\n# FIXME: Prevalidation functionality to be added\n    @classmethod\n    def carry_out_pre_validation_activity_for_tabular_input(self, input_dict):\n        activity_output = []\n        output_dict = {}\n        output_dict['device_name'] =  input_dict['device_name']\n        output_dict['operation_type'] =  input_dict['operation_type']\n        output_dict['data'] = []\n        output_dict['commands'] = [\"show device-group \" +input_dict['device_group']+\" pre-rulebase nat rules \"+input_dict['name']]\n        activity_output.append(output_dict)\n       \n        return activity_output\n\n# FIXME: PostValidation functionality to be added\n    \n    def carry_out_post_validation_activity_for_tabular_input(self):\n        activity_output = []\n        output_dict = {}\n        output_dict['device_name'] = self.device_name\n        output_dict['operation_type'] = self.operation_type\n        output_dict['data'] = []\n        output_dict['commands'] = [\"show device-group \" +self.device_group+\" pre-rulebase nat rules \"+self.name]\n        activity_output.append(output_dict)\n        return activity_output\n\n    # FIXME: Partial Rollback functionality to be added\n    \n    def generate_partial_rollback_commands(self, rollback_input):\n        activity_output = []\n        for rollback_dict in rollback_input:\n            \n            output_dict = {}\n            output_dict['device_name'] = rollback_dict['device_name']\n            output_dict['operation_type'] = rollback_dict['operation_type']\n            output_dict['data'] = []\n            if rollback_dict['operation_type'] == \"create\":\n                output_dict['commands'] = self.delete_deferred()['commands']\n            elif rollback_dict['operation_type'] == \"delete\":\n                output_dict['commands'] = self.create_deferred()['commands']\n            else:\n                output_dict['commands'] = []\n            activity_output.append(output_dict)\n        return activity_output\n\n\n\n\n    @classmethod\n    def handle_strip(self,input):\n        if type(input).__name__ == 'str':\n            return input.strip() if (input!=None and input!='') else input\n        return input\n\n    @classmethod\n    def mandatory_string_validation(self,input,key,is_error_update):\n        output = input != None and input != ''\n        if not output and is_error_update:\n            logger.info(key + \" Validation Failed with \"+str(input))    \n        return output","description":"FirewallPanoramaNAT","readOnly":false,"version":"Version 3.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"FirewallPanoramaNAT","_keywords":["FirewallPanoramaNAT","Version 3.x"]}