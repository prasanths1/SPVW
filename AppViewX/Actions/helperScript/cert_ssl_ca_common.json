{"name":"cert_ssl_ca_common","scriptType":"Python","scriptContent":"import sys\nsys.path.insert(0,AVX::DEPENDENCIES)\nfrom appviewx import db_connection\nfrom bson.objectid import ObjectId\nimport base64\nimport os\nfrom Decrypt_Python3 import decyrpt\npath = os.path.dirname(os.path.abspath(__file__)) + '/../../'\n\ndef get_string(dict_map, key):\n    if dict_map and key in dict_map.keys():\n        return str(dict_map[key])\n    return \"\"\n    \ndef get_list(dict_map, key):\n    if key in dict_map.keys():\n        return dict_map[key]\n    return []\n\ndef get_group_names(roles):\n    \n    db = db_connection().appviewx\n    \n    query = { \"role\": { \"$in\" : roles }, \"permission\":{ \"$regex\" : \":RW\"}}\n    roleCertificateGroupCursor = db.roleCertificateGroup.find(query)\n    \n    groupNames = list()\n    for roleCertificateGroup in roleCertificateGroupCursor:\n        groupNames.append({\"certGroup\": get_string(roleCertificateGroup, \"groupName\")})\n        \n    return groupNames\n    \n    \n\ndef get_roles(username):\n    \n    db = db_connection().appviewx\n    \n    user = db.user.find_one({\"loginName\":str(username)})\n    \n    roles = list()\n    \n    for role in user[\"roles\"]:\n        roles.append(role)\n    \n    return roles\n    \n    \n    \ndef get_certificate_types(group_name, certificate_authority):\n    \n    db = db_connection().appviewx\n    \n    '''\n    get policy name from certificateGroup\n    '''\n    certificate_group = db.certificateGroup.find_one({\"name\":group_name})\n\n    #if !certificate_group and \"policyName\" not in certificate_group.keys():\n        #return []\n    certificate_policy_name = certificate_group[\"policyName\"]\n    \n    '''\n    get Certificate types from Policy\n    '''\n    certificate_policy = db.certificatePolicy.find_one({\"name\":certificate_policy_name})\n    all_certificate_types = certificate_policy[\"certificatePolicyCADetails\"][\"caTypeName\"]\n    \n    \n    filtered_certificate_types = list()\n    for certificate_type in all_certificate_types:\n        if str(certificate_type).startswith(certificate_authority):\n            filtered_certificate_types.append({\"certificateType\":certificate_type.replace(certificate_authority+' ', '')})\n            \n    return filtered_certificate_types\n    \ndef get_certificate_types_comodo(group_name, certificate_authority):\n    \n    db = db_connection().appviewx\n    \n    '''\n    get policy name from certificateGroup\n    '''\n    certificate_group = db.certificateGroup.find_one({\"name\":group_name})\n\n    #if !certificate_group and \"policyName\" not in certificate_group.keys():\n        #return []\n    certificate_policy_name = certificate_group[\"policyName\"]\n    \n    '''\n    get Certificate types from Policy\n    '''\n    certificate_policy = db.certificatePolicy.find_one({\"name\":certificate_policy_name})\n    all_certificate_types = certificate_policy[\"certificatePolicyCADetails\"][\"caTypeName\"]\n    prefixes = [\"Comodo Certificate Manager EliteSSL Certificate\", \n                \"Comodo Certificate Manager Instant SSL Certificate\", \n                \"Comodo Certificate Manager PlatinumSSL Certificate\", \n                \"Comodo Certificate Manager PlatinumSSL Wildcard Certificate\", \n                \"Comodo Certificate Manager Comodo Unified Communications Certificate\", \n                \"Comodo Certificate Manager Multi-Domain Instant SSL Certificate\"]\n    filtered_certificate_types = list()\n    cert_com=list()\n    for certificate_type in all_certificate_types:\n        if str(certificate_type).startswith(certificate_authority):\n            #filtered_certificate_types.append({\"certificateType\":certificate_type})\n            cert_com.append(certificate_type)\n    \n    for words in cert_com[:]:\n        if str(words).startswith(\"Comodo Certificate Manager\"):\n             cert_com.remove(words)\n             \n    for cert_type in cert_com:         \n              filtered_certificate_types.append({\"certificateType\":cert_type.replace(certificate_authority+' ', '')})\n    \n            \n    return filtered_certificate_types\n    \n    \ndef add_list_to_dictionary(dictonary ,key, values):\n    for value in values:\n        dictonary.append({key:value})\n\n \ndef get_all_bit_lengths(group_name, certificate_authority, certificate_type):\n    \n    db = db_connection().appviewx\n    \n    '''\n    get policy name from certificateGroup\n    '''\n    certificate_group = db.certificateGroup.find_one({\"name\":group_name})\n    certificate_policy_name = certificate_group[\"policyName\"]\n    \n    '''\n    get CSR parameters from Policy\n    '''\n    certificate_policy = db.certificatePolicy.find_one({\"name\":certificate_policy_name})\n    csr_parameters_from_policy = certificate_policy[\"certPolicyCsrParameter\"]\n    \n    csr_parameters = list()\n    \n    connector_name_prefix = certificate_authority\n    if certificate_type != '':\n        connector_name_prefix += \" \" + certificate_type\n    \n    \n    all_bit_lengths = certificate_policy[\"certificatePolicyCADetails\"][\"keyLength\"]\n    \n    return all_bit_lengths\n\n    \n    \ndef get_csr_parameters_from_policy(group_name, certificate_authority, certificate_type, category, username):\n    \n    db = db_connection().appviewx\n    \n    '''\n    get policy name from certificateGroup\n    '''\n    certificate_group = db.certificateGroup.find_one({\"name\":group_name})\n    certificate_policy_name = certificate_group[\"policyName\"]\n    \n    '''\n    get CSR parameters from Policy\n    '''\n    certificate_policy = db.certificatePolicy.find_one({\"name\":certificate_policy_name})\n    csr_parameters_from_policy = certificate_policy[\"certPolicyCsrParameter\"]\n    \n    csr_parameters = list()\n    \n    connector_name_prefix = certificate_authority\n    if certificate_type != '':\n        connector_name_prefix += \" \" + certificate_type\n    connector_name_new_prefix=connector_name_prefix.rstrip().replace(\"-\",\" \")\n    csr_parameters.append({\"connectorName\": connector_name_new_prefix + \" connector\" })\n    csr_parameters.append({\"commonName\": get_string(csr_parameters_from_policy, 'commonName') })\n    csr_parameters.append({\"subjectAlternativeNames\": \",\".join(get_list(csr_parameters_from_policy,'subjectAlternativeNames')) })\n    csr_parameters.append({\"organization\": get_string(csr_parameters_from_policy,'organization') })\n    csr_parameters.append({\"organizationUnit\": get_string(csr_parameters_from_policy,'organizationUnit') })\n    csr_parameters.append({\"locality\": get_string(csr_parameters_from_policy,'locality') })\n    csr_parameters.append({\"state\": get_string(csr_parameters_from_policy,'state') })\n    csr_parameters.append({\"country\":  get_string(csr_parameters_from_policy,'country') })\n    csr_parameters.append({\"type\": get_string(csr_parameters_from_policy, 'type')})\n    \n    if category == 'Client':\n        mailAddress = get_user_mail_address(username)\n        csr_parameters.append({\"userMailAddress\": mailAddress })\n    else:\n        mailAddress = \",\".join(get_list(csr_parameters_from_policy,'mailAddress'))\n        csr_parameters.append({\"mailAddress\": mailAddress })\n    \n    all_bit_lengths = certificate_policy[\"certificatePolicyCADetails\"][\"keyLength\"]\n    all_key_types = certificate_policy[\"certificatePolicyCADetails\"][\"keyType\"]\n    \n    add_list_to_dictionary(csr_parameters, \"hashFunction\", certificate_policy[\"certificatePolicyCADetails\"][\"shaType\"])\n    \n    return csr_parameters, all_bit_lengths, all_key_types\n    \n    \n    \n    \ndef get_ca_settings_names(certificate_authority, certificate_category):\n    \n    db = db_connection().appviewx\n    \n    find_query = {\"certificateAuthority\" : certificate_authority, \"certificateCategories\":certificate_category}\n    \n    caSettingsCursor = db.intermediateCASettings.find(find_query)\n    \n    caSettingName = list()\n    for caSetting in caSettingsCursor:\n        caSettingName.append({ \"caSettingName\" : caSetting[\"name\"] })\n\n    return caSettingName    \n    \n    \ndef encode(value):\n    \n    return base64.encodestring(value.encode('ascii')).rstrip()\n\ndef decode(value):\n    if \"b''\" in str(value):\n        return \"\"\n    else:\n        return base64.decodestring(value.encode('ascii')).rstrip()\n    \n\ndef get_certificate_uuids(certificate_authority, certificate_type):\n    \n    db = db_connection().appviewx\n    \n    find_query = { \"certificateAuthority\" : certificate_authority }\n    \n    if certificate_type != '':\n        find_query[\"certificateType\"] = certificate_type.replace(certificate_authority+ \" \", \"\")\n    \n    ca_connector_info_cursor = db.caConnectorInfo.find(find_query)\n\n    certificate_uuids = list()\n    for ca_connector_info in ca_connector_info_cursor:\n        if ca_connector_info.get(\"certificateUuid\") != None:\n            certificate_uuids.append(ca_connector_info[\"certificateUuid\"])\n        \n    return certificate_uuids\n\n\n\ndef get_common_names_for_cert_renew(group_name, certificate_authority, certificate_type,category='Server'):\n    \n    db = db_connection().appviewx\n    \n    certificate_uuids = get_certificate_uuids(certificate_authority, certificate_type)\n    \n    find_query = {\n        \"group.name\": group_name,\n        \"uuid\":{\"$in\":certificate_uuids},\n        \"status\":{\"$nin\":[\"New Certificate\",\"Revoked\"]},\n        \"avxStatus\": \"Managed\",\n        \"category\" : get_filter_by_category_query(category)\n    }\n    certificate_cursor = db.certificate.find(find_query)\n    get_ca_settings_names(certificate_authority, category)\n    common_name_and_serial_number = list()\n    for certificate in certificate_cursor:\n        common_name_and_serial_number.append({ \"commonName\" : certificate[\"commonName\"] + ';' + certificate[\"serialNumber\"] })\n    \n    return common_name_and_serial_number\n\n\n\ndef get_connector_details_for_renew(common_name_and_serial_number):\n    \n    db = db_connection().appviewx\n    \n    certificate_details = common_name_and_serial_number.split(';')\n    \n    certificate = db.certificate.find_one({\"commonName\":certificate_details[0], \"serialNumber\":certificate_details[1]}, {\"uuid\":1})\n    \n    ca_connector_info = db.caConnectorInfo.find_one({\"certificateUuid\" : certificate[\"uuid\"]})\n    \n    connector_details = list()\n    \n    connector_details.append({ \"connectorName\" : get_string(ca_connector_info,\"name\") })\n    connector_details.append({ \"description\" : get_string(ca_connector_info,\"description\") })\n    connector_details.append({ \"caSettingName\" : get_string(ca_connector_info,\"caSettingName\") })\n    \n    csr_parameters = ca_connector_info[\"csrParameters\"]\n    connector_details.append({ \"keyType\" : get_string(csr_parameters,\"keyType\") })\n    connector_details.append({ \"bitLength\" : get_string(csr_parameters,\"bitLength\") })\n    connector_details.append({ \"subjectAlternativeNames\" : \",\".join(get_list(csr_parameters,'subjectAlternativeNames')) })\n    connector_details.append({ \"organization\" : get_string(csr_parameters,\"organization\") })\n    connector_details.append({ \"organizationUnit\" : get_string(csr_parameters,\"organizationUnit\") })\n    connector_details.append({ \"locality\" : get_string(csr_parameters,\"locality\") })\n    connector_details.append({ \"state\" : get_string(csr_parameters,\"state\") })\n    connector_details.append({ \"country\" : get_string(csr_parameters,\"country\") })\n    connector_details.append({ \"mailAddress\" : get_string(csr_parameters,\"mailAddress\") })\n    connector_details.append({ \"hashFunction\" : get_string(csr_parameters,\"hashFunction\") })    \n    connector_details.append({ \"postalCode\": get_string(csr_parameters,\"postalCode\") })\n    connector_details.append({ \"streetAddress\": get_string(csr_parameters,\"streetAddress\") })\n    \n    challenge_password = decrypt_challenge_password(csr_parameters)\n    connector_details.append({ \"encryptedChallengePassword\" :  challenge_password })\n    connector_details.append({ \"confirmPassword\" :  challenge_password })\n    \n    '''\n    Adding vendor specific details\n    '''\n    if \"vendorSpecificDetails\" in ca_connector_info.keys():\n        for key in ca_connector_info[\"vendorSpecificDetails\"].keys():\n            connector_details.append({ key : ca_connector_info[\"vendorSpecificDetails\"][key] })\n    \n    return connector_details\n    \n\n\ndef get_common_names_for_cert_reissue(group_name, certificate_authority, certificate_type,category='Server'):\n    \n    db = db_connection().appviewx\n    \n    certificate_uuids = get_certificate_uuids(certificate_authority, certificate_type)\n    \n    find_query = {\n        \"group.name\": group_name,\n        \"uuid\":{\"$in\":certificate_uuids},\n        \"status\":{\"$nin\":[\"New Certificate\",\"Revoked\"]},\n        \"avxStatus\": \"Managed\",\n        \"category\" : get_filter_by_category_query(category)\n    }\n    certificate_cursor = db.certificate.find(find_query)\n    get_ca_settings_names(certificate_authority, category)\n    common_name_and_serial_number = list()\n    for certificate in certificate_cursor:\n        common_name_and_serial_number.append({ \"commonName\" : certificate[\"commonName\"] + ';' + certificate[\"serialNumber\"] })\n    \n    return common_name_and_serial_number\n    \n    \n    \ndef get_connector_details_for_reissue(common_name_and_serial_number):\n    \n    db = db_connection().appviewx\n    \n    certificate_details = common_name_and_serial_number.split(';')\n    \n    certificate = db.certificate.find_one({\"commonName\":certificate_details[0], \"serialNumber\":certificate_details[1]}, {\"uuid\":1})\n    \n    ca_connector_info = db.caConnectorInfo.find_one({\"certificateUuid\" : certificate[\"uuid\"]})\n    \n    connector_details = list()\n    \n    connector_details.append({ \"connectorName\" : get_string(ca_connector_info,\"name\") })\n    connector_details.append({ \"description\" : get_string(ca_connector_info,\"description\") })\n    connector_details.append({ \"caSettingName\" : get_string(ca_connector_info,\"caSettingName\") })\n    connector_details.append({ \"validityInDays\" : ca_connector_info.get(\"validityInDays\",0)/365 })\n    \n    csr_parameters = ca_connector_info[\"csrParameters\"]\n    connector_details.append({ \"keyType\" : get_string(csr_parameters,\"keyType\") })\n    connector_details.append({ \"bitLength\" : get_string(csr_parameters,\"bitLength\") })\n    connector_details.append({ \"subjectAlternativeNames\" : \",\".join(get_list(csr_parameters,'subjectAlternativeNames')) })\n    connector_details.append({ \"organization\" : get_string(csr_parameters,\"organization\") })\n    connector_details.append({ \"organizationUnit\" : get_string(csr_parameters,\"organizationUnit\") })\n    connector_details.append({ \"locality\" : get_string(csr_parameters,\"locality\") })\n    connector_details.append({ \"state\" : get_string(csr_parameters,\"state\") })\n    connector_details.append({ \"country\" : get_string(csr_parameters,\"country\") })\n    connector_details.append({ \"mailAddress\" : get_string(csr_parameters,\"mailAddress\") })\n    connector_details.append({ \"userMailAddress\" : get_string(csr_parameters,\"mailAddress\") })\n    connector_details.append({ \"hashFunction\" : get_string(csr_parameters,\"hashFunction\") })    \n    connector_details.append({ \"postalCode\": get_string(csr_parameters,\"postalCode\") })\n    connector_details.append({ \"streetAddress\": get_string(csr_parameters,\"streetAddress\") })\n    \n    challenge_password = decrypt_challenge_password(csr_parameters)\n    connector_details.append({ \"encryptedChallengePassword\" :  challenge_password })\n    connector_details.append({ \"confirmPassword\" :  challenge_password })\n    \n    '''\n    Adding vendor specific details\n    '''\n    if \"vendorSpecificDetails\" in ca_connector_info.keys():\n        for key in ca_connector_info[\"vendorSpecificDetails\"].keys():\n            if str(key) == 'orderId':\n                connector_details.append({\"orderId\":get_certificate_order_id(certificate[\"uuid\"])})\n            else:\n                connector_details.append({ key : ca_connector_info[\"vendorSpecificDetails\"][key] })\n                                \n    if 'orderId' not in ca_connector_info[\"vendorSpecificDetails\"].keys():\n        connector_details.append({\"orderId\":get_certificate_order_id(certificate[\"uuid\"])})\n        \n    return connector_details\n    \n    \n    \ndef get_ca_connector_info(common_name_and_serial_number):\n    db = db_connection().appviewx\n    certificate_details = common_name_and_serial_number.split(';')\n    certificate = db.certificate.find_one({\"commonName\":certificate_details[0], \"serialNumber\":certificate_details[1]}, {\"uuid\":1})\n    return db.caConnectorInfo.find_one({\"certificateUuid\" : certificate[\"uuid\"]})\n    \n\n\ndef get_certificate_uuid(common_name_and_serial_number):\n    \n    db = db_connection().appviewx\n    \n    certificate_details = common_name_and_serial_number.split(';')\n    \n    certificate = db.certificate.find_one({\"commonName\":certificate_details[0], \"serialNumber\":certificate_details[1]}, {\"uuid\":1})\n    \n    return certificate[\"uuid\"]\n\n\ndef get_array_from_string(value):\n    \n    if value != '':\n        return value.split(\",\")\n    return []\n    \n    \ndef decrypt_challenge_password(csr_parameters):\n    if get_string(csr_parameters, 'encryptedChallengePassword') != '':\n        output=decyrpt(csr_parameters['encryptedChallengePassword'], csr_parameters['decryptionKey'])\n\n        return decode(output)\n    else:\n        return ''\n        \n\n\ndef get_filter_by_category_query(category):\n    \n    query = { '$ne' : 'Client' }\n    if category == 'Client':\n        query = 'Client'\n    \n    return query    \n    \n    \ndef get_user_mail_address(username):\n    \n    db = db_connection().appviewx\n    \n    user = db.user.find_one({\"loginName\":str(username)})\n    \n    return get_string(user,'email')\n    \n    \n\ndef get_certificate_categories(certificate_categories):\n    \n    if certificate_categories == 'Client':\n        return ['Client']\n    else:\n        return ['Server','Client']\n\n\ndef get_ca_names():\n    \n    db = db_connection().appviewx\n    \n    find_query = {}\n    \n    caNamesCursor = db.caSpecification.find(find_query)\n    \n    certificateAuthority = list()\n    for caName in caNamesCursor:\n        certificateAuthority.append({ \"certificateAuthority\" : caName[\"name\"] })\n\n    return certificateAuthority\n\n    \ndef get_scriptedCa_names():\n    \n    db = db_connection().appviewx\n    \n    find_query = {\"scriptedCA\" : True}\n    \n    scriptedcaNamesCursor = db.caSpecification.find(find_query)\n    \n    certificateAuthority = list()\n    for scriptedcaName in scriptedcaNamesCursor:\n        certificateAuthority.append({ \"certificateAuthority\" : scriptedcaName[\"name\"] })\n\n    return certificateAuthority\n    \n    \ndef get_certificate_order_id(certificate_uuid):\n    \n    certificate_order = db_connection().appviewx.certificateOrder.find_one({\"certificateUuid\":certificate_uuid})\n    \n    return get_string(certificate_order, \"orderId\")\n    \n    \n\ndef get_value(list_of_dict, key):\n    filtered = filter(lambda detail: detail.has_key(key), list_of_dict)\n    return filtered[0].get(key,\"\") if filtered and len(filtered) == 1 else \"\"\n    \n\ndef get_values(list_of_dict, key):\n    filtered = list()\n    for dic in list_of_dict:\n        if dic.has_key(key):\n            filtered.append(dic.get(key))\n    return filtered\n\n\ndef add_list_to_dict_without_duplicate(response_dict, key, values_to_add):\n    value_in_certificate = get_value(response_dict, key)\n    \n    if value_in_certificate in values_to_add:\n        values_to_add.remove(value_in_certificate)\n        \n    add_list_to_dictionary(response_dict , key, values_to_add)\n\n\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"cert_ssl_ca_common","_keywords":["cert_ssl_ca_common","","Version 2.x"]}