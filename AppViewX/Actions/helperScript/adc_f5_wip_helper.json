{"name":"adc_f5_wip_helper","scriptType":"Python","scriptContent":"import logger_util\nlogger = logger_util.get_logger('wip helper - F5')\n\ndef get_pool_name_parameter(wip_pool_list, lb_method):\n    \"\"\"Function return the pool name in string format\"\"\"\n    pool_names_str=\" \" \n    for each_pool in wip_pool_list:\n        if lb_method ==\"ratio\":\n            pool_names_str += each_pool[\"wip_pool_name\"]+' '+' { ratio '+each_pool[\"wip_pool_ratio\"]+' }' + ' '\n        else:\n            pool_names_str += each_pool[\"wip_pool_name\"]+' '\n    return pool_names_str \n\n\ndef operation_wide_ip(version, Form_dict, purpose = \"Implementation\"):\n    '''Create\\delete\\list wideip using vip pools'''\n    if purpose == \"Implementation\":\n        pool_list = [pool['wip_pool_name'] for pool in Form_dict[\"pools_pm_tab\"]]\n        pool_list = list(set(pool_list))\n        wip_pool_name = str1 = ' '.join(pool_list)\n        # wip_pool_name = get_pool_name_parameter(Form_dict[\"pools_pm_tab\"], Form_dict[\"wip_lb\"])\n        if version == 'v12':\n\n            cmd = 'create gtm wideip a ' + Form_dict[\"wip_name\"] + ' { pools add { '+ wip_pool_name +' } '\n        else:\n            cmd = 'create gtm wideip ' + Form_dict[\"wip_name\"] + ' { pools add { '+ wip_pool_name +' } '\n        if Form_dict[\"wip_alias\"]:\n            cmd += ' aliases add { ' + Form_dict[\"wip_alias\"] + ' } '\n        if Form_dict[\"wip_persistence\"] ==\"enabled\":\n            cmd += ' persistence enabled ttl-persistence '+Form_dict[\"ttl\"]+' }'\n        else:\n            cmd += ' persistence disabled }'\n        cmd = [cmd]\n    elif purpose == \"delete\":\n        if version == 'v12':\n            cmd = ['delete gtm wideip a ' + Form_dict[\"wip_name\"]]\n        else:\n            cmd = ['delete gtm wideip ' + Form_dict[\"wip_name\"]]\n    else:\n        cmd = []\n        if version == 'v12':\n            cmd.append('list gtm wideip a ' + Form_dict[\"wip_name\"])\n            cmd.append('show gtm wideip a ' + Form_dict[\"wip_name\"])\n        else:\n            cmd.append('list gtm wideip ' + Form_dict[\"wip_name\"])\n            cmd.append('show gtm wideip ' + Form_dict[\"wip_name\"])\n    return cmd\n\n\ndef operation_topology_record(region_list, purpose = \"Implementation\"):\n    cmd = []\n    for val in region_list:\n        if purpose == \"Implementation\":\n            cmd.append('create gtm topology ldns: region '+val[\"region_list\"]+' server: pool '+val[\"region_pool\"]+' score '+val[\"region_score\"])\n        elif purpose == \"delete\":\n            cmd.append('delete gtm topology ldns: region '+val[\"region_list\"]+' server: pool '+val[\"region_pool\"])\n        else:\n            cmd.append('list gtm topology ldns: region '+val[\"region_list\"]+' server: pool '+val[\"region_pool\"])\n    return cmd\n\n\ndef get_monitor_parameter(monitor_list, pool_name):\n    mon_string = \" \"\n    for each_mon in monitor_list:\n        if each_mon['monitor_pool_name'] == pool_name:\n            mon_string += each_mon[\"list_health_mon\"]+\" and \"\n    if len(mon_string) > 2:\n        mon_string=mon_string[:-4]\n    return mon_string\n\n\ndef operation_wip_servers(Form_dict, purpose = \"Implementation\"):\n    '''Create\\Delete\\list wip servers to associate '''\n    cmd =[]\n    server_name =[]\n    for val in Form_dict[\"pools_pm_tab\"]:  \n        #Handled space in the gtm server\n        if val['pool_member_type'] == 'Generic Host':\n            server_gtm_name = '\"'+val[\"gh_gtm_server\"]+'\"' if \" \" in  val[\"gh_gtm_server\"].strip() else val[\"gh_gtm_server\"]\n        if val['pool_member_type'] == 'Generic Host' and purpose == \"Implementation\":           \n            cmd.append('modify gtm server '+ server_gtm_name +' virtual-servers add { '+ val['generic_host_ip'] +' { destination '+val['generic_host_ip']+':'+val['generic_host_port'] +' } }')\n        elif val['pool_member_type'] == 'Generic Host' and purpose == \"delete\":\n            cmd.append('modify gtm server '+ server_gtm_name +' virtual-servers delete { '+ val['generic_host_ip'] +' }')\n        elif val['pool_member_type'] == 'Generic Host' and purpose == \"list\":               \n            cmd.append('show gtm server ' + server_gtm_name)\n            cmd.append('list gtm server ' + server_gtm_name)\n    cmd = list(set(cmd))\n    return cmd\n\n\ndef operation_gtm_pool(version, Form_dict, purpose = \"Implementation\"):\n    '''Create\\Delete\\list wip pool'''\n    cmd = []\n    pool_lb_method = Form_dict[\"pm_preferred\"]\n    pool_list = [pool['wip_pool_name'] for pool in Form_dict[\"pools_pm_tab\"]]\n    pool_list = list(set(pool_list))\n    pool_command = ''\n    gh_pool_member_pool_combo = {}\n    ex_pool_member_pool_combo = {}\n    for pool_name in pool_list:\n        if purpose == \"Implementation\":\n            if version == 'v12':\n                pool_command = 'create gtm pool a '+pool_name+' load-balancing-mode '+Form_dict[\"wip_lb\"]\n                logger.info(pool_command)\n            else:\n                pool_command = 'create gtm pool '+pool_name+' load-balancing-mode '+Form_dict[\"wip_lb\"]\n                logger.info(pool_command)\n            pool_command += ' members add { '\n            pool_members = ''\n            for pool in Form_dict['pools_pm_tab']:\n                if pool_name == pool['wip_pool_name'] and pool['pool_member_type'] == 'Generic Host':\n                    pool_members += pool['gh_gtm_server']+':'+pool['generic_host_ip']+' '\n                gh_pool_member_pool_combo[pool_name] = pool_members\n                if pool_name == pool['wip_pool_name'] and pool['pool_member_type'] == 'Existing VIP':\n                    pool_members += pool['pm_vip']+' '\n                ex_pool_member_pool_combo[pool_name] = pool_members\n            gh_pool_member_pool_combo.update(ex_pool_member_pool_combo)\n            for key, value in gh_pool_member_pool_combo.items():\n                if key == pool_name and pool_name in pool_command:\n                    pool_command += value\n            pool_command += ' }'\n            if Form_dict['associate_mon'] == 'Yes':\n                mon_cmd = ' monitor '\n                mon_cmd += get_monitor_parameter(Form_dict['pm_monitor_list'], pool_name)\n                pool_command += mon_cmd\n            cmd.append(pool_command)\n\n        elif purpose == \"delete\":\n            if version == 'v12':\n                cmd.append('delete gtm pool a '+pool_name)\n            else:\n                cmd.append('delete gtm pool '+pool_name)\n        else:\n            if version == 'v12':\n                cmd.append('list gtm pool a '+pool_name)\n                cmd.append('show gtm pool a '+pool_name)\n            else:\n                cmd.append('list gtm pool '+pool_name)\n                cmd.append('show gtm pool '+pool_name)\n    return cmd\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"adc_f5_wip_helper","_keywords":["adc_f5_wip_helper","","Version 2.x"]}