{"name":"createWipHelper","scriptType":"Python","scriptContent":"import sys\nimport json\n\n# Import module pymongo\n\nimport pymongo\n\n\nfrom pymongo import MongoClient\n\ndef fetchDGList():\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection = db.adc_device_group\n    dgList = []\n    for value in collection.find():\n        dgList.append(value['name'])\n    dgSet = set(dgList)\n    dgList = list(dgSet)\n    return dgList\n\ndef fetch_pools_based_on_wip(wip):\n    pool_names = []\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection = db.me_adc\n    for val in collection.find({\"name\":wip,\"code\":\"gw\"}):\n        try:\n            pools = val[\"gp\"]\n            for val1 in pools:\n                pool_names.append(val1.split(\"@\")[-1])\n            break\n        except KeyError:\n            pass\n    return pool_names\n\n\ndef fetchSyncGroupList(dgname):\n    '''\n    returns sync group list, considers device group as input and returns the intersecting sync groups\n    '''\n    import appviewx\n    # reload(appviewx)\n    dev_list_in_device_group = []\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    dev_grp_id = db.adc_device_group.find_one({'name': dgname}, {'_id': 1})['_id']\n    # dev_list_in_device_group = [device['syncGroup'] for device in db.device.find({'deviceGroups': dev_grp_id},{'syncGroup':1})]\n    for device in db.device.find({'deviceGroups': dev_grp_id}):\n        try:\n            dev_list_in_device_group.append(device['syncGroup'])\n        except KeyError:\n            pass\n\n    if dev_list_in_device_group :\n        return list(set(dev_list_in_device_group))\n    else:\n        return [\"No sync-group match found for the selected device group\"]\n\n\ndef fetchDeviceList(field_id='dev_select'):\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    final_list = []\n    lb_list = [{field_id: device['name']} for device in db.device.find({\"deviceType\":\"GTM\",\"haActive\" : \"Active\",\"status\" : \"Managed\",\"version\" :{ \"$in\": [\"v11\",\"v12\"] } })]\n    if lb_list:\n        print (json.dumps(lb_list))\n    else:\n        print (json.dumps([{field_id: 'No device found'}]))\n\n    \ndef fetchServerList(devname):\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection = db.me_adc\n    collection1 = db.device\n    serverList = []\n    dev_id=''\n    for value in collection1.find({'name':devname}):\n        try :\n            dev_id=str(value['_id'])\n            break\n        except KeyError:\n            pass\n\n    for val in collection.find({'deviceId':dev_id,\"code\":\"gs\",\"type\":{\"$in\":[\"bigip\",\"redundant-bigip\"]}}):\n        try :\n            serverList.append(val['name'])\n        except KeyError :\n            pass\n    #serverSet = set(serverList)\n    #serverList = list(serverSet)\n    return serverList\n\ndef fetchServerListbigip(devname):\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection = db.me_adc\n    collection1 = db.device\n    serverList = []\n    dev_id=''\n    for value in collection1.find({'name':devname}):\n        try :\n            dev_id=str(value['_id'])\n            break\n        except KeyError:\n            pass\n\n    for val in collection.find({'deviceId':dev_id,\"code\":\"gs\",\"type\":{\"$in\":[\"bigip\",\"redundant-bigip\"]}}):\n        try :\n            serverList.append(val['name'])\n        except KeyError :\n            pass\n    #serverSet = set(serverList)\n    #serverList = list(serverSet)\n    return serverList\n    \n    \ndef fetchDatacenterList(devname):\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection = db.me_adc\n    collection1 = db.device\n    dcList = []\n    dev_id=''\n    for value in collection1.find():\n        if(value['name']==devname):\n            dev_id=value['_id']\n            break\n    for val in collection.find({\"code\":\"gdc\"}):\n        if(str(val['deviceId'])==str(dev_id)):\n            dcList.append(val['name'])\n    dcSet = set(dcList)\n    dcList = list(dcSet)\n    return dcList\n\ndef fetchDeviceID(devicename):\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection = db.device\n    for value in collection.find({\"name\": devicename}):\n        op=str(value['_id'])\n    return op\n\ndef fetchMonitors(deviceName):\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection = db.me_adc\n    monitors=[]\n    deviceid=fetchDeviceID(deviceName)\n    for value in collection.find({\"deviceId\": deviceid,\"code\":\"gm\"}):\n        monitors.append(value['name'])\n    return monitors    \n    \ndef fetchMembers(devname,mem_type):\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    db = connect_db.appviewx\n    collection1 = db.device\n    dcList = []\n    dev_id=''\n    for value in collection1.find():\n        if(value['name']==devname):\n            dev_id=value['_id']\n            break\n    if(mem_type=='Datacenter'):\n        collection =db.me_adc\n        dcList=[]\n        for val in collection.find({\"code\":\"gdc\"}):\n            if(str(val['deviceId'])==str(dev_id)):\n                dcList.append(val['name'])\n        dcSet = set(dcList)\n        dcList = list(dcSet)\n        return dcList\n    elif(mem_type=='Pool'):\n        collection = db.me_adc\n        poolList=[]\n        for val in collection.find({\"code\":\"gp\"}):\n            if(str(val['deviceId'])==str(dev_id)):\n                poolList.append(val['name'])\n        poolSet = set(poolList)\n        poolList = list(poolSet)\n        return poolList\n    elif(mem_type=='Region'):\n        collection = db.me_adc\n        regionList=[]\n        for val in collection.find({\"code\":\"gtr\"}):\n            if(str(val['deviceId'])==str(dev_id)):\n                regionList.append(val['name'])\n        regionSet = set(regionList)\n        regionList = list(regionSet)\n        return regionList\n    else:\n        return 0\n\ndef fetch_dependency_list(device_name):\n    \"\"\"Returns all the server:virtual_server combination of the given device_id\n    \"\"\"\n    import appviewx\n    # reload(appviewx)\n    connect_db = appviewx.db_connection()\n    collection = connect_db.appviewx.me_adc\n    vs_dependency = []\n    device_id = fetchDeviceID(device_name)\n    try :\n        for gs in collection.find({\"deviceId\":device_id,\"code\":\"gs\"}):\n            for gs_dict in gs[\"gvsInfo\"]:\n                vs_dependency.append(gs[\"name\"]+\":\"+gs_dict[\"name\"].split(\"(\")[-1].replace(\")\",\"\"))\n    except KeyError :\n        pass\n    return vs_dependency\n\n\ndef fetch_wip_name_list(device_name):\n    \"\"\"Return list of wip names\n    \"\"\"\n    import appviewx\n    # reload(appviewx)\n    try:\n        connect_db = appviewx.db_connection()\n        collection = connect_db.appviewx.me_adc\n        device_id = fetchDeviceID(device_name)\n        wip_list = [val['name']for val in collection.find({'deviceId' : device_id, 'code': 'gw'},\n                                                            {'name': 1}) if val.has_key('name')]\n        return sorted(wip_list, key=lambda s: s.lower())\n    except Exception as e:\n        return str(e)\n        \ndef monitor_cmd_creation(icmp_count,name,interval,timeout):\n    \"\"\"\n    Genrating monitor creation command for ICMP\n    \n    \"\"\"\n    if icmp_count == 0 :\n        return 'create gtm monitor gateway-icmp ' +name+'_gateway_icmp { interval ' +interval+' timeout '+timeout+' defaults-from gateway_icmp}'\n    else:\n        return 'create gtm monitor gateway-icmp ' +name+'_gateway_icmp_'+str(icmp_count)+' { interval ' +interval+' timeout '+timeout+' defaults-from gateway_icmp}'\n        \n\ndef pool_cmd_creation(pool_name,ipport,pool_lb_method,pool_alt_mode,pool_fallback_mode,fallback_ip):\n    \"\"\"\n    Generating pool creation commands\n    \n    \"\"\"\n    try:\n        if pool_fallback_mode=='fallback-ip':\n            return 'create gtm pool '+pool_name+' members add { ' +ipport + '} load-balancing-mode '+pool_lb_method+' alternate-mode '+pool_alt_mode+' fallback-mode '+pool_fallback_mode+' fallback-ipv4 '+ fallback_ip\n        else:\n            return 'create gtm pool '+pool_name+' members add { ' +ipport + '} load-balancing-mode '+pool_lb_method+' alternate-mode '+pool_alt_mode+' fallback-mode '+pool_fallback_mode\n    except Exception as e:\n        return \"Error\"\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"createWipHelper","_keywords":["createWipHelper","","Version 2.x"]}