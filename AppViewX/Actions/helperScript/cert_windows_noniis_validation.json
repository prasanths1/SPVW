{"name":"cert_windows_noniis_validation","scriptType":"Python","scriptContent":"#!Python/bin/python\n\"\"\"Validation of the target machine\"\"\"\nimport base64\nimport json\nimport sys\n\nimport requests\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\nimport pfx_to_pem as ptp\ndef decode_input(data_store):\n    \"\"\"Decode the encoded request input from user\"\"\"\n    try:\n        data_store = base64.b64decode(data_store).decode(\"utf-8\")\n        return data_store\n    except Exception as e:\n        print(\"AppResponseCode:1\\nThe encoded text is not valid : \" + str(e))\n        data_store = \"error\"\n        return data_store\n\ndef decode_input_pem(data_store):\n    \"\"\"Decode the encocded request input from user\"\"\"\n    #try:\n    data_store = base64.b64decode(data_store).decode(\"utf-8\")\n    with open('/tmp/data_store_validate','w') as K:\n        K.write(str(json.loads(data_store)))\n    pem_file=ptp.pfx_2_pem(json.loads(data_store))\n    return data_store,pem_file\n    '''except Exception as e:\n        print(\"\\nThe encoded text is not valid : \"+str(e))\n        data_store = \"error\"\n        return data_store,\"\"'''\n\ndef get_values(data_store):\n    \"\"\"Parse the decoded text to json and get the target machine and agent ip details\"\"\"\n    data_store = json.loads(data_store)\n    url = data_store[\"agentDetails\"][\"agentIP\"]\n    discovery_url = url + '/rest/DiscoverCertificates'\n\n    policy = {\n        \"POWERSHELL\" : 1,\n        \"WMI\" : 2\n    }\n    payload = {\n        \"UserName\": data_store['device']['access'][0]['userName'],\n        \"UserPassword\":data_store['device']['access'][0]['password'],\n        \"Policy\": policy[data_store[\"device\"][\"windowsGateway\"][\"type\"]],\n        \"TargetMachineName\": data_store['device']['hostName'],\n        \"IncludeBinaryData\": False,\n        \"IncludePrivateKey\": False,\n        \"Mode\": 2,\n        \"Start\": 0,\n        \"Limit\": 0\n    }\n    return discovery_url, payload\n\n\ndef discovery_api(url, payload, pem_file=None):\n    \"\"\"Validate the target machine\"\"\"\n    header = {\"Content-Type\":\"application/json\"}\n    try:\n        #print(payload) \n        if pem_file:\n            raw_response = requests.post(url, data=json.dumps(payload), headers=header, verify=False, cert=pem_file)\n        else:\n            raw_response = requests.post(url, data=json.dumps(payload), headers=header, verify=False)\n        raw_response_data = json.loads(raw_response.text)\n        return raw_response_data\n    except Exception as e:\n        print(\"AppResponseCode:1\\nERROR : \\n\" + str(e))\n        raw_response_data = \"No response\"\n        return raw_response_data\n\n\ndef frame_output(response_data):\n    \"\"\"Validation of response data to get the required output\"\"\"\n    output = \"AppResponseCode:1\"\n    if \"ErrorCode\" not in response_data:\n        output=\"AppResponseCode:0\"\n        return output\n    else:\n        return output + \"\\n\" + json.dumps(response_data)\n\n\nif __name__ == '__main__':\n    data_store,pem_file = decode_input_pem(sys.argv[1])\n    if data_store != \"error\":\n        discovery_url, payload  = get_values(data_store)\n\n    response_data = discovery_api(discovery_url, payload, pem_file)\n    if response_data == \"No response\":\n        print(\"AppResponseCode:1\\nCheck inputs\")\n    elif \"ErrorCode\" not in response_data:\n        print(\"AppResponseCode:0\")\n    else:\n        print(\"AppResponseCode:1\\n\" + json.dumps(response_data))\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":null,"_id":"cert_windows_noniis_validation","_keywords":["cert_windows_noniis_validation","","Version 2.x"]}