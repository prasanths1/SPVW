{"name":"Decrypt_Python3","scriptType":"Python","scriptContent":"##**************************************************************\n##\n## Copyright (C), AppViewX Inc\n##\n## Helper script helps to decrpt\n##\n## V 2.0 / 29 August 2020 / Anand Dileep, Praba, Ahamed, Dhinesh\n##\n##\n##**************************************************************\n\n# Importing the required modules\nimport os\nimport sys\nimport subprocess\n\n# import appviewx and bson are system depencies - it should be imported after sys path\nsys.path.insert(0,'../helper')\npath = os.path.dirname(os.path.abspath(__file__))\nsys.path.insert(0,path + '/../dependencies')\nimport appviewx\n\nconnect_db = appviewx.db_connection()\n\ndef getencoded(devName):\n    db = connect_db.appviewx\n    collection = db.device\n    import base64\n    for value in collection.find({'name':devName}):\n        if value['credentialType'] == 'Manual Entry':\n           username=value['access'][0]['userName']\n           encPassword=value['access'][0]['password']\n           key=value['access'][0]['key']\n        elif value['credentialType'] == 'Credential List - AppViewX':\n           credentialName = value['credentialName']\n           credentialList = db.credentialStore.find({'credentialName': credentialName})\n           for credValue in credentialList:\n               username = credValue['userName']\n               encPassword = credValue['password']['encryptedValue']\n               key = credValue['password']['key']\n    password=decyrpt(encPassword,key)    \n    sys.path.insert(0,path + '/../dependencies')\n    credential = username + ':' + password\n    encoded_text = base64.b64encode(credential.encode(\"utf-8\"))\n    return encoded_text\n\ndef getpassword(devName):\n    db = connect_db.appviewx\n    collection = db.device\n    for value in collection.find({'name':devName}):\n        if value['credentialType'] == 'Manual Entry':\n           username=value['access'][0]['userName']\n           encPassword=value['access'][0]['password']\n           key=value['access'][0]['key']\n        elif value['credentialType'] == 'Credential List - AppViewX':\n           credentialName = value['credentialName']\n           credentialList = db.credentialStore.find({'credentialName': credentialName})\n           for credValue in credentialList:\n               username = credValue['userName']\n               encPassword = credValue['password']['encryptedValue']\n               key = credValue['password']['key']\n    password=decyrpt(encPassword,key)\n    return username,password\n    \ndef decyrpt(EncryptedPassword,Key):\n    if not Key:\n        Key = 'dummy'\n    decrypt_jar_path = path+'/../../properties/DecryptAPS.jar'\n    java_path = path+'/../../jre/bin/java'\n    if is_kubernetes_installed():\n        java_path = 'java'\n    prop = os.path.realpath(path + '/../../properties/')\n    cmd = java_path + ' -Davx_property_file_path=' + prop + '/appviewx.properties -Dappviewx.property.path=' + prop + '/ -jar ' + decrypt_jar_path + ' ' + EncryptedPassword + ' ' + Key\n    #run cli cmd to decrypt jar \n    output = subprocess.check_output(cmd, shell=True)\n    if 'bytes' in str(type(output)):\n        output = output.decode()\n    password = ((output.strip('\\n')).split('\\n')[-1]).strip()\n    return password\n\ndef decyrpt_snow(EncryptedPassword, Key):\n    decrypt_jar_path = path + '/../../properties/CryptUtil.jar'\n    # decrypt_jar_path = path + '/../../properties/Decrypt.jar'\n    java_path = path + '/../../jre/bin/java'\n    if is_kubernetes_installed():\n        java_path = 'java'\n    prop = os.path.realpath(path + '/../../properties/') + os.sep\n    cmd = java_path + ' -Dappviewx.property.path=' + prop + ' -jar ' + decrypt_jar_path + ' ' + 'decrypt' + ' ' +  EncryptedPassword + ' ' + Key\n    # run cli cmd to decrypt jar\n    output = subprocess.check_output(cmd, shell=True)\n    if 'bytes' in str(type(output)):\n          output = output.decode()\n    password = ((output.strip('\\n')).split('=')[1]).strip()\n    return password\n\ndef is_kubernetes_installed():\n    try:\n        cmd = 'echo $MONGO_ENCRYPTED_PASSWORD'\n        password = subprocess.check_output(cmd, shell=True).decode('utf-8')\n        return bool(password.strip())\n    except Exception as exe:\n        print(exe)\n        sys.exit()\n","description":"","readOnly":false,"version":"Version 2.x","historyReferences":[],"usedHistory":null,"sourceControlSettings":{"committed":false,"pendingForPushAction":false,"pushActionCompleted":false,"enabledForRemoteRepository":true,"connectedRepo":null},"_id":"Decrypt_Python3","_keywords":["Decrypt_Python3","","Version 2.x"]}