{"uniqueId":"ZIl0H5zu","directoryUniqueId":"Sourcecon001","source":"USER_CREATED","tags":[],"userName":"admin","objectType":"TaskDetails","sourceControlSettings":{"committed":true,"pendingForPushAction":false,"pushActionCompleted":false,"enabledForRemoteRepository":true},"description":"This task is used to create / delete / modify the specified DNS Infoblox record. It can generate rest for api or execute the operation immediately","historyReferences":[],"usedHistory":null,"sampleInput":null,"sampleOutput":null,"contentTab":null,"successiveTasks":{"incoming":[{"taskId":"join_1","taskName":null,"subflowId":"pyfonGbS","parentSubflowId":"","taskType":"start","flowName":null,"linkType":null,"backwardLink":false}],"success":[{"taskId":"workflow_stop_1","taskName":null,"subflowId":"7njwvbJS","parentSubflowId":"","taskType":"stop","flowName":null,"linkType":null,"backwardLink":false}]},"flowPathID":null,"ignoredForStatusComputation":false,"flowName":"","subFlowID":"pyfonGbS","globalData":[{"name":" Gtm Wideip1","key":" Gtm Wideip1","value":" Gtm Wideip1","description":null,"dataType":"string","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":" Gtm Wideip1","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null}],"input":[{"name":null,"key":"failure-rcode","value":"<%failure-rcode%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"failure-rcode","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"pools-cname","value":"<%pools-cname%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"pools-cname","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"name","value":"<%wideip_name%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"name","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"last-resort-pool","value":"<%last-resort-pool%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"last-resort-pool","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"sessionId","value":"<%sessionId%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"sessionId","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"pool-lb-mode","value":"<%pool_lb_method%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"pool-lb-mode","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"ttl-persistence","value":"<%ttl-persistence%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"ttl-persistence","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"operation_type","value":"<%operation_type%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"operation_type","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"minimal-response","value":"<%minimal-response%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"minimal-response","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"is_rollback","value":"<%is_rollback%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"is_rollback","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"is_skip_required","value":"<%is_skip_required%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"is_skip_required","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"wide_ip_type","value":"<%wide_ip_type%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"wide_ip_type","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"ipv6-no-error-response","value":"<%ipv6-no-error-response%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"ipv6-no-error-response","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"topology-prefer-edns0-client-subnet","value":"<%topology-prefer-edns0-client-subnet%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"topology-prefer-edns0-client-subnet","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"enabled","value":"<%enabled%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"enabled","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"record_type","value":"<%record_type%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"record_type","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"persist-cidr-ipv4","value":"<%persist-cidr-ipv4%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"persist-cidr-ipv4","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"persist-cidr-ipv6","value":"<%persist-cidr-ipv6%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"persist-cidr-ipv6","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"rollback_input","value":"<%rollback_input%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"rollback_input","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"aliases","value":"<%aliases%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"aliases","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"app-service","value":"<%app-service%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"app-service","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"ipv6-no-error-neg-ttl","value":"<%ipv6-no-error-neg-ttl%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"ipv6-no-error-neg-ttl","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"load-balancing-decision-log-verbosity","value":"<%load-balancing-decision-log-verbosity%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"load-balancing-decision-log-verbosity","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"failure-rcode-ttl","value":"<%failure-rcode-ttl%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"failure-rcode-ttl","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"tabular_input","value":"<%tabular_input%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"tabular_input","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"device_name","value":"<%device_name%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"device_name","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"disabled","value":"<%disabled%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"disabled","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"rules","value":"<%rules%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"rules","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"failure-rcode-response","value":"<%failure-rcode-response%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"failure-rcode-response","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"is_stop_workflow_on_failure","value":"<%is_stop_workflow_on_failure%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"is_stop_workflow_on_failure","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"pools","value":"<%pools%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"pools","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"persistence","value":"<%persistence%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"persistence","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"metadata","value":"<%metadata%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"metadata","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"description","value":"<%description%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"description","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"is_deferred_execution","value":"<%is_deferred_execution%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"is_deferred_execution","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null}],"notificationMessage":{"0":"","1":"","2":""},"ancestor":null,"metaData":{"taskHeader":" ADC F5 GTM WideIP","hide":false,"lock":false,"successState":1,"failoverState":2,"taskScope":null,"hideFromStageView":false,"mode":"Developer","nature":"normal","lowCodeTask":false},"parentSubFlowID":"","helpContent":null,"name":"","syncExecution":true,"_id":null,"task_id":"gtm_wideip1_1","task_name":" ADC F5 GTM WideIP","task_type":"script","task_category":"script","component_type":"others","setNullProperties":true,"folderName":"BIG-IP GTM TEST","sub_group":null,"group_name":null,"viewable_type":"custom","scriptType":"Python","scriptContent":"#------------------------------------------------------\n# TASK DESCRIPTION \n#------------------------------------------------------\n'''\nOperation Type     : create / delete / modify \nModule         : gtm\nObject         : wideip\n\n\n\n\nThis OOB Task is to create / delete / modify the wideip in the module gtm. ( Type of operation to be specified in 'operation_type' )\n\n     - \"is_deferred_execution\" flag can be set to generate the commands or unset to execute immediately for carrying out the required operation with in the workflow.\n     - \"is_rollback\" can be set along with 'rollback_input' to carryout the rollback operation. ( ' rollback ' of previous execution to be fed to ' rollback_input' ) \n     - \"is_skip_required\" flag can be set to skip the execution of this task in the work flow.\n     - \"is_stop_workflow_on_failure\" flag can be set to stop the workflow execution in case of failure.\n     - \"tabular_input\" ( list of json ) can be used for carrying out multiple object operations, with same input json format in a list.\n     - Using the tabular input the actions can be mixed, like create and modify actions can be carried out in one go as well as the rollback of them \n     - Prevalidation and Postvalidation will be carried out before and after implementation\n'''\n\n\n#------------------------------------------------------\n# INPUT DETAILS \n#------------------------------------------------------\n'''\n[\n    { 'field_name' : 'operation_type',    'is_mandatory' : true,    'description' : 'Specify the operation to be carried out on the object ( create / modify / delete )' ,    'type' : 'string'},    \n    { 'field_name' : 'device_name',    'is_mandatory' : true,    'description' : 'Device Name managed by AppViewX' ,    'type' : 'string','supported_operations':'create / modify / delete'},    \n    { 'field_name' : 'is_rollback',    'is_mandatory' : false,    'description' : 'Flag to carryout the rollback' ,    'type' : 'json','supported_operations':'create / modify / delete'},    \n    { 'field_name' : 'is_deferred_execution',    'is_mandatory' : false,    'description' : 'Flag to carryout the deferred execution' ,    'type' : 'string','supported_operations':'create / modify / delete'},    \n    { 'field_name' : 'is_skip_required','is_mandatory' : false,    'description' : 'Set this flag to skip the task execution ( default False )' ,    'type' : 'bool','supported_operations':'create / modify / delete'},        \n    { 'field_name' : 'is_stop_workflow_on_failure','is_mandatory' : false,    'description' : 'Set this flag to stop the workflow on failure of this task ( default False )' ,    'type' : 'bool','supported_operations':'create / modify / delete'},    \n    { 'field_name' : 'rollback_input','is_mandatory' : false,    'description' : 'Input data for the rollback' ,    'type' : 'string','supported_operations':'create / modify / delete'},    \n    { 'field_name' : 'tabular_input','is_mandatory' : false,    'description' : 'Input data for the rollback' ,    'type' : 'json','supported_operations':'create / modify / delete'},    \n\n    { 'field_name' : 'name','is_mandatory' : true,    'description' : 'Name of the Object' ,    'type' : 'string','supported_operations':'create / modify / delete'},    \n    { 'field_name' : 'enabled','is_mandatory' : false,    'description' : 'Set this flag to enable the object' ,    'type' : 'bool','supported_operations':'create / modify '},    \n    { 'field_name' : 'record_type', 'is_mandatory' : false, 'description' : 'Specifies the record-type of the object', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'aliases', 'is_mandatory' : false, 'description' : 'Specifies alternate domain names for the web site content you are load balancing. You can use two different wildcard characters, asterisk (*) and question mark (?), to represent one or more characters. The default value is ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'app-service', 'is_mandatory' : false, 'description' : 'Specifies the name of the application service to which this wide ip belongs. The default value is ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'description', 'is_mandatory' : false, 'description' : 'User defined description. ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'disabled', 'is_mandatory' : false, 'description' : '', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'failure-rcode', 'is_mandatory' : false, 'description' : 'Specifies the DNS RCODE used when ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'failure-rcode-ttl', 'is_mandatory' : false, 'description' : 'Specifies the negative caching TTL of the SOA for the RCODE response. The default is 0, meaning no SOA is included (i.e. no caching).', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'failure-rcode-response', 'is_mandatory' : false, 'description' : 'When ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'last-resort-pool', 'is_mandatory' : false, 'description' : 'Specifies a last resort pool to use when load balancing requests for this wide IP. Any A or CNAME pool type is allowed. The default value is ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'load-balancing-decision-log-verbosity', 'is_mandatory' : false, 'description' : 'Specifies the amount of detail logged when making load balancing decisions. This is used for debugging purpose only. Performance will be affected if the value is not ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'minimal-response', 'is_mandatory' : false, 'description' : 'Specifies GTM will form the smallest allowable DNS response to a query. Typically, this will be a single resource record in the answer section. When set to ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'metadata', 'is_mandatory' : false, 'description' : 'Specifies user-defined data to associate with a server. By default the ', 'type' : 'json', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'persistence', 'is_mandatory' : false, 'description' : 'When ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'persist-cidr-ipv4', 'is_mandatory' : false, 'description' : 'Specifies a mask used to group IPv4 LDNS addresses. This feature allows one persistence record to be shared by LDNS addresses that match within this mask.', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'persist-cidr-ipv6', 'is_mandatory' : false, 'description' : 'Specifies a mask used to group IPv6 LDNS addresses. This feature allows one persistence record to be shared by LDNS addresses that match within this mask.', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'pool-lb-mode', 'is_mandatory' : false, 'description' : 'Specifies the load balancing method used to select a pool in this wide IP. This option is relevant only when multiple pools are configured for this wide IP. The default value is ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'pools', 'is_mandatory' : false, 'description' : 'Configures the pools the system uses when load balancing requests for this wide IP. The default value is ', 'type' : 'json', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'pools-cname', 'is_mandatory' : false, 'description' : 'Configures the CNAME pools the system uses when load balancing requests for this wide IP. The default value is ', 'type' : 'json', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'rules', 'is_mandatory' : false, 'description' : 'Specifies the iRules(r) that this wide IP uses for load balancing decisions. 'when' clauses for each event are grouped across all iRules(r) on this wide IP. For each event, clauses are evaluated in the listed ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'topology-prefer-edns0-client-subnet', 'is_mandatory' : false, 'description' : 'Specifies, when set to ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'ttl-persistence', 'is_mandatory' : false, 'description' : 'Specifies, in seconds, the length of time for which a persistence entry is valid. This value can range from ', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11','v12','v13','v14']},    \n    { 'field_name' : 'ipv6-no-error-neg-ttl', 'is_mandatory' : false, 'description' : 'Specifies the negative caching TTL of the SOA for the IPv6 NoError response. The default is 0, meaning no SOA is included (i.e. no caching).', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11']},    \n    { 'field_name' : 'ipv6-no-error-response', 'is_mandatory' : false, 'description' : 'When enabled, specifies that the system returns a NoError response to IPv6 wide IP requests. This response is an authoritative empty answer from the system to AAAA record requests. With this option enabled, the system responds faster to IPv6 requests for which it does not have AAAA records configured. The default value is disabled.', 'type' : 'string', 'supported_operations':' create / modify ', 'supported_versions' = ['v11']},    \n]\n'''\n\n\n#------------------------------------------------------\n# SAMPLE INPUT \n#------------------------------------------------------\n'''\n{\n    \"operation_type\"  :  \"create\",\n    \"device_name\"  :  \"Test_Device\",\n    \"is_rollback\"  :  \"false\",\n    \"is_deferred_execution\"  :  \"true\",\n    \"is_skip_required\" :\"true\",\n    \"is_stop_workflow_on_failure\":\"true\",\n    \"rollback_input\"  :  [],\n    \"tabular_input\"  :  [{\"name\":\"test_object_010\" ... }],\n    \"name\"  :  \"test_object_001\",\n    \"enabled\"  :  \"enabled\",\n    \"disabled\"  :  \"disabled\",\n    \"record_type\"  :  \"\",\n    \"aliases\"  :  \"\",\n    \"app-service\"  :  \"\",\n    \"description\"  :  \"\",\n    \"disabled\"  :  \"\",\n    \"failure-rcode\"  :  \"\",\n    \"failure-rcode-ttl\"  :  \"\",\n    \"failure-rcode-response\"  :  \"\",\n    \"last-resort-pool\"  :  \"\",\n    \"load-balancing-decision-log-verbosity\"  :  \"\",\n    \"minimal-response\"  :  \"\",\n    \"metadata\"  :  \"\",\n    \"persistence\"  :  \"\",\n    \"persist-cidr-ipv4\"  :  \"\",\n    \"persist-cidr-ipv6\"  :  \"\",\n    \"pool-lb-mode\"  :  \"\",\n    \"pools\"  :  \"\",\n    \"pools-cname\"  :  \"\",\n    \"rules\"  :  \"\",\n    \"topology-prefer-edns0-client-subnet\"  :  \"\",\n    \"ttl-persistence\"  :  \"\",\n    \"ipv6-no-error-neg-ttl\"  :  \"\",\n    \"ipv6-no-error-response\"  :  \"\",\n}\n'''\n\n\n#------------------------------------------------------\n# SAMPLE OUTPUT \n#------------------------------------------------------\n'''\n{\n    \"status\"  :  \"success\",\n    \"pre_validation\"  :   [{\"device_name\":\"test_device_001\",\"operation_type\":\"create\",\"commands\":[\"tmsh list gtm wideip test001\"],\"data\":[]}] ,\n    \"post_validation\"  :  [{\"device_name\":\"test_device_001\",\"operation_type\":\"create\",\"commands\":[\"tmsh list gtm wideip test001\"],\"data\":[]}] ,\n    \"implementation\"  :   [{\"device_name\":\"test_device_001\",\"operation_type\":\"create\",\"commands\":[\"tmsh create gtm wideip test001\"],\"data\":[]}] ,\n    \"partial_rollback\"  : [{\"device_name\":\"test_device_001\",\"operation_type\":\"create\",\"commands\":[\"tmsh delete gtm wideip test001\"],\"data\":[]}] ,\n    \"rollback\"  :  [{\"input_dict\":{},\"config_before_modification\":\"configuration snippets...\",\"config_before_modification_all_properties\":\"configuration snippets...\",\"config_after_modification\":\"configuration snippets...\"}]\n}\n'''\n\n\n#------------------------------------------------------\n# IMPORTS \n#------------------------------------------------------\nnull = None\nfalse = False\ntrue = True\nsys.path.insert(0,AVX::HELPER)\nsys.path.insert(0,AVX::DEPENDENCIES)\n\nimport json\nimport traceback\nimport oob_task_utility\nimport oob_constants\nimport commandrepoconnectorv2 as command_repo_connector\nimport diff_util_modify_delete_rollback as diff_util_modify_delete_rollback\nimport logger_util\nimport tmsh_util\n\nsession_id = '<%sessionId%>'\nIS_DETAILED_LOG_IN_FILE = True\nlogger = logger_util.get_logger(\"adc_f5_gtm_wideip\",file_name='adc_f5_gtm_wideip.log')\n\nmodule = 'gtm'\nobject_type = 'wideip'\n\n#Command Repository action wise indents\ncommand_repo_execute_command    =   'oob-execute-command'\ncommand_repo_indent_implement   =   'oob-implement-f5-gtm-wideip'\ncommand_repo_indent_delete      =   'oob-delete-f5-object'\ncommand_repo_indent_list        =   'oob-list-f5-object'\n\n#Generic keys for the task\ngeneric_keys_for_the_task = ['is_skip_required','operation_type','device_name','is_rollback','is_deferred_execution','rollback_input','tabular_input','rollback','name']\nlist_of_fields_with_replace_all_with_properties = [\"metadata\" ,\"pools\" ,\"pools-cname\" ]\n\n\n\n#List of fields to be ignored during rollback\nlist_of_fields_to_be_ignored_during_rollback = ['vs-index','inherit-certkeychain']\n\n#List of fields to be considered during rollback\nlist_of_fields_to_be_considered_during_rollback = {'disabled','enabled'}\n\n#Device Response Message - Error Recognize\nerror_messages_pre_validation = ['was not found']\nerror_messages_implementation_regex = ['was not found', 'unknown property','already exists in partition', 'Error','Duplicate']\n\ndevice_response_error_check = {}\ncreate = {}\ndevice_response_error_check['create'] = create\ncreate['pre_validation'] = {'list_of_messages':error_messages_pre_validation,'availability':True,'indent':command_repo_indent_list}\ncreate['implementation']={'list_of_messages':error_messages_implementation_regex,'availability':False,'indent':command_repo_indent_implement}\ncreate['post_validation'] = {'list_of_messages':error_messages_pre_validation,'availability':False,'indent':command_repo_indent_list}\ncreate['rollback']={'list_of_messages':error_messages_implementation_regex,'availability':False,'indent':command_repo_indent_delete}\n\ndelete = {}\ndevice_response_error_check['delete'] = delete\ndelete['pre_validation'] = {'list_of_messages':error_messages_pre_validation,'availability':False,'indent':command_repo_indent_list}\ndelete['implementation']={'list_of_messages':error_messages_implementation_regex,'availability':False,'indent':command_repo_indent_delete}\ndelete['post_validation'] = {'list_of_messages':error_messages_pre_validation,'availability':True,'indent':command_repo_indent_list}\ndelete['rollback']={'list_of_messages':error_messages_implementation_regex,'availability':False,'indent':command_repo_execute_command}\n\nmodify = {}\ndevice_response_error_check['modify'] = modify\nmodify['pre_validation'] = {'list_of_messages':error_messages_pre_validation,'availability':False,'indent':command_repo_indent_list}\nmodify['implementation']={'list_of_messages':error_messages_implementation_regex,'availability':False,'indent':command_repo_indent_implement}\nmodify['post_validation'] = {'list_of_messages':error_messages_pre_validation,'availability':False,'indent':command_repo_indent_list}\nmodify['rollback']={'list_of_messages':error_messages_implementation_regex,'availability':False,'indent':command_repo_execute_command}\n\n\n#Method to get input\ndef generate_input():\n    log_util('generate_input - Started Input Generator',True)\n    input_dict = {}\n\n    input_dict['record_type'] = '<%record_type%>'\n    input_dict['aliases'] = '<%aliases%>'\n    input_dict['app-service'] = '<%app-service%>'\n    input_dict['description'] = '<%description%>'\n    input_dict['disabled'] = '<%disabled%>'\n    input_dict['failure-rcode'] = '<%failure-rcode%>'\n    input_dict['failure-rcode-ttl'] = '<%failure-rcode-ttl%>'\n    input_dict['failure-rcode-response'] = '<%failure-rcode-response%>'\n    input_dict['last-resort-pool'] = '<%last-resort-pool%>'\n    input_dict['load-balancing-decision-log-verbosity'] = '<%load-balancing-decision-log-verbosity%>'\n    input_dict['minimal-response'] = '<%minimal-response%>'\n    input_dict['metadata'] = <%metadata%>\n    input_dict['persistence'] = '<%persistence%>'\n    input_dict['persist-cidr-ipv4'] = '<%persist-cidr-ipv4%>'\n    input_dict['persist-cidr-ipv6'] = '<%persist-cidr-ipv6%>'\n    input_dict['pool-lb-mode'] = '<%pool-lb-mode%>'\n    input_dict['pools'] = '<%pools%>'\n    input_dict['pools-cname'] = <%pools-cname%>\n    input_dict['rules'] = '<%rules%>'\n    input_dict['topology-prefer-edns0-client-subnet'] = '<%topology-prefer-edns0-client-subnet%>'\n    input_dict['ttl-persistence'] = '<%ttl-persistence%>'\n    input_dict['ipv6-no-error-neg-ttl'] = '<%ipv6-no-error-neg-ttl%>'\n    input_dict['ipv6-no-error-response'] = '<%ipv6-no-error-response%>'\n\n    input_dict['is_skip_required'] = oob_task_utility.is_skip_required('<%is_skip_required%>')\n    input_dict['device_name'] = '<%device_name%>'\n    input_dict['is_rollback'] = oob_task_utility.get_boolean_field('<%is_rollback%>')\n    input_dict['rollback_input'] = '<%rollback_input%>'\n    input_dict['is_deferred_execution'] = oob_task_utility.get_boolean_field('<%is_deferred_execution%>')\n    input_dict['name'] = '<%wide_ip_type%>'.lower() +\" \" +'<%name%>'\n    input_dict['enabled'] = '<%enabled%>'\n    input_dict['is_stop_workflow_on_failure'] = oob_task_utility.get_boolean_field('<%is_stop_workflow_on_failure%>')\n    input_dict['operation_type'] = '<%operation_type%>'\n    input_dict['is_bash_shell'] = tmsh_util.is_bash_shell(input_dict['device_name'],session_id)\n    input_dict['tabular_input'] = <%tabular_input%>\n    input_dict['module'] = 'gtm'\n    input_dict['object_type'] = 'wideip'\n\n    log_util('generate_input - Input Received : '+str(input_dict),True)\n    log_util('generate_input - Completed Input Generator',True)\n    return input_dict\n\n#Method to process tabular data\ndef process_tabular_data(input_dict_main):\n    log_util('process_tabular_data - Started Processing tabular input',True)\n    tabular_input = input_dict_main['tabular_input']\n    list_input_data = []\n\n    if tabular_input!=None and len(tabular_input)>0:\n        for table_input_member in tabular_input:\n            log_util('process_tabular_data - Input dict generation :'+str(table_input_member),True)\n            input_dict = {}\n            input_dict['record_type'] = table_input_member['record_type'] if 'record_type' in table_input_member else None\n            input_dict['aliases'] = table_input_member['aliases'] if 'aliases' in table_input_member else None\n            input_dict['app-service'] = table_input_member['app-service'] if 'app-service' in table_input_member else None\n            input_dict['description'] = table_input_member['description'] if 'description' in table_input_member else None\n            input_dict['disabled'] = table_input_member['disabled'] if 'disabled' in table_input_member else None\n            input_dict['failure-rcode'] = table_input_member['failure-rcode'] if 'failure-rcode' in table_input_member else None\n            input_dict['failure-rcode-ttl'] = table_input_member['failure-rcode-ttl'] if 'failure-rcode-ttl' in table_input_member else None\n            input_dict['failure-rcode-response'] = table_input_member['failure-rcode-response'] if 'failure-rcode-response' in table_input_member else None\n            input_dict['last-resort-pool'] = table_input_member['last-resort-pool'] if 'last-resort-pool' in table_input_member else None\n            input_dict['load-balancing-decision-log-verbosity'] = table_input_member['load-balancing-decision-log-verbosity'] if 'load-balancing-decision-log-verbosity' in table_input_member else None\n            input_dict['minimal-response'] = table_input_member['minimal-response'] if 'minimal-response' in table_input_member else None\n            input_dict['metadata'] = oob_task_utility.get_json_field(table_input_member['metadata']) if 'metadata' in table_input_member else None\n            input_dict['persistence'] = table_input_member['persistence'] if 'persistence' in table_input_member else None\n            input_dict['persist-cidr-ipv4'] = table_input_member['persist-cidr-ipv4'] if 'persist-cidr-ipv4' in table_input_member else None\n            input_dict['persist-cidr-ipv6'] = table_input_member['persist-cidr-ipv6'] if 'persist-cidr-ipv6' in table_input_member else None\n            input_dict['pool-lb-mode'] = table_input_member['pool-lb-mode'] if 'pool-lb-mode' in table_input_member else None\n            input_dict['pools'] = oob_task_utility.get_json_field(table_input_member['pools']) if 'pools' in table_input_member else None\n            input_dict['pools-cname'] = oob_task_utility.get_json_field(table_input_member['pools-cname']) if 'pools-cname' in table_input_member else None\n            input_dict['rules'] = table_input_member['rules'] if 'rules' in table_input_member else None\n            input_dict['topology-prefer-edns0-client-subnet'] = table_input_member['topology-prefer-edns0-client-subnet'] if 'topology-prefer-edns0-client-subnet' in table_input_member else None\n            input_dict['ttl-persistence'] = table_input_member['ttl-persistence'] if 'ttl-persistence' in table_input_member else None\n            input_dict['ipv6-no-error-neg-ttl'] = table_input_member['ipv6-no-error-neg-ttl'] if 'ipv6-no-error-neg-ttl' in table_input_member else None\n            input_dict['ipv6-no-error-response'] = table_input_member['ipv6-no-error-response'] if 'ipv6-no-error-response' in table_input_member else None\n\n            input_dict['device_name'] = table_input_member['device_name'] if 'device_name' in table_input_member else input_dict_main['device_name']\n            input_dict['is_rollback'] = oob_task_utility.get_boolean_field(table_input_member['is_rollback'] if 'is_rollback' in table_input_member else input_dict_main['is_rollback'])\n            input_dict['rollback_input'] = table_input_member['rollback_input'] if 'rollback_input' in table_input_member else input_dict_main['rollback_input']\n            input_dict['is_deferred_execution'] = oob_task_utility.get_boolean_field(table_input_member['is_deferred_execution'] if 'is_deferred_execution' in table_input_member else input_dict_main['is_deferred_execution'])\n            input_dict['name'] = table_input_member['name'] if 'name' in table_input_member else input_dict_main['name']\n            input_dict['enabled'] = table_input_member['enabled'] if 'enabled' in table_input_member else None\n            input_dict['operation_type'] = table_input_member['operation_type'] if 'operation_type' in table_input_member else None\n            input_dict['is_bash_shell'] = tmsh_util.is_bash_shell(input_dict['device_name'],session_id)\n            input_dict['module'] = 'gtm'\n            input_dict['object_type'] = 'wideip'\n            list_input_data.append(input_dict)\n    else:\n        list_input_data.append(input_dict_main)\n\n    log_util('process_tabular_data - Input dict generated list :'+str(list_input_data),True)\n    log_util('process_tabular_data - Completed Processing tabular input',True)\n    return list_input_data\n\ndef output_util(input,status):\n    log_util('Main - '+str(input),True)\n    if status!=None:\n        AVX::OUTPUT(input,status)\n    else:\n        AVX::OUTPUT(input)\n\ndef log_util(input_str,is_studio_log):\n    if IS_DETAILED_LOG_IN_FILE:\n        logger.info(input_str)\n    if is_studio_log:\n        AVX::LOG(input_str)\n\n# action - task action like create / delete / modify\n# activity - pre_validation, implementation, post_validation, rollback\ndef carry_out_action_wise_object_activity(activity,input_dict):\n    log_util('carry_out_action_wise_object_activity - carry_out_action_wise_object_activity - input_dict :'+str(input_dict),False)\n\n    operation_type = input_dict['operation_type']\n    response = command_repo_connector.command_repo_connector(session_id,device_response_error_check[operation_type][activity]['indent'],input_dict['is_deferred_execution'],{k:v for k,v in input_dict.items() if v is not None})\n    if input_dict['is_deferred_execution']:\n        return response\n    elif ( device_response_error_check[operation_type][activity]['availability'] and any(error in str(response['data']) for error in device_response_error_check[operation_type][activity]['list_of_messages']) ) or ( ( not device_response_error_check[operation_type][activity]['availability'] ) and ( not any(error in str(response['data']) for error in device_response_error_check[operation_type][activity]['list_of_messages']))):\n        return response\n    else:\n        raise Exception('Error :' + input_dict['name'] + str(response['data']))\n\n#Method to handle partial rollback\ndef partial_rollback(input_dict):\n    operation_type = input_dict['operation_type']\n    return command_repo_connector.command_repo_connector(session_id,device_response_error_check[operation_type]['rollback']['indent'],True,{k:v for k,v in input_dict.items() if v is not None})\n\ndef get_config_from_device(input_dict,is_deferred_execution):\n    return command_repo_connector.command_repo_connector(session_id,command_repo_indent_list,is_deferred_execution,{k:v for k,v in input_dict.items() if v is not None})\n\ndef get_config_for_all_properties_from_device(input_dict,is_deferred_execution):\n    payload = {k:v for k,v in input_dict.items() if v is not None}\n    payload['all_properties'] = True\n    return command_repo_connector.command_repo_connector(session_id,command_repo_indent_list,is_deferred_execution,payload)\n\ndef get_non_none_and_generic(input):\n    input_with_non_none = {k:v for k,v in input.items() if ( (v is not None ) and ( v is not ''))}\n    for key in generic_keys_for_the_task:        \n        if key in input_with_non_none:\n            del input_with_non_none[key]\n    return input_with_non_none\n\n#Method to handle rollback\ndef execute_rollback(rollback_input,is_skip_deferred):\n    output = []        \n    for rollback_dict in rollback_input:\n        log_util('execute_rollback - Executing rollback for the input :'+str(rollback_dict),False)\n        input_dict = rollback_dict['input_dict']\n        device_name = input_dict['device_name']\n        input_dict['is_deferred_execution'] = input_dict['is_deferred_execution'] if 'is_deferred_execution' in input_dict else None\n        if is_skip_deferred and  input_dict['is_deferred_execution']:\n            continue\n        operation_type = input_dict['operation_type']\n        current_output_dict = {}\n        current_output_dict['device_name'] = input_dict['device_name']\n        current_output_dict['operation_type'] = input_dict['operation_type']\n        modify_dict_with_out_none_and_generic_fields = get_non_none_and_generic(input_dict)\n        if input_dict['operation_type'] == 'create':\n            response = command_repo_connector.command_repo_connector(session_id,device_response_error_check[operation_type]['rollback']['indent'],input_dict['is_deferred_execution'],{k:v for k,v in input_dict.items() if v is not None})\n        elif input_dict['operation_type'] == 'modify':\n            command_from_util = diff_util_modify_delete_rollback.get_modification_rollback_command(rollback_dict['config_before_modification_all_properties'],rollback_dict['config_before_modification'],modify_dict_with_out_none_and_generic_fields.keys(),list_of_fields_with_replace_all_with_properties,list_of_fields_to_be_ignored_during_rollback,list_of_fields_to_be_considered_during_rollback)\n            command_from_util = 'modify '+module+' ' + object_type + get_record_type_command(input_dict) + input_dict['name']+' {'+command_from_util+' }'\n            if input_dict['is_bash_shell']:\n                command_from_util = 'tmsh '+command_from_util\n            form_fields_command_repo = {'device_name':device_name,'command':command_from_util}\n            if input_dict['is_deferred_execution']:\n                response = {'commands':[command_from_util],'data':[]}\n            else:\n                response = command_repo_connector.command_repo_connector(session_id,device_response_error_check[operation_type]['rollback']['indent'],input_dict['is_deferred_execution'],form_fields_command_repo)\n        elif input_dict['operation_type'] == 'delete':\n            command_from_util = diff_util_modify_delete_rollback.get_delete_rollback_command(rollback_dict['config_before_modification'],list_of_fields_with_replace_all_with_properties,list_of_fields_to_be_ignored_during_rollback)\n            command_from_util = 'create '+module+' ' + object_type + get_record_type_command(input_dict) + input_dict['name'] +' {'+command_from_util+' }'\n            if input_dict['is_bash_shell']:\n                command_from_util = 'tmsh '+command_from_util\n            form_fields_command_repo = {'device_name':device_name,'command':command_from_util}\n            if input_dict['is_deferred_execution']:\n                response = {'commands':[command_from_util],'data':[]}\n            else:\n                response = command_repo_connector.command_repo_connector(session_id,device_response_error_check[operation_type]['rollback']['indent'],input_dict['is_deferred_execution'],form_fields_command_repo)\n\n        current_output_dict['commands'] = response['commands'] if len(response['commands']) > 0 and input_dict['is_deferred_execution'] else []\n        current_output_dict['data'] = response['data'] if len(response['data']) > 0 else []\n        log_util('execute_rollback - Current Rollback output :'+str(current_output_dict),False)    \n        output.append(current_output_dict)\n    log_util('execute_rollback - Rollback Finished ',True)\n    return output\n\ndef get_record_type_command(input):\n    if 'record_type' in input:\n        return ' '+input['record_type'] if ( input['record_type'] != None and input['record_type'] != '' ) else ' '\n    else:\n        return ' '\n\ndef carry_out_implementation_activity_for_tabular_input(tabular_input,output):\n    log_util('carry_out_implementation_activity_for_tabular_input - Started Implementation',True)\n    activity_output = []\n    i = 0\n    for input_dict in tabular_input:\n        log_util('carry_out_implementation_activity_for_tabular_input - Processing input_dict - Operation Type : '+str(input_dict['operation_type']),True)\n        log_util('carry_out_implementation_activity_for_tabular_input - input_dict :'+str(input_dict),True)\n\n        rollback_for_current_input_dict = {}        \n        rollback_for_current_input_dict['input_dict'] = input_dict\n        rollback_for_current_input_dict['config_before_modification'] = output['pre_validation'][i]['data'][0]\n        i = i+1\n\n        config_for_all_properties = get_config_for_all_properties_from_device(input_dict,False)['data'][0]\n        log_util('carry_out_implementation_activity_for_tabular_input - config_for_all_properties :'+str(config_for_all_properties),False)\n        \n        #Removing unwanted content from list all-properties\n        if module+' ' + object_type + get_record_type_command(input_dict) + input_dict['name'] in config_for_all_properties:\n            config_for_all_properties = config_for_all_properties[config_for_all_properties.index(module+' '+object_type+get_record_type_command(input_dict)+input_dict['name']):]\n\n        rollback_for_current_input_dict['config_before_modification_all_properties'] = config_for_all_properties\n\n        output_from_command_repo = carry_out_action_wise_object_activity('implementation',input_dict)\n        log_util('carry_out_implementation_activity_for_tabular_input - output_from_command_repo'+str(output_from_command_repo),True)\n        if(not input_dict['is_deferred_execution']):\n            config = get_config_from_device(input_dict,input_dict['is_deferred_execution'])\n            rollback_for_current_input_dict['config_after_modification'] = config['data'][0]\n\n        output_dict = {}\n        output_dict['device_name'] = input_dict['device_name']\n        output_dict['data'] = output_from_command_repo['data']\n        output_dict['commands'] = output_from_command_repo['commands'] if input_dict['is_deferred_execution'] else []\n        output_dict['operation_type'] = input_dict['operation_type']\n        log_util('carry_out_implementation_activity_for_tabular_input - Implementation Output Dict :'+str(output_dict),False)\n        log_util('carry_out_implementation_activity_for_tabular_input - rollback_for_current_input_dict :'+str(rollback_for_current_input_dict),False)\n\n        activity_output.append(output_dict)\n\n        output['rollback'].append(rollback_for_current_input_dict)\n        output['object_names'].append(input_dict['name'])\n\n    log_util('carry_out_implementation_activity_for_tabular_input - Finished Implementation',True)\n    return activity_output\n\ndef carry_out_pre_validation_activity_for_tabular_input(tabular_input):\n    log_util('carry_out_pre_validation_activity_for_tabular_input - Carrying out pre_validation',True)\n    activity_output = []\n    for input_dict in tabular_input:\n        config_data = get_config_from_device(input_dict,False)\n        output_dict = {}\n        output_dict['device_name'] = input_dict['device_name']\n        output_dict['data'] = config_data['data']\n        output_dict['commands'] = config_data['commands'] if input_dict['is_deferred_execution'] else []\n        output_dict['operation_type'] = input_dict['operation_type']\n        activity_output.append(output_dict)\n        log_util('carry_out_pre_validation_activity_for_tabular_input - Validation Output :'+str(output_dict),False)\n    log_util('carry_out_pre_validation_activity_for_tabular_input - Finished pre_validation',True)\n    return activity_output\n\ndef carry_out_post_validation_activity_for_tabular_input(tabular_input):\n    log_util('carry_out_post_validation_activity_for_tabular_input - Carrying out post_validation',True)\n    activity_output = []\n    for input_dict in tabular_input:\n        config_data = get_config_from_device(input_dict,input_dict['is_deferred_execution'])\n        output_dict = {}\n        output_dict['device_name'] = input_dict['device_name']\n        output_dict['data'] = config_data['data']\n        output_dict['commands'] = config_data['commands'] if input_dict['is_deferred_execution'] else []\n        output_dict['operation_type'] = input_dict['operation_type']\n        activity_output.append(output_dict)\n        log_util('carry_out_post_validation_activity_for_tabular_input - Validation Output :'+str(output_dict),False)\n    log_util('carry_out_post_validation_activity_for_tabular_input - Finished post_validation',True)\n    return activity_output\n\ndef generate_partial_rollback_commands(rollback_input):\n    log_util('generate_partial_rollback_commands - Started generation of partial rollback commands',True)\n    output = []        \n    for rollback_dict in rollback_input:\n        log_util('generate_partial_rollback_commands_from_rollback - Generating Partial Rollback Command :'+str(rollback_dict),False)\n        input_dict = rollback_dict['input_dict']\n        device_name = input_dict['device_name']\n        operation_type = input_dict['operation_type']\n\n        current_output_dict = {}\n        current_output_dict['device_name'] = input_dict['device_name']\n        current_output_dict['operation_type'] = input_dict['operation_type']\n        modify_dict_with_out_none_and_generic_fields = get_non_none_and_generic(input_dict)\n        if input_dict['operation_type'] == 'create':\n            response = command_repo_connector.command_repo_connector(session_id,device_response_error_check[operation_type]['rollback']['indent'],True,{k:v for k,v in input_dict.items() if v is not None})\n            current_output_dict['commands'] = response['commands'] if len(response['commands']) > 0 else []\n            current_output_dict['data'] = response['data'] if len(response['data']) > 0 else []\n\n        elif input_dict['operation_type'] == 'modify':\n            command_from_util = diff_util_modify_delete_rollback.get_modification_rollback_command(rollback_dict['config_before_modification_all_properties'],rollback_dict['config_before_modification'],modify_dict_with_out_none_and_generic_fields.keys(),list_of_fields_with_replace_all_with_properties,list_of_fields_to_be_ignored_during_rollback,list_of_fields_to_be_considered_during_rollback)\n            command_from_util = 'modify '+module+' ' + object_type + ' ' +get_record_type_command(input_dict) + ' ' +input_dict['name']+' {'+command_from_util+' }'\n            if input_dict['is_bash_shell']:\n                command_from_util = 'tmsh '+command_from_util\n                \n            current_output_dict['commands'] = [command_from_util]\n            current_output_dict['data'] = []\n            \n\n        elif input_dict['operation_type'] == 'delete':\n            command_from_util = diff_util_modify_delete_rollback.get_delete_rollback_command(rollback_dict['config_before_modification'],list_of_fields_with_replace_all_with_properties,list_of_fields_to_be_ignored_during_rollback)\n            command_from_util = 'create '+module+' ' + object_type + ' ' +get_record_type_command(input_dict) + ' ' +input_dict['name']+' {'+command_from_util+' }'            \n            if input_dict['is_bash_shell']:\n                command_from_util = 'tmsh '+command_from_util\n\n            current_output_dict['commands'] = [command_from_util]\n            current_output_dict['data'] = []\n        \n        log_util('execute_rollback - Current Rollback output :'+str(current_output_dict),False)    \n        output.append(current_output_dict)\n    log_util('execute_rollback - Rollback Finished ',True)\n    return output\n\ndef set_skip_message(output):\n    output['status'] = 'skipped'\n    output['message'] = 'task execution skipped'\n    output_util(output,None)\n\ndef get_pre_validation_status(list_of_pre_validation_input):\n    log_util('get_pre_validation_status - Started pre_validation status',True)\n    pre_validation_status = True\n\n    for pre_validation_input in list_of_pre_validation_input:\n        log_util('get_pre_validation_status - Processing pre_validation_input :'+str(pre_validation_input),False)\n        operation_type = pre_validation_input['operation_type']\n        current_status =  ( device_response_error_check[operation_type]['pre_validation']['availability'] and any(error in str(pre_validation_input['data']) for error in device_response_error_check[operation_type]['pre_validation']['list_of_messages']) ) or ( ( not device_response_error_check[operation_type]['pre_validation']['availability'] ) and ( not any(error in str(pre_validation_input['data']) for error in device_response_error_check[operation_type]['pre_validation']['list_of_messages'])))\n        pre_validation_status = pre_validation_status and current_status        \n        log_util('get_pre_validation_status - pre_validation_status :'+str(pre_validation_status),True)\n\n        if not pre_validation_status:\n            log_util('get_pre_validation_status - Pre validation failed in Data :'+str(pre_validation_input['data'])+' Command :'+str(pre_validation_input['commands'])+' Data : '+str(pre_validation_input),True)\n            break;\n    log_util('get_pre_validation_status - Finished pre_validation status',True)\n    return pre_validation_status\n\ndef is_input_validation_success(input_data_dict):\n    output = True\n    log_util('Started validating user input ',True)\n    for input_dict in input_data_dict:\n        if ( 'enabled' in input_dict and 'disabled' in input_dict ) and ( ((True if input_dict['enabled'] else False) and (True if input_dict['disabled'] else False) ))  :\n            output = False\n            log_util('enable disable bot are set to true :'+str(input_dict),True)\n    log_util('Completed validating user input ',True)\n    return output\n\nif __name__ == '__main__':\n    log_util('Main - Started Task : gtm-wideip',True)\n    output = {}    \n    #Rollback with sequence number in the forward flow of execution    \n    input_dict_main = {}\n\n    \n    try:\n        #Get the input from the global\n        input_dict_main = generate_input()\n\n        if input_dict_main['is_skip_required']:\n            log_util('Main - Skipping the Task Execution',True)\n            #To skip the task execution\n            set_skip_message(output)\n        else:\n            #Handle tabular input\n            input_data_dict = process_tabular_data(input_dict_main)\n\n            input_validation_status = is_input_validation_success(input_data_dict)\n\n            if not input_validation_status:\n                log_util('User input validation failed',True)\n                output['status'] = 'failed'\n                output_util(output,2 if input_dict_main['is_stop_workflow_on_failure'] else None)\n            elif not input_dict_main['is_rollback']:\n                log_util('Main - Implementation Action :'+str(input_dict_main['operation_type'])+' started ',True)\n                output['rollback'] = []\n                output['object_names'] = []\n\n                output['pre_validation'] = carry_out_pre_validation_activity_for_tabular_input(input_data_dict)\n                pre_validation_status = get_pre_validation_status(output['pre_validation'])\n                if pre_validation_status:\n                    output['implementation'] = carry_out_implementation_activity_for_tabular_input(input_data_dict,output)\n                    output['post_validation'] = carry_out_post_validation_activity_for_tabular_input(input_data_dict)                                \n                    output['partial_rollback'] = generate_partial_rollback_commands(output['rollback'])\n                    output['status'] = 'success'\n                    output_util(output,None,)\n                else:\n                    log_util('Main - Prevalidation Failed ',True)\n                    output['status'] = 'failed'\n                    output_util(output,2 if input_dict_main['is_stop_workflow_on_failure'] else None)\n            else:\n                if input_dict_main['rollback_input'] == '' or input_dict_main['rollback_input'] == None:\n                    log_util('Main - Rollback input is none',True)\n                    raise Exception('Rollback input is none')\n                else:\n                    log_util('Main - Rollback Started ',True)\n                    log_util('Main - rollback_input :'+str(input_dict_main['rollback_input']),False)\n                    rollback_output = execute_rollback(input_dict_main['rollback_input'],False)\n                    log_util('Main - rollback_output :'+str(rollback_output),True)\n                    output['rollback_output'] = rollback_output\n                    output['status'] = 'success'\n                    output_util(output,None)            \n    except Exception as exception:\n        error_trace = traceback.format_exc()\n        log_util('Main - error_trace :'+str(error_trace),True)\n        log_util('Main - Exception received '+str(exception),True)\n        output = {}\n        output['status'] = 'failed'\n        output['error'] = str(exception)\n        if 'rollback' in output:\n            execute_rollback(output['rollback'],True)        \n        output_util(output,2 if input_dict_main['is_stop_workflow_on_failure'] else None)","http_method":"POST","action_id":"run-script"}